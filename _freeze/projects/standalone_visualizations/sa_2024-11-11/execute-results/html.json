{
  "hash": "6f47a8cc0015192c393b4c7bab325b74",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bob's Burgers Episode Fingerprints by Season\"\nsubtitle: \"Analyzing dialogue patterns across seasons\"\nauthor: \"Steven Ponce\"\ndate: \"2024-11-11\"\ncategories: [\"Bob's Burgers\", \"Standalone\", \"2024\"]\nimage: \"thumbnails/sa_2024-11-11.png\"\nformat:\n  html:\n    \n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    fig-width: 9\n    fig-height: 10\n    fig-dpi: 320\n    fig-format: \"png\"\n    embed-resources: true\neditor_options: \n  chunk_output_type: inline\nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: true\nshare:\n  permalink: \"https://stevenponce.netlify.app/projects.html\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n\n\n![A series of radar charts showing dialogue patterns across 14 seasons of Bob's Burgers. Each season chart displays metrics including Dialogue Density, Average Length, Sentiment Variance, Unique Words, Question Ratio, and Exclamation Ratio. Light purple polygons represent individual episodes, while dark purple lines show season averages, revealing how dialogue patterns evolved throughout the series.](sa_2024-11-11){#fig-1}\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  bobsburgersR,      # Bob's Burgers Datasets for Data Visualization\n  tidytext,          # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools \n  textdata,          # Download and Load Various Text Datasets \n  patchwork          # The Composer of Plots\n)    \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  9,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbobsburgersR::transcript_data\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(transcript_data)\nskim(transcript_data)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate metrics \nepisode_metrics <- transcript_data |>\n  filter(!is.na(dialogue)) |>\n  group_by(season, episode) |>\n  summarise(\n    # Basic dialogue metrics\n    dialogue_density = n() / max(line),\n    avg_length       = mean(str_length(dialogue)),\n    \n    # Sentiment analysis - AFINN Sentiment Lexicon\n    sentiment_variance = dialogue |>\n      tibble(text = _) |>\n      unnest_tokens(word, text) |>\n      inner_join(get_sentiments(\"afinn\"), by = \"word\") |>\n      pull(value) |>\n      var(na.rm = TRUE),\n    \n    # Word and punctuation metrics  \n    unique_words      = dialogue |>\n      str_split(\"\\\\s+\") |>\n      unlist() |>\n      n_distinct(),\n    \n    question_ratio    = mean(str_detect(dialogue, \"\\\\?\")),\n    exclamation_ratio = mean(str_detect(dialogue, \"!\")),\n    \n    .groups = \"drop\"\n  ) |>\n  # Scale all metrics\n  mutate(across(dialogue_density:exclamation_ratio, scale))\n\n\n# Prepare data for visualization \nepisode_metrics_long <- episode_metrics |>\n  pivot_longer(\n    cols = c(dialogue_density:exclamation_ratio),\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) |>\n  mutate(\n    angle = (as.numeric(factor(metric)) - 1) * 2 * pi / 6,\n    hjust = ifelse(angle < pi, 1, 0),\n    metric = case_when(\n      metric == \"dialogue_density\" ~ \"Dialogue\\nDensity\",\n      metric == \"avg_length\" ~ \"Average\\nLength\",\n      metric == \"sentiment_variance\" ~ \"Sentiment\\nVariance\",\n      metric == \"unique_words\" ~ \"Unique\\nWords\",\n      metric == \"question_ratio\" ~ \"Question\\nRatio\",\n      metric == \"exclamation_ratio\" ~ \"Exclamation\\nRatio\"\n    )\n  )\n\n# Filter data to remove empty groups\nepisode_metrics_long <- episode_metrics_long |>\n  filter(!is.na(value)) |>\n  group_by(season) |>\n  filter(n() > 1) |>  \n  ungroup()\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- plot aesthetics ----\nbkg_col      <- \"#f5f5f2\"  \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"   \n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"Source: {{bobsburgersR}}\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nbs <- str_glue(\"<span style='font-family:fa6-brands'>&#xe671; </span>\")\n\n# text\nlight_purple <- str_glue(\"<span style='color:#A374C2'>**Light Purple**</span>\")\ndark_purple  <- str_glue(\"<span style='color:#8856a7'>**Dark Purple**</span>\")\n\ntitle_text    <- str_glue(\"Bob's Burgers Episode Fingerprints by Season\")\nsubtitle_text <- str_glue(\"Analyzing dialogue patterns across seasons<br><br>\n                          **Note:** Metrics are standardized (**z-scores**). { light_purple } polygons represent individual episodes.<br>\n                          { dark_purple } line shows season average.\")\ncaption_text  <- str_glue(\"{li} stevenponce &bull; {gh} poncest &bull; #rstats #ggplot2 &bull; {tt}\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Source Sans Pro\", family = \"subtitle\")\nfont_add_google(\"Source Sans Pro\", family = \"text\")  \nfont_add_google(\"Roboto Mono\", family = \"numbers\")  \nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = \"plot\",\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 10, b = 10, l = 10),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.5), color = text_col, family = \"text\"),\n  strip.text            = element_text(size = rel(1), face = \"bold\", margin = margin(b = 10), family = \"text\"),\n  panel.grid.major      = element_line(color = \"gray90\", linewidth = 0.2),\n  panel.spacing.x       = unit(3, \"lines\"),  \n  panel.spacing.y       = unit(1, \"lines\"),  \n  aspect.ratio          = 1  \n)\n```\n:::\n\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- main plot ---- \nmain_plot <- episode_metrics_long |>   \n  ggplot(aes(x = metric, y = value)) +\n\n  # Geoms\n  # Add grid lines\n  geom_hline(yintercept = seq(-2, 7, by = 1), color = \"gray90\", linewidth = 0.2) +\n  \n  # Add episode polygons\n  geom_polygon(aes(group = interaction(season, episode)),\n               fill = \"#8856a7\",\n               alpha = 0.2) +\n  \n  # Add season average line\n  stat_summary(aes(group = season),\n               fun = 'mean', \n               geom = \"path\",\n               color = \"#8856a7\",\n               size = 0.8,\n               alpha = 0.9,\n               na.rm = TRUE) +\n  \n  # Scales\n  scale_x_discrete(expand = expansion(add = 1.2)) +  \n  scale_y_continuous(\n    expand = expansion(add = c(0.5, 1)),\n    limits = c(-2, 7)                 \n  ) +\n  coord_polar(clip = 'off') +\n\n  # Labs\n  labs(\n    x = NULL,\n    y = NULL,\n  ) +\n  \n  # Facet \n  facet_wrap(~season, nrow = 4, \n             labeller = labeller(season = function(x) paste(\"Season\", x))\n  ) +\n  \n  # Theme\n  theme(\n    axis.text.y = element_blank(),\n    axis.title = element_blank(),\n    plot.margin = margin(0, 0, 0, 0)\n  )\n\n### |- key pattern plot ----\nkey_patterns_plot <- ggplot() +\n  annotate(\n    \"richtext\",\n    x = 0,\n    y = 0,\n    label = glue::glue(\n      \"<span style='font-family:title;font-size:12pt;color:{title_col}'>**Key Patterns:**</span><br>\n      <span style='font-family:subtitle;font-size:9pt;color:{text_col}'>\n      • Early seasons (1-3): more experimental patterns<br>\n      • Middle seasons (4-8): consistent style<br>\n      • Later seasons: refined structure<br>\n      • Higher variance: character episodes<br>\n      • Higher question ratios: mystery plots\n      </span>\"\n    ),\n    fill = NA,\n    label.color = NA,\n    hjust = 0,\n    vjust = 1.2,\n  ) +\n  theme_void() +\n  theme(\n    plot.margin = margin(5, 10, 5, 10)      \n  )\n\n### |- title & subtitle plot ----\ntitle_plot <- ggplot() +\n  labs(\n    title = title_text,\n    subtitle = subtitle_text\n  ) +\n  theme_void() +\n  theme(\n    plot.title      = element_text(\n      size          = rel(1.8),\n      family        = \"title\",\n      face          = \"bold\",\n      color         = title_col,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 5)\n    ),   \n    plot.subtitle   = element_markdown(\n      size          = rel(1.1),\n      family        = \"subtitle\",\n      color         = subtitle_col,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 15)\n    ),\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin     = margin(10, 10, 0, 10)\n  )\n\n### |- combined plot ----\n\n# Define layout design with adjusted areas\n\n# area(t, l, b, r)\n\n# where:\n# t = top row position\n# l = left column position\n# b = bottom row position\n# r = right column position\n\ndesign <- c(\n    area(1, 1, 1, 6),      # title area\n    area(2, 1, 5, 6),      # main plot area\n    area(4, 2, 5, 6)       # key patterns area \n)\n\ncombined_plot <- title_plot +  main_plot + key_patterns_plot +\n  plot_layout(\n    design = design,\n    heights = c(0.8, 4, 4, 4, 0.2), \n    widths = c(1, 1, 1, 1, 1, 0.2)\n  ) +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n      plot.background = element_rect(fill = bkg_col, color = bkg_col),\n      plot.margin     = margin(10, 10, 10, 10),\n      plot.caption    = element_markdown(\n        size          = rel(0.65),\n        family        = \"caption\",\n        color         = caption_col,\n        lineheight    = 1.1,\n        hjust         = 0.5,\n        margin        = margin(t = 10, b = 5)\n      )\n    )\n  )\n```\n:::\n\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# There was some issues between patchwork and ggsave\n\n# Make sure these pkgs are installed\nif (!require(\"ggplotify\")) install.packages(\"ggplotify\")\nif (!require(\"grid\")) install.packages(\"grid\")\n\n# Use Arial (Windows system font)\nwindowsFonts(Arial = windowsFont(\"Arial\"))\n\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\n\n# Convert patchwork plot to grob\nplot_grob <- as.grob(combined_plot)\n\n# Set up the PNG device with proper font handling\npng(\n  filename = here::here(\"projects/standalone_visualizations/sa_2024-11-11.png\"),\n  width = 9, \n  height = 10, \n  units = \"in\", \n  res = 320,\n  type = \"cairo\" \n)\n\n# Enable showtext with specific settings\nshowtext::showtext_begin()\nshowtext::showtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n# Draw the plot\ngrid::grid.draw(plot_grob)\n\n# Clean up\nshowtext::showtext_end()\ninvisible(dev.off())\n\n# Create thumbnail\nmagick::image_read(here::here(\"projects/standalone_visualizations/sa_2024-11-11.png\")) |> \n  magick::image_resize(geometry = \"400\") |> \n  magick::image_write(here::here(\"projects/standalone_visualizations/thumbnails/sa_2024-11-11.png\"))\n```\n:::\n\n\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggplotify_0.1.2         patchwork_1.3.0         textdata_0.4.5         \n [4] tidytext_0.4.2          bobsburgersR_0.0.0.9000 glue_1.8.0             \n [7] scales_1.3.0            skimr_2.1.5             janitor_2.2.0          \n[10] showtext_0.9-7          showtextdb_3.0          sysfonts_0.8.9         \n[13] ggtext_0.1.2            lubridate_1.9.3         forcats_1.0.0          \n[16] stringr_1.5.1           dplyr_1.1.4             purrr_1.0.2            \n[19] readr_2.1.5             tidyr_1.3.1             tibble_3.2.1           \n[22] ggplot2_3.5.1           tidyverse_2.0.0         pacman_0.5.1           \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  lattice_0.22-6    \n [5] tzdb_0.4.0         yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     curl_6.0.0         gifski_1.32.0-1    fansi_1.0.6       \n[13] janeaustenr_1.0.0  pkgconfig_2.0.3    tokenizers_0.3.0   Matrix_1.7-0      \n[17] lifecycle_1.0.4    compiler_4.4.0     farver_2.1.2       munsell_0.5.1     \n[21] repr_1.1.7         snakecase_0.11.1   htmltools_0.5.8.1  SnowballC_0.7.1   \n[25] yaml_2.3.10        pillar_1.9.0       camcorder_0.1.0    magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] here_1.0.1         colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3    \n[41] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3    \n[45] timechange_0.3.0   rmarkdown_2.29     hms_1.1.3          evaluate_1.0.1    \n[49] knitr_1.49         markdown_1.13      gridGraphics_0.5-1 rlang_1.1.4       \n[53] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[57] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[61] systemfonts_1.1.0  fs_1.6.5          \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n\n##### Expand for GitHub Repo\n \n[Access the GitHub repository here](https://github.com/poncest/personal-website/)\n:::",
    "supporting": [
      "sa_2024-11-11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}