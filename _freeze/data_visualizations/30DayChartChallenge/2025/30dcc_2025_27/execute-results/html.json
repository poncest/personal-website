{
  "hash": "21a02d9e54918e5b9904490d0ada19f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"S&P 500 Price Uncertainty and Noise\"\nsubtitle: \"Visualizing price trend, random variations, and forecast uncertainty\"\ndescription: \"An exploration of market uncertainty and noise in S&P 500 price data, decomposing the signal from random variations and visualizing future prediction intervals with a fan chart.\"\ndate: \"2025-04-27\" \ncategories: [\"30DayChartChallenge\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n\"financial-markets\", \"uncertainty-visualization\", \"time-series\", \"forecasting\", \"fan-charts\", \"noise-decomposition\", \"ggplot2\", \"quantmod\", \"signal-processing\", \"stock-market\"\n  ]\nimage: \"thumbnails/30dcc_2025_27.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/30DayChartChallenge/2025/30dcc_2025_27.html\"\n  description: \"Day 27 of #30DayChartChallenge: Visualizing uncertainties and noise in S&P 500 data with signal decomposition and forecast prediction intervals.\"\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n![S&P 500 price chart showing historical performance from 2022-2025, featuring a smooth trend line (signal) overlaid with actual price movements (noise). A dashed vertical line marks the present, followed by forecast uncertainty bands at 50%, 80%, and 95% confidence levels. The signal-to-noise ratio is 7.5.](30dcc_2025_27.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  quantmod,       # Quantitative Financial Modelling Framework\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get S&P 500 data (just last 2 years to keep it faster)\ngetSymbols(\"^GSPC\", from = \"2022-01-01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"GSPC\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert to data frame and prepare data\nsp500_df <- GSPC |>  \n  as.data.frame() |>\n  rownames_to_column(var = \"date\") |>\n  mutate(date = as.Date(date)) |>\n  select(date, GSPC.Adjusted) |>\n  rename(price = GSPC.Adjusted)  \n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(sp500_df)\nskim(sp500_df)\n```\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- Tidy ----\n# Calculate log returns\nsp500_df <- sp500_df |>\n  arrange(date) |>\n  mutate(log_return = c(NA, diff(log(price))))\n\n# Decompose the signal into trend and noise components\n# Use loess smoothing to extract the trend\nloess_fit <- loess(price ~ as.numeric(date), data = sp500_df, span = 0.15)\nsp500_df$trend <- predict(loess_fit)\nsp500_df$noise <- sp500_df$price - sp500_df$trend\n\n# Calculate noise metrics\nnoise_sd <- sd(sp500_df$noise, na.rm = TRUE)\nnoise_range <- max(sp500_df$noise, na.rm = TRUE) - min(sp500_df$noise, na.rm = TRUE)\nsignal_to_noise <- sd(sp500_df$trend, na.rm = TRUE) / noise_sd\n\n# Calculate historical volatility (standard deviation of returns)\nvol <- sd(sp500_df$log_return, na.rm = TRUE)\n\n# Create forecast data\nlast_date <- max(sp500_df$date)\nlast_price <- sp500_df |> filter(date == last_date) |> pull(price)\nforecast_days <- 60\n\n# Create date sequence for weekdays only\nall_dates <- seq.Date(from = last_date + days(1), \n                      by = \"day\", \n                      length.out = forecast_days * 1.5) # Add buffer for weekends\nforecast_dates <- all_dates[!weekdays(all_dates) %in% c(\"Saturday\", \"Sunday\")]\nforecast_dates <- head(forecast_dates, forecast_days)\n\n# Simple random walk simulation for forecasting\nset.seed(123)\nn_simulations <- 1000\nsimulations <- matrix(nrow = length(forecast_dates), ncol = n_simulations)\n\nfor (i in 1:n_simulations) {\n  # Start with last known price\n  price <- last_price\n  # Generate random returns based on historical volatility\n  random_returns <- rnorm(length(forecast_dates), mean = 0, sd = vol)\n  \n  for (j in 1:length(forecast_dates)) {\n    # Apply random return\n    price <- price * exp(random_returns[j])\n    simulations[j, i] <- price\n  }\n}\n\n# Calculate percentiles for confidence intervals\nforecast_df <- data.frame(\n  date = forecast_dates,\n  mean = rowMeans(simulations),\n  lower_95 = apply(simulations, 1, quantile, probs = 0.025),\n  lower_80 = apply(simulations, 1, quantile, probs = 0.1),\n  lower_50 = apply(simulations, 1, quantile, probs = 0.25),\n  upper_50 = apply(simulations, 1, quantile, probs = 0.75),\n  upper_80 = apply(simulations, 1, quantile, probs = 0.9),\n  upper_95 = apply(simulations, 1, quantile, probs = 0.975)\n)\n```\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\ncolors <- get_theme_colors(\n  palette = c(\n    \"#8C1C13\", \"#BF4342\", \"#E7D7C1\", \"#1A4D2E\"\n    )\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    <- str_wrap(\"S&P 500 Price Uncertainty and Noise\",\n                          width = 70) \n\nsubtitle_text <- str_wrap(\"Visualizing price trend, random variations, and forecast uncertainty\",\n                          width = 80)\n\ncaption_text <- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 27,\n  source_text =  \"Yahoo Finance via { quantmod }\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(r = 10)),\n    axis.title.x = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(t = 10)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major.x = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme) \n```\n:::\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  Plot ----\np <- ggplot() +\n  # Geom\n  geom_line( # tend line\n    data = sp500_df, aes(x = date, y = trend), \n    color = colors$palette[4], linewidth = 0.9\n    ) +\n  geom_line( # noise around trend\n    data = sp500_df, aes(x = date, y = price), \n    color = colors$palette[4], linewidth = 0.4, alpha = 0.6\n    ) +\n  geom_ribbon(\n    data = forecast_df,  # 95% prediction interval\n    aes(x = date, ymin = lower_95, ymax = upper_95), \n    fill = colors$palette[1], alpha = 0.15\n    ) +\n  geom_ribbon(\n    data = forecast_df,  # 80% prediction interval\n    aes(x = date, ymin = lower_80, ymax = upper_80), \n    fill = colors$palette[2], alpha = 0.2\n    ) +\n  geom_ribbon(\n    data = forecast_df,  # 50% prediction interval\n    aes(x = date, ymin = lower_50, ymax = upper_50), \n    fill = colors$palette[3], alpha = 0.3,\n    ) +\n  geom_line(\n    data = forecast_df,  # Mean forecast\n    aes(x = date, y = mean), \n    color = colors$palette[1], linetype = \"dashed\", linewidth = 0.5\n    ) +\n   geom_vline(\n    xintercept = as.numeric(last_date), \n    linetype = \"dashed\", color = \"gray50\"\n    ) +\n  # Annotation\n  annotate(\n    \"text\", x = as.Date(\"2022-04-01\"), y = max(sp500_df$price), \n           label = \"Historical Performance\", hjust = 0, \n           fontface = \"bold\", color = colors$palette[4], size = 3.5\n    ) +\n  annotate(\n    \"text\", x = as.Date(\"2022-04-01\"), y = max(sp500_df$price) * 0.98, \n    label = paste0(\"Trend (signal) with noise overlay\"), \n    hjust = 0, color = colors$palette[4], size = 3\n    ) +\n  annotate(\n    \"text\", x = last_date + days(110), y = max(forecast_df$upper_95) * 0.95, \n    label = \"95%\", color = colors$palette[1], fontface = \"bold\", size = 3.5\n    ) +\n  annotate(\n    \"text\", x = last_date + days(110), y = max(forecast_df$upper_80), \n    label = \"80%\", color = colors$palette[1], fontface = \"bold\", size = 3.5,\n    vjust = 5\n    ) +\n  annotate(\n    \"text\", x = last_date + days(110), y = max(forecast_df$upper_50), \n    label = \"50%\", color = colors$palette[1], fontface = \"bold\", size = 3.5,\n    vjust = 5\n    ) +\n  annotate(\n    \"text\", x = forecast_dates[length(forecast_dates)/4], y = min(forecast_df$lower_95) * 0.97, \n    label = paste0(\"Signal-to-noise ratio: \", round(signal_to_noise, 1)), \n    hjust = 0.5, fontface = \"italic\", size = 3\n    ) +\n  # Scales\n  scale_y_continuous(\n    labels = scales::dollar_format()\n    ) +\n  scale_x_date(\n    date_breaks = \"6 months\", date_labels = \"%b %Y\"\n    ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Price (USD)\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(2),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 14)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 27, \n  width = 8, \n  height = 8\n  )\n```\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 quantmod_0.4.26 TTR_0.24.4     \n [5] xts_0.14.1      zoo_1.8-12      ggrepel_0.9.6   scales_1.3.0   \n [9] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n[13] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[17] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[21] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 lattice_0.22-6   \n [5] tzdb_0.5.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       pillar_1.9.0     \n[25] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[29] stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.4        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] timechange_0.3.0  rmarkdown_2.29    ragg_1.3.3        hms_1.1.3        \n[45] evaluate_1.0.1    knitr_1.49        markdown_1.13     rlang_1.1.6      \n[49] gridtext_0.1.5    Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6       \n[53] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9   \n[57] R6_2.5.1          systemfonts_1.1.0\n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`30dcc_2025_27.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/30dcc_2025_27.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1. Data Sources:\n   - Yahoo Finance via { quantmod } [quantmod](https://www.quantmod.com/)\n  \n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}