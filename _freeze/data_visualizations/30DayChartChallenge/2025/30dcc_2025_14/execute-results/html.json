{
  "hash": "de65c886c9e22eea8501c6a5b9b52804",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Win Percentage by Player Combinations and Playstyle in 2023-2024 Season\"\nsubtitle: \"Top-performing duos organized by their playing chemistry, with team affiliations\"\ndescription: \"Visualization exploring the relationship between NBA player partnerships and win percentages in the 2023-2024 season, categorized by playstyle groups. The chart reveals which player combinations have the strongest on-court chemistry and how playing styles influence team success.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-04-14\" \ncategories: [\"30DayChartChallenge\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n\"NBA\", \"Basketball\", \"Player Analytics\", \"Sports Visualization\", \"hoopR\", \"ggplot2\", \"Player Chemistry\", \"Win Rate\", \"Team Performance\", \"Relationships\", \"Kinship\", \"Player Partnerships\", \"Playstyle Analysis\"\n  ]\nimage: \"thumbnails/30dcc_2025_14.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/TidyTuesday/2025/30dcc_2025_14.html\"\n  description: \"Day 14 of #30DayChartChallenge: Visualizing NBA player relationships and how different playstyle combinations impact win percentages during the 2023-2024 season\"\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n![A lollipop chart showing NBA player combinations organized by playstyle groups (Offensive-Minded, Developing Chemistry, Two-Way Elite, and Defensive-Minded). Each horizontal line represents a player pair with team affiliations in parentheses, extending to points indicating their win percentage. The Offensive-Minded category tops the chart with the highest win rates (up to 90%), dominated by New York Knicks players. Colors differentiate the playstyle groups: yellow for Offensive-Minded, blue for Developing Chemistry, red for Two-Way Elite, and purple for Defensive-Minded. The visualization demonstrates which player relationships produce the most wins across different playing styles and teams.](30dcc_2025_14.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n   tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  paletteer,      # Comprehensive Collection of Color Palettes\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the lineup data\nlineups_2man <- nba_leaguedashlineups(\n  season = \"2023-24\",\n  measure_type = \"Advanced\",\n  group_quantity = 2, # 2-player combinations\n  season_type = \"Regular Season\"\n)\n\nlineups_df <- lineups_2man$Lineups\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(lineups_df)\nskim(lineups_df)\n```\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- Tidy ----\nlineups_clean <- lineups_df |>\n  select(\n    player_combo = GROUP_NAME,\n    min = MIN,\n    net_rating = NET_RATING,\n    off_rating = OFF_RATING, \n    def_rating = DEF_RATING,\n    gp = GP,\n    w = W,\n    l = L,\n    win_pct = W_PCT\n  ) |>\n  mutate(\n    across(c(min, net_rating, off_rating, def_rating, gp, w, l, win_pct), as.numeric),\n    win_loss_diff = w - l,\n    combo_effectiveness = (win_pct * 100) * (net_rating / 20) # Scale \n  ) |>\n  # Filter for meaningful playing time\n  filter(min >= 300) |>\n  # Group player combinations based on their effectiveness\n  mutate(\n    playstyle_group = case_when(\n      off_rating > median(off_rating) & def_rating < median(def_rating) ~ \"Offensive-Minded\",\n      off_rating < median(off_rating) & def_rating > median(def_rating) ~ \"Defensive-Minded\",\n      off_rating > median(off_rating) & def_rating > median(def_rating) ~ \"Two-Way Elite\",\n      TRUE ~ \"Developing Chemistry\"\n    )\n  )\n\n# Top player combinations by effectiveness\ntop_combos <- lineups_clean |>\n  group_by(playstyle_group) |>\n  arrange(desc(combo_effectiveness)) |>\n  slice_max(order_by = combo_effectiveness, n = 8) |>\n  ungroup()\n\n# Facet order (levels)\nplaystyle_order <- top_combos |>\n  group_by(playstyle_group) |>\n  summarize(avg_win = mean(win_pct, na.rm = TRUE)) |>\n  arrange(desc(avg_win)) |>\n  pull(playstyle_group)\n\n# Housekeeping\nrm(lineups_2man)\n```\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors <- get_theme_colors(\n  palette = paletteer:::paletteer_d(\n    \"ggsci::default_aaas\",\n    type = 'discrete', \n    n = 4)\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    <- str_wrap(\"Win Percentage by Player Combinations and Playstyle in 2023-2024 Season\",\n                          width = 60) \nsubtitle_text <- str_wrap(\"Top-performing duos organized by their playing chemistry, with team affiliations\", \n                          width = 100)\n\ncaption_text <- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 14,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.75)),\n\n    # Grid elements\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Strip\n    strip.text = element_text(family = fonts$text, color = colors$text, face = \"bold\", size = rel(0.92)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  Plot ----\np <- ggplot(top_combos,\n       aes(\n         x = win_pct * 100, \n         y = fct_reorder(player_combo, win_pct))\n) +\n  # Geom\n  geom_segment(aes(\n    x = 0,\n    xend = win_pct * 100,\n    y = fct_reorder(player_combo, win_pct),\n    yend = fct_reorder(player_combo, win_pct),\n    color = playstyle_group\n  ), \n  linewidth = 1, \n  alpha = 0.8\n  ) +\n  geom_point(aes(\n    color = playstyle_group), \n    size = 3.5\n  ) +\n  geom_text(aes(\n    label = sprintf(\"%.0f%%\", win_pct * 100)), \n    hjust = -0.5, size = 3\n  ) +\n  # Scales\n  scale_x_continuous(    \n    limits = c(0, 100)\n  ) +\n  scale_y_discrete() +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Win Rate (%)\",\n    y = NULL,\n    color = \"Playstyle\",\n  ) +\n  # Facets \n  facet_wrap(~ factor(\n    playstyle_group, levels = playstyle_order), \n    scales = \"free_y\", ncol = 1\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 5, b = 5)\n    ),\n  )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 14, \n  width = 8, \n  height = 10\n  )\n```\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 paletteer_1.6.0 hoopR_2.1.0    \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     rematch2_2.1.2      codetools_0.2-20   \n[55] ps_1.8.1            stringi_1.8.4       gtable_0.3.6       \n[58] later_1.3.2         prismatic_1.1.2     munsell_0.5.1      \n[61] furrr_0.3.1         pillar_1.9.0        htmltools_0.5.8.1  \n[64] R6_2.5.1            textshaping_0.4.0   rprojroot_2.0.4    \n[67] evaluate_1.0.1      markdown_1.13       gridtext_0.1.5     \n[70] snakecase_0.11.1    renv_1.0.3          Rcpp_1.0.13-1      \n[73] svglite_2.1.3       xfun_0.49           pkgconfig_2.0.3    \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`30dcc_2025_14.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/30dcc_2025_14.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1. Data Sources:\n   - ESPN via { hoopR } package: [hoopR](https://github.com/sportsdataverse/hoopR)\n  \n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}