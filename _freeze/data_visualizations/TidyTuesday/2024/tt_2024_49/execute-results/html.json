{
  "hash": "70359bab469e4037bf0434e7a2ae8290",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Traffic Flow Analysis: A64 Road, May 2021\"\nsubtitle: \"Analysis of traffic patterns across multiple dimensions\"\ndescription: \"A comprehensive analysis of traffic patterns on the A64 road during May 2021, examining hourly volumes, daily trends, weekday-weekend differences, and speed variations across multiple sensor locations. The visualization reveals distinct rush hour patterns, daily volume fluctuations with confidence intervals, and systematic differences between weekday and weekend traffic behaviors.\"\nauthor: \"Steven Ponce\"\ndate: \"2024-11-30\"\ncategories: [TidyTuesday, Data Visualization, R Programming]  \ntags: [traffic analysis, time series, data visualization, ggplot2, patchwork, transportation, peak hours, traffic patterns, sensor data, traffic flow]\nimage: \"thumbnails/tt_2024_49.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n\neditor_options: \n  chunk_output_type: inline\n\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/tt_2024_49.png\"\n  description: \"Visualization of U.S. Border Encounters showing demographic trends, geographic patterns, and processing types\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n![A four-panel visualization of A64 Road Traffic Flow (May 2021). The top left shows hourly traffic volume with highlighted rush hours (7-9 AM, 4-6 PM). The top right displays daily traffic volume trends with a scatter plot and confidence interval. The bottom left compares weekday vs weekend traffic patterns, showing average speed and volume throughout the day. The bottom right visualizes average speed trends by sensor location.](tt_2024_49.png){#fig-1}\n\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  pacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    glue,              # Interpreted String Literals\n    here,              # A Simpler Way to Find Your Files\n    patchwork,         # The Composer of Plots\n    paletteer,         # Comprehensive Collection of Color Palettes\n    gghighlight,       # Highlight Lines and Points in 'ggplot2'\n    lubridate          # Working with Dates and Times\n)   \n})\n\nsuppressMessages(source(here::here(\"_setup.R\")))\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  16,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tt <- tidytuesdayR::tt_load(2024, week = 49) \n\n# A64_traffic  <- tt$A64_traffic |> clean_names()\n \n# tidytuesdayR::readme(tt)\n# rm(tt)\n\n# Option 2: Read directly from GitHub\nA64_traffic <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')\nA64_traffic <-  A64_traffic |> clean_names() \n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(A64_traffic)\nskim(A64_traffic)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- tidy data ----\n\n# Hourly Volume Patterns (plot 1) ----\nhourly_volume_clean <- A64_traffic |>\n    group_by(report_date, hour = lubridate::hour(time_period_ending)) |>\n    summarise(\n        hourly_volume = sum(total_volume, na.rm = TRUE),\n        .groups = 'drop'\n    ) |>\n    mutate(\n        month_day = format(report_date, \"%b %d\"),\n        hour_label = sprintf(\"%02d:00\", hour),\n        hour_f = factor(hour, levels = c(7, 8, 9, 16, 17, 18), ordered = TRUE),\n        is_peak = hour %in% c(7:9, 16:18)\n    )\n\n# Daily Volume Trends (plot 2) ----\ndaily_volume_clean <- A64_traffic |>\n    group_by(date = as.Date(report_date)) |>\n    summarise(\n        daily_volume = sum(total_volume, na.rm = TRUE),\n        .groups = 'drop'\n    ) |>\n    mutate(\n        week_num = week(date),\n        month_day = format(date, \"%b %d\")\n    )\n\n# Weekend Patterns (plot 3) ----\nweekend_patterns_clean <- A64_traffic |>\n    mutate(\n        hour = lubridate::hour(time_period_ending),\n        is_weekend = ifelse(lubridate::wday(report_date) %in% c(1, 7), \"Weekend\", \"Weekday\"),\n        hour_label = sprintf(\"%02d:00\", hour)\n    ) |>\n    group_by(hour, hour_label, is_weekend) |>\n    summarise(\n        avg_volume = mean(total_volume, na.rm = TRUE),\n        avg_speed = mean(avg_mph, na.rm = TRUE),\n        .groups = 'drop'\n    ) |>\n    pivot_longer(\n        cols = c(avg_speed, avg_volume),\n        names_to = \"metric\",\n        values_to = \"value\"\n    ) |>\n    mutate(\n        metric = factor(metric,\n                        levels = c(\"avg_speed\", \"avg_volume\"),\n                        labels = c(\"Average Speed (mph)\", \"Average Volume (count)\"))\n    ) |>\n    group_by(hour, metric) |>\n    summarise(\n        weekday = value[is_weekend == \"Weekday\"],\n        weekend = value[is_weekend == \"Weekend\"],\n        .groups = 'drop'\n    )\n\n# Sensor Speed Patterns (plot 4) ----\nsensor_speed_clean <- A64_traffic |>\n    group_by(\n        date = as.Date(report_date), \n        site_id,\n        site_name\n    ) |>\n    summarise(\n        avg_speed = mean(avg_mph, na.rm = TRUE),\n        .groups = 'drop'\n    ) |>\n    mutate(\n        month_day = format(date, \"%b %d\"),\n        site_id = factor(site_id) \n    )\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\nbkg_col      <- \"#f5f5f2\"  \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray30\"  \n\nviz_colors <- list(\n    morning = \"#83c5be\",    \n    evening = \"#7B7FD4\",     \n    orange  = \"#EE6100FF\",   \n    gray_light = \"gray90\",   \n    gray_dark  = \"gray30\"    \n)\n\n# icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 49 } &bull; Source: WebTRIS Traffic Flow API<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nbs <- str_glue(\"<span style='font-family:fa6-brands'>&#xe671; </span>\")\n\n# text\ntitle_text    <- str_glue(\"Traffic Flow Analysis: A64 Road, May 2021\")\nsubtitle_text <-  str_glue(\"Analysis of traffic patterns across multiple dimensions\")\ncaption_text  <- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nsetup_fonts()\n\n### |-  plot theme ----\ntheme_traffic <- function() {\n    theme_minimal(base_size = 14, base_family = \"text\") +\n        theme(\n            # Background\n            plot.background  = element_rect(fill = bkg_col, color = bkg_col),\n            panel.background = element_rect(fill = bkg_col, color = bkg_col),\n            plot.margin      = margin(t = 10, r = 20, b = 10, l = 20),\n            \n            # Title, subtitle, caption\n            plot.title = element_markdown(\n                family = \"title\",\n                size = rel(1.4),\n                face = \"bold\",\n                color = title_col,\n                hjust = 0.5,\n                margin = margin(t = 10, b = 5)\n            ),\n            plot.subtitle = element_markdown(\n                family = \"text\",\n                size = rel(1),\n                color = subtitle_col,\n                hjust = 0.5,\n                margin = margin(b = 10)\n            ),\n            plot.caption = element_markdown(\n                family = \"caption\",\n                size = rel(0.7),\n                color = caption_col\n            ),\n            \n            # Axis formatting\n            axis.title = element_text(\n                family = \"text\",\n                size = rel(0.93),\n                face = \"bold\",\n                color = text_col\n            ),\n            axis.text = element_text(\n                family = \"text\",\n                size = rel(0.79),\n                color = text_col\n            ),\n            axis.line.x = element_line(\n                color = \"#252525\",\n                linewidth = 0.2\n            ),\n            \n            # Grid lines\n            panel.grid.major.y = element_line(\n                color = \"gray90\",\n                linewidth = 0.2\n            ),\n            panel.grid.major.x = element_blank(),\n            panel.grid.minor = element_blank(),\n            \n            # Legend\n            legend.position = \"top\",\n            legend.title = element_text(\n                size = rel(0.8),\n                face = \"bold\"\n            ),\n            legend.text = element_text(\n                size = rel(0.71)\n            ),\n            legend.key.width = unit(1.5, \"cm\"),\n            legend.spacing.x = unit(0.2, 'cm')\n        )\n}\n```\n:::\n\n\n\n\n#### 6. Plot \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot 1 ----\np1 <- hourly_volume_clean |>\n    ggplot(aes(x = report_date, \n               y = hourly_volume, \n               group = hour)) +\n    # Add non-peak hours with gray color\n    geom_line(\n        data = hourly_volume_clean |> filter(!hour %in% c(7:9, 16:18)),\n        color = viz_colors$gray_dark,\n        alpha = 0.2,\n        linewidth = 0.5\n    ) +\n    # Add peak hours with colors\n    geom_line(\n        data = hourly_volume_clean |> filter(hour %in% c(7:9, 16:18)),\n        aes(color = hour_f),\n        alpha = 0.9,\n        linewidth = 0.7\n    ) +\n    scale_color_manual(\n        values = c(\n            \"7\" = viz_colors$orange,\n            \"8\" = viz_colors$orange,\n            \"9\" = viz_colors$orange,\n            \"16\" = viz_colors$evening,\n            \"17\" = viz_colors$evening,\n            \"18\" = viz_colors$evening\n        ),\n        name = \"Hour of Day\"\n    ) +\n    scale_y_continuous(\n        labels = scales::comma_format(),\n        breaks = scales::breaks_pretty(n = 6),\n        expand = c(0.02, 0.02)\n    ) +\n    scale_x_datetime(\n        date_breaks = \"1 week\",\n        date_labels = \"%b %d\",\n        expand = c(0.02, 0.02)\n    ) +\n    labs(\n        title = \"Hourly Traffic Volume Throughout May\",\n        subtitle = \"Highlighting rush hour periods (7-9 AM, 4-6 PM)\",\n        x = \"Date\",\n        y = \"Hourly Volume\"\n    ) +\n    theme_traffic() +\n    theme(\n        legend.key.width = unit(2, \"cm\"),\n        legend.key.height = unit(0.3, \"cm\"),\n        legend.title = element_text(\n            size = rel(0.8),\n            face = \"bold\",\n            margin = margin(b = 5)\n        ),\n        legend.box.spacing = unit(0.5, \"cm\")\n    ) +\n    guides(\n        color = guide_legend(\n            nrow = 2,\n            byrow = TRUE\n        )\n    )\n\n### |-  plot 2 ----\np2 <- daily_volume_clean |>\n    ggplot(aes(x = date, y = daily_volume)) +\n    # Add confidence band and line\n    geom_smooth(\n        method = \"loess\",\n        span = 0.4,\n        color = viz_colors$evening,        \n        fill = alpha(viz_colors$evening, 0.25),\n        linewidth = 1.0,\n        se = TRUE\n    ) +\n    # Add values as points\n    geom_point(\n        color = viz_colors$orange,\n        alpha = 0.6,\n        size = 1.8\n    ) +\n    # Scales\n    scale_y_continuous(\n        labels = scales::comma_format(),\n        breaks = seq(0, 50000, by = 10000),\n        limits = c(0, 50000),\n        expand = c(0, 0)  # Remove padding\n    ) +\n    scale_x_date(\n        date_breaks = \"1 week\",\n        date_labels = \"%b %d\",\n        expand = c(0.02, 0.02)\n    ) +\n    # Labs\n    labs(\n        title = \"Daily Traffic Volume Patterns Throughout May\",\n        subtitle = \"Showing daily total volume with 95% confidence interval\",\n        x = \"Date\",\n        y = \"Daily Volume\"\n    ) +\n    # Theme \n    theme_traffic() +\n    theme(\n        panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.3),\n        panel.grid.major.x = element_line(color = \"gray90\", linewidth = 0.3),\n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20)\n    )\n\n### |-  plot 3 ----\np3 <- ggplot(weekend_patterns_clean, aes(x = hour)) +\n    # Add ribbons (weekday vs weekend)\n    geom_ribbon(\n        aes(\n            ymin = pmin(weekday, weekend),\n            ymax = weekend,\n            fill = \"Weekend\"\n        ),\n        alpha = 0.15\n    ) +\n    geom_ribbon(\n        aes(\n            ymin = pmin(weekday, weekend),\n            ymax = weekday,\n            fill = \"Weekday\"\n        ),\n        alpha = 0.15\n    ) +\n    # Add lines \n    geom_line(\n        aes(y = weekday, color = \"Weekday\"), \n        linewidth = 1.0\n    ) +\n    geom_line(\n        aes(y = weekend, color = \"Weekend\"), \n        linewidth = 1.0\n    ) +\n    # Scales\n    scale_x_continuous(\n        breaks = seq(0, 23, by = 4),\n        labels = function(x) sprintf(\"%02d:00\", x),\n        expand = c(0.02, 0.02)\n    ) +\n    # Add legend \n    scale_color_manual(\n        name = \"Day Type\",\n        values = c(\n            \"Weekday\" = viz_colors$evening,\n            \"Weekend\" = viz_colors$orange\n        )\n    ) +\n    scale_fill_manual(\n        name = \"Day Type\",\n        values = c(\n            \"Weekday\" = viz_colors$evening,\n            \"Weekend\" = viz_colors$orange\n        )\n    ) +\n    # Labs\n    labs(\n        title = \"Traffic Patterns: Weekday vs Weekend\",\n        subtitle = \"Comparing average speed and volume throughout the day\",\n        x = \"Hour of Day\",\n        y = NULL\n    ) +\n    # Facet\n    facet_wrap(~metric, scales = \"free_y\", nrow = 1) +\n    # Theme\n    theme_traffic() +\n    theme(\n        strip.text = element_text(size = rel(1), face = \"bold\"),\n        panel.grid.major.y = element_line(\n            color = viz_colors$gray_light, \n            linewidth = 0.3\n        ),\n        legend.key.width = unit(2, \"cm\")\n    ) \n    \n\n### |-  plot 4 ----\np4 <- sensor_speed_clean |>\n    ggplot(aes(x = date, y = avg_speed, color = site_id, group = site_id)) +\n    # Add lines\n    geom_line(linewidth = 1.0, alpha = 0.9) +\n\n    # Scales \n    scale_y_continuous(\n        breaks = seq(30, 50, by = 5),\n        limits = c(25, 55),\n        expand = c(0, 0)\n    ) +\n    scale_x_date(\n        date_breaks = \"1 week\",\n        date_labels = \"%b %d\",\n        expand = c(0.02, 0)\n    ) +\n    scale_color_manual(\n        values = c(\n            \"6867\" = viz_colors$evening,    \n            \"7035\" = viz_colors$orange,    \n            \"7042\" = viz_colors$evening,   \n            \"7058\" = viz_colors$orange  \n        ),\n        name = \"Sensor ID\"\n    ) +\n    # Customize legend\n    guides(\n        color = guide_legend(\n            nrow = 1,\n            byrow = TRUE\n        )\n    ) +\n    # Labs\n    labs(\n        title = \"Average Speed Trends by Sensor Location\",\n        subtitle = \"Comparing speed patterns across different monitoring points\",\n        x = \"Date\",\n        y = \"Average Speed (mph)\"\n    ) +\n    # Theme\n    theme_traffic() +\n    theme(\n        panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.3),\n        legend.key.width = unit(2, \"cm\"),\n        legend.text = element_text(size = rel(0.9))\n    ) \n   \n### |-  combined plots ----\ncombined_plot <- (\n    p1 + p2 + \n        plot_layout(widths = c(1, 1))\n) / (\n    p3 + p4\n)\n\ncombined_plot <- combined_plot +\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text  ,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                family = \"title\", \n                size = rel(2.5), \n                face = \"bold\",\n                hjust = 0.5,\n                color = title_col,\n                margin = margin(b = 10)\n            ),\n            plot.subtitle = element_text(\n                family = \"text\",\n                size = rel(1.3),\n                hjust = 0.5,\n                color = subtitle_col,\n                margin = margin(b = 20)\n            ),\n            plot.caption = element_markdown(\n                family = \"caption\",\n                size = rel(0.75),\n                color = caption_col,\n                hjust = 0.5,\n                margin = margin(t = 20)\n            ),\n            plot.margin = margin(10, 10, 10, 10),\n            plot.background = element_rect(fill = bkg_col, color = bkg_col),\n            panel.background = element_rect(fill = bkg_col, color = bkg_col)\n        )\n    ) &\n    theme(\n        legend.position = \"top\",\n        legend.box = \"vertical\",\n        legend.margin = margin(t = 10),\n        legend.spacing = unit(1, \"cm\"),\n        legend.key.width = unit(2, \"cm\"),\n        legend.key.height = unit(0.3, \"cm\")\n    )\n```\n:::\n\n\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(combined_plot, type = \"tidytuesday\", year = 2024, week = 49, height = 10, width = 16)\n```\n:::\n\n\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggplotify_0.1.2   gghighlight_0.4.1 paletteer_1.6.0   patchwork_1.3.0  \n [5] here_1.0.1        glue_1.8.0        scales_1.3.0      skimr_2.1.5      \n [9] janitor_2.2.0     showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9   \n[13] ggtext_0.1.2      lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n[17] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n[21] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      pacman_0.5.1      \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] camcorder_0.1.0    repr_1.1.7         withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   splines_4.4.0      parallel_4.4.0     base64enc_0.1-3   \n[37] vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0       jsonlite_1.8.9    \n[41] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[45] magick_2.8.5       gifski_1.32.0-1    rematch2_2.1.2     codetools_0.2-20  \n[49] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[53] htmltools_0.5.8.1  R6_2.5.1           rprojroot_2.0.4    vroom_1.6.5       \n[57] evaluate_1.0.1     lattice_0.22-6     markdown_1.13      gridtext_0.1.5    \n[61] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[65] nlme_3.1-164       mgcv_1.9-1         xfun_0.49          fs_1.6.5          \n[69] pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n \nThe complete code for this analysis is available in [`tt_2024_49.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2024/tt_2024_49.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}