{
  "hash": "01f8ad2c15b5bcd614d49aa72db916e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Character Interaction Networks in Shakespeare's Plays\"\nsubtitle: \"Visualizing character exchanges across different scenes and acts\"\nauthor: \"Steven Ponce\"\ndate: \"2024-09-16\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2024\"]\nimage: \"thumbnails/tt_2024_38.png\"\nformat:\n  html:\n    code-fold: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: false\n\n# filters:\n#   - social-share\n \nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations.html\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n![A visualization of character interaction networks in Shakespeare's plays Hamlet, Macbeth, and Romeo and Juliet. The network plots display characters as nodes, with lines (edges) connecting characters who interact in the same scenes. Each plot has the title of the play centered above it. In Hamlet, nodes are blue; in Macbeth, they are brown; and in Romeo and Juliet, they are green.](tt_2024_38.png){#fig-1}\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  lubridate,         # Make Dealing with Dates a Little Easier\n  MetBrewer,         # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  MoMAColors,        # Color Palettes Inspired by Artwork at the Museum of Modern Art in New York City\n  glue,              # Interpreted String Literals\n  igraph,            # Network Analysis and Visualization # Network Analysis and Visualization # Network Analysis and Visualization # Network Analysis and Visualization\n  ggraph,            # An Implementation of Grammar of Graphics for Graphs and Networks # An Implementation of Grammar of Graphics for Graphs and Networks # An Implementation of Grammar of Graphics for Graphs and Networks\n  patchwork,         # The Composer of Plots\n  NatParksPalettes   # Color Palettes Inspired by National Parks\n )  \n\n# ### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <-tidytuesdayR::tt_load(2024, week = 38) \n\nhamlet <- tt$hamlet |> clean_names() |> glimpse()\nmacbeth <- tt$macbeth |> clean_names() |> glimpse()\nromeo_juliet <- tt$romeo_juliet |> clean_names() |> glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n\n#### 3. Examing the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(hamlet)\nglimpse(macbeth)\nglimpse(romeo_juliet)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preprocess data for character interactions\ncombined_plays <- bind_rows(\n    hamlet |> mutate(play = \"Hamlet\"),\n    macbeth |> mutate(play = \"Macbeth\"),\n    romeo_juliet |> mutate(play = \"Romeo and Juliet\")\n)\n\n# Filter out stage directions\ndialogue_data <- combined_plays |>\n    filter(character != \"[stage direction]\") |>\n    group_by(play, act, scene, character) |>\n    summarize(dialogue = n(), .groups = 'drop')\n\n# Filter out scenes with fewer than 2 characters\nfiltered_dialogue_data <- dialogue_data |>\n    group_by(play, act, scene) |>\n    filter(n() > 1) |> \n    ungroup()\n\n# Create edges: character exchanges within the same scene\nedges <- filtered_dialogue_data |>\n    group_by(play, act, scene) |>\n    summarise(pairs = list(combn(character, 2, simplify = FALSE)), .groups = 'drop') |>\n    unnest(pairs) |>\n    unnest_wider(pairs, names_sep = \"_\") |>\n    rename(from = pairs_1, to = pairs_2) |>\n    count(play, from, to) |> \n    rename(from_char = from, to_char = to)  # Rename columns to prevent conflicts\n\n# Filter the data by each play and create separate graphs\nhamlet_edges <- edges |> filter(play == \"Hamlet\")\nmacbeth_edges <- edges |> filter(play == \"Macbeth\")\nromeo_juliet_edges <- edges |> filter(play == \"Romeo and Juliet\")\n\n# Create separate igraph objects for each play\ng_hamlet <- graph_from_data_frame(hamlet_edges, directed = FALSE)\ng_macbeth <- graph_from_data_frame(macbeth_edges, directed = FALSE)\ng_romeo_juliet <- graph_from_data_frame(romeo_juliet_edges, directed = FALSE)\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- plot aesthetics ----\nbkg_col      <- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"    \ncol_palette  <- NatParksPalettes::natparks.pals(name = 'CraterLake', n = 3, type = \"discrete\")\ncol_palette  <- colorspace::lighten(col_palette, 0.1) \n\n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 38 } &bull; Source: shakespeare.mit.edu (via github.com/nrennie/shakespeare<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nmn <- str_glue(\"<span style='font-family:fa6-brands'>&#xf4f6;</span>\")\n\n# text\ntitle_text    <- str_glue(\"Character Interaction Networks in Shakespeare's Plays\")\nsubtitle_text <- str_glue(\"Visualizing character exchanges across different scenes and acts\")\ncaption_text  <- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_void(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    strip.text            = element_textbox(size     = rel(1),\n                                            face     = 'bold',\n                                            color    = text_col,\n                                            hjust    = 0.5,\n                                            halign   = 0.5,\n                                            r        = unit(3, \"pt\"),\n                                            width    = unit(6, \"npc\"),\n                                            padding  = margin(2, 0, 2, 0),\n                                            margin   = margin(3, 3, 3, 3),\n                                            fill     = \"transparent\"),\n    panel.spacing         = unit(1, 'lines')\n)  \n\n### |-  plot function ----\nplot_character_network <- function(play_name, edges_data, node_color, edge_color) {\n    \n    # Create igraph object for the play\n    g_play <- graph_from_data_frame(edges_data, directed = FALSE)\n    \n    # Network plot\n    plot <- ggraph(g_play, layout = 'fr') +\n        geom_edge_link(aes(edge_alpha = n, edge_width = n), color = edge_color, show.legend = FALSE) +  # Set edge color with alpha and width\n        geom_node_point(size = 5, color = node_color) +  # Set node color\n        geom_node_text(aes(label = name), color = text_col, repel = TRUE, check_overlap = TRUE) +\n        scale_edge_width(range = c(0.5, 2.5)) +\n        theme_void() +\n        ggtitle(play_name) +  # Add top-center title for the play\n        theme(\n            plot.title = element_text(size = rel(1.5), face = \"bold\", hjust = 0.5)  # Centered title with bold font\n        )\n    \n    return(plot)\n} \n```\n:::\n\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  individual plots ----\nhamlet_plot       <- plot_character_network(\"Hamlet\", hamlet_edges, node_color = col_palette[1], edge_color = \"gray60\")\nmacbeth_plot      <- plot_character_network(\"Macbeth\", macbeth_edges, node_color = col_palette[2], edge_color = \"gray60\")\nromeo_juliet_plot <- plot_character_network(\"Romeo and Juliet\", romeo_juliet_edges, col_palette[3], edge_color = \"gray60\")\n\n### |-  Combine plots using patchwork ----\ncombined_plot <- hamlet_plot + macbeth_plot + romeo_juliet_plot + \n    patchwork::plot_layout(ncol = 3)\n\n### |-  final plot ----  \nfinal_plot <- combined_plot + \n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        \n        # Theme\n        theme = theme(\n            plot.title        = element_markdown(\n                size          = rel(1.9),   \n                hjust         = 0.5,\n                family        = \"title\",\n                face          = \"bold\",\n                color         = title_col,\n                lineheight    = 1.1,\n                margin        = margin(t = 5, b = 5)\n            ),\n            plot.subtitle     = element_markdown(\n                size          = rel(1.1), \n                hjust         = 0.5,\n                family        = 'subtitle',\n                color         = subtitle_col,\n                lineheight    = 1.1, \n                margin        = margin(t = 5, b = 15)\n            ),\n            plot.caption      = element_markdown(\n                size          = rel(.50),\n                family        = \"caption\",\n                color         = caption_col,\n                lineheight    = 1.1,\n                hjust         = 0.5,\n                halign        = 0.5,\n                margin        = margin(t = 5, b = 5)\n            ),\n        )\n    )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nlibrary(ggplotify)\n# Convert patchwork plot to grob \n# There was some issues between patchwork and ggsave\nplot_grob <- as.grob(final_plot)\n\n# Save the plot again\nggsave(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_38.png\"),\n    plot = plot_grob,\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_38.png\")) |> \n  magick::image_resize(geometry = \"400\") |> \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_38.png\"))\n```\n:::\n\n\n\n\n#### 8. Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.4       renv_1.0.3        evaluate_1.0.1   \n```\n\n\n:::\n:::\n",
    "supporting": [
      "tt_2024_38_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}