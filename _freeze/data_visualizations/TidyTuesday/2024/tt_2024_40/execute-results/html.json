{
  "hash": "1c00a8218b504180f47882bf3b3f2cee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"White and Black Chess Ratings: A Distribution Analysis\"\nsubtitle: \"How ratings vary between White and Black players across competitive chess matches\"\nauthor: \"Steven Ponce\"\ndate: \"2024-09-25\"\ncategories:\n  - \"#TidyTuesday\"\nimage: \"thumbnails/tt_2024_40.png\"\n\nformat:\n  html:\n    code-fold: true\n    code-link: true\n    df_print: kable\n  \neditor_options: \n  chunk_output_type: console\n\nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: false\n\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations.html\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n![The image displays two overlapping kernel density plots representing the distribution of chess player ratings for \"White\" and \"Black\" players. Both distributions peak around 1500 on the x-axis and range from 500 to 3000. The graph title is \"White and Black Chess Ratings: A Distribution Analysis.\"](tt_2024_40.png){#fig-1}\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  lubridate,         # Make Dealing with Dates a Little Easier\n  glue,              # Interpreted String Literals\n  ggfx               # Pixel Filters for 'ggplot2' and 'grid' # Pixel Filters for 'ggplot2' and 'grid' \n )  \n\n### |- figure size ---- \ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  7.5,\n  height =  5,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <-tidytuesdayR::tt_load(2024, week = 40) \n\nchess <- tt$chess |> clean_names() |> glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n\n#### 3. Examing the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(chess)\nskim(chess)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidy\nchess_data <- chess |>  \n    select(white_rating, black_rating) |>\n    pivot_longer(\n        cols = c(white_rating, black_rating), \n        names_to = \"player\", \n        values_to = \"rating\") |>\n    mutate(player = ifelse(player == \"white_rating\", \"White\", \"Black\"))\n\n# Labels \nlabels <- tibble(\n    label = c(\"White\", \"Black\"),\n    player = c(\"White\", \"Black\"),\n    x = c(1600, 1600), \n    y = c(0.0001, 0.0001) \n)\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- plot aesthetics ----\nbkg_col      <- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"    \ncol_palette  <- paletteer::paletteer_d(\"peRReo::don\")[c(5,9)]\n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 40 } &bull; Source: Chess Game Dataset (Lichess)<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nmn <- str_glue(\"<span style='font-family:fa6-brands'>&#xf4f6;</span>\")\n\n# text\ntitle_text    <- str_glue(\"White and Black Chess Ratings: A Distribution Analysis\")\nsubtitle_text <- str_glue(\"How ratings vary between White and Black players across competitive chess matches\")\ncaption_text  <- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_blank(),  \n    axis.text.y           = element_blank(),\n    axis.text.x           = element_text(color = text_col, family = \"text\", size = rel(0.9)),\n    axis.ticks.x          = element_line(color = text_col),  # Show x-axis ticks\n    panel.grid            = element_blank(),\n    strip.text            = element_blank() # Remove strip text \n)\n```\n:::\n\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  final plot ----\np <- ggplot(chess_data, aes(x = rating)) +\n\n  # Geoms\n  # Reference text layer\n  as_reference(\n    geom_text(\n      data = labels, aes(x = x, y = y, label = label),\n      family = \"title\", colour = \"gray10\", size = rel(35), hjust = 0.5, vjust = 0\n    ),\n    id = \"text\"\n  ) +\n\n  # Blending the text with the density plot\n  with_inner_glow(\n    with_blend(\n      geom_density(aes(fill = player, color = player),\n        alpha = 1, show.legend = FALSE,\n        bw = 25,\n        kernel = \"epanechnikov\"\n      ),\n      bg_layer = \"text\", blend_type = \"xor\"\n    ),\n    color = \"gray10\", sigma = 15\n  ) +\n\n  # Labs\n  labs(\n    x = \"Player Rating\",\n    y = NULL,\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n\n  # Scales\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_fill_manual(values = col_palette) +\n  scale_color_manual(values = col_palette) +\n  coord_cartesian(clip = \"off\") +\n\n  # Facet\n  facet_wrap(~player, ncol = 1) +\n\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.55),\n      family = \"title\",\n      face = \"bold\",\n      color = title_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = \"subtitle\",\n      color = subtitle_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.50),\n      family = \"caption\",\n      color = caption_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 1,\n      margin = margin(t = 5, b = 5)\n    )\n  )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\n# Save the plot again\nggsave(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_40.png\"),\n    plot = p,\n    width  = 7.5,\n    height = 5,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_40.png\")) |> \n  magick::image_resize(geometry = \"400\") |> \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_40.png\"))\n```\n:::\n\n\n\n\n#### 8. Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfo <- capture.output(sessioninfo::session_info())\n# Remove lines that contain \"[1]\" and \"[2]\" (the file paths)\nfiltered_info <- grep(\"\\\\[1\\\\]|\\\\[2\\\\]\", info, value = TRUE, invert = TRUE)\ncat(filtered_info, sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/New_York\n date     2024-10-07\n pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P cli           3.6.3   2024-06-21 [?] RSPM (R 4.4.0)\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      0.24.0  2024-06-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P htmlwidgets   1.6.4   2023-12-06 [?] CRAN (R 4.4.0)\n P jsonlite      1.8.8   2023-12-04 [?] RSPM (R 4.4.0)\n P knitr         1.48    2024-07-07 [?] RSPM (R 4.4.0)\n P rlang         1.1.4   2024-06-04 [?] RSPM (R 4.4.0)\n P rmarkdown     2.28    2024-08-17 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P xfun          0.47    2024-08-17 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}