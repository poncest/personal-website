{
  "hash": "72905a9a938ef8804a77fe5f2f505b56",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring Individual Word Trends Across 27 Seasons of Power Rangers\"\nsubtitle: \"Tracking the top 10 words and how they evolve independently over time in episode descriptions\"\nauthor: \"Steven Ponce\"\ndate: \"2024-08-27\"\ncategories:\n  - \"#TidyTuesday\"\nimage: \"thumbnails/tt_2024_35.png\"\nformat:\n  html:\n    code-fold: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: false\n\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations.html\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n![The faceted area chart displays the frequency of the top 10 words used in Power Rangers episode descriptions over 27 seasons. Each word is plotted separately, with its frequency on the y-axis and the season number on the x-axis. This highlights individual word trends over time.](tt_2024_35.png){#fig-1}\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,         # Compact and Flexible Summaries of Data\n  scales,        # Scale Functions for Visualization\n  lubridate,     # Make Dealing with Dates a Little Easier\n  MetBrewer,     # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  tidytext       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n )   \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n#### 2. Read in the Data \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <-tidytuesdayR::tt_load(2024, week = 35) \n\nepisodes <- tt$power_rangers_episodes |> clean_names() |> glimpse()\nseasons  <- tt$power_rangers_seasons |> clean_names() |> glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n#### 3. Examing the Data \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(episodes)\nglimpse(seasons)\n```\n:::\n\n\n#### 4. Tidy Data \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidy\njoined_data <- episodes |> \n    left_join(y = seasons, by = \"season_title\") |> \n    rename(\n        imdb_rating_episode = imdb_rating.x,\n        imdb_rating_season = imdb_rating.y,\n    ) |> \n    mutate(air_date_last_ep = ymd(air_date_last_ep)) \n\n# Unnest tokens from the 'desc' column, remove stop words, and calculate word frequency\nword_frequency_over_time <- joined_data |>\n    unnest_tokens(word, desc) |>\n    anti_join(stop_words, by = \"word\") |>\n    count(season_num, word, sort = TRUE) |>\n    group_by(season_num) |>\n    mutate(frequency = n / sum(n)) |>\n    ungroup()\n\n# Select the top 10 words by total frequency across all seasons\ntop_words <- word_frequency_over_time |>\n    group_by(word) |>\n    summarise(total_frequency = sum(frequency)) |>\n    top_n(10, total_frequency) |>\n    pull(word)\n\n# Filter for top words \ndata_plot <- word_frequency_over_time |>\n    filter(word %in% top_words) |>\n    mutate(word = fct_reorder(word, -frequency))\n```\n:::\n\n\n\n#### 5. Visualization Parameters \n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- plot aesthetics ----\nbkg_col      <- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"    \n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 35 } &bull; Source: Power Rangers: Seasons and episodes data<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nmn <- str_glue(\"<span style='font-family:fa6-brands'>&#xf4f6;</span>\")\n\n# text\ntitle_text    <- str_glue(\"Exploring Individual Word Trends Across 27 Seasons of Power Rangers\")\nsubtitle_text <- str_glue(\"Tracking the top 10 words and how they evolve independently over time in\\nepisode descriptions\")\ncaption_text  <- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 20, r = 20, b = 20, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = .15),\n    panel.grid.minor.y    = element_blank(),\n    panel.grid.major.y    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray'),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_blank(),\n    \n    strip.text            = element_textbox(size     = rel(1),\n                                            face     = 'bold',\n                                            color    = text_col,\n                                            hjust    = 0.5,\n                                            halign   = 0.5,\n                                            r        = unit(5, \"pt\"),\n                                            width    = unit(5.5, \"npc\"),\n                                            padding  = margin(3, 0, 3, 0),\n                                            margin   = margin(3, 3, 3, 3),\n                                            fill     = \"transparent\"),\n    panel.spacing       = unit(1, 'lines')\n)  \n```\n:::\n\n\n\n#### 6. Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  final plot ----  \np <- data_plot |> \n    ggplot(aes(x = season_num, y = frequency, color = word, fill = word)) +\n    \n    # Geoms\n    geom_line(linewidth = 0.6) +  \n    geom_area(alpha = 0.5) +\n    \n    # Scales\n    scale_x_continuous(breaks = pretty_breaks()) +\n    scale_y_continuous(breaks = pretty_breaks(n = 2)) +\n    scale_color_viridis_d(option = \"F\", begin = 0.05, end = .85) + \n    scale_fill_viridis_d(option = \"F\", begin = 0.05, end = .85) + \n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        x = \"Season Number\",\n        y = \"Word Frequency\",\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n    ) +\n    \n    # Facets\n    facet_wrap(~ word, scales = \"free_y\", ncol = 2) +  \n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.3),\n            family = \"title\",\n            color = title_col,\n            face = \"bold\",\n            lineheight = 0.85,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1),\n            family = \"subtitle\",\n            color = title_col,\n            lineheight = 1,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size = rel(.5),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 0.6,\n            hjust = 0,\n            halign = 0,\n            margin = margin(t = 10, b = 0)\n        )\n    )\n```\n:::\n\n\n#### 7. Save\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_35.png\"),\n  plot = p,\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_35.png\")) |> \n  magick::image_resize(geometry = \"400\") |> \n  magick::image_write(here::here(\"data_visualizations/thumbnails/tt_2024_35.png\"))\n```\n:::\n\n\n\n#### 8. Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.16.0 yaml_2.3.10      \n [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.8    xfun_0.47        \n[13] digest_0.6.37     rlang_1.1.4       renv_1.0.3        evaluate_0.24.0  \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}