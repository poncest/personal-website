{
  "hash": "247b8759b8e51858e29da66b83557858",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Radar Charts of Species Categories by National Park\"\nsubtitle: \"Comparison of species distributions across U.S. national parks\"\nauthor: \"Steven Ponce\"\ndate: \"2024-10-07\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2024\"]\nimage: \"thumbnails/tt_2024_41.png\"\n\nformat:\n  html:\n    code-fold: true\n    code-link: true\n    df_print: kable\n  \neditor_options: \n  chunk_output_type: console\n\nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: false\n\n# share:\n#   permalink: \"https://stevenponce.netlify.app/data_visualizations.html\"\n#   linkedin: true\n#   twitter: true\n#   email: true\n---\n\n![The image displays 15 radar charts, with each chart representing different species categories in various U.S. national parks. Each chart is labeled with a park name and compares the counts of species such as mammals, reptiles, fungi, etc. These charts are used to visualize the biodiversity across the parks.\"](tt_2024_41.png){#fig-1}\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: load\n\n## 1. LOAD PACKAGES & SETUP ----\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    lubridate,         # Make Dealing with Dates a Little Easier\n    glue,              # Interpreted String Literals\n    fmsb,              # Functions for Medical Statistics Book with some Demographic Data\n    purrr,             # Functional Programming Tools\n    patchwork,         # The Composer of Plots\n    grid,              # The Grid Graphics Package\n    cowplot,           # Streamlined Plot Theme and Plot Annotations for 'ggplot2'\n    png,               # Read and write PNG images\n    here               # A Simpler Way to Find Your Files\n)   \n\n### |- figure size ---- \ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n````\n:::\n\n\n#### 2. Read in the Data \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: read\n\ntt <-tidytuesdayR::tt_load(2024, week = 41) \n\nspecies_data <- tt$most_visited_nps_species_data |> clean_names() |> glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n````\n:::\n\n\n#### 3. Examing the Data \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: examine\n\nglimpse(species_data)\nskim(species_data)\n```\n````\n:::\n\n\n#### 4. Tidy Data \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: tidy\n\n# Prepare data for radar plots\nradar_data <- species_data |>\n  count(park_name, category_name) |>\n  pivot_wider(\n    names_from = category_name,\n    values_from = n,\n    values_fill = 0\n  )\n```\n````\n:::\n\n\n\n#### 5. Visualization Parameters \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      <- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"    \ncol_palette  <- paletteer::paletteer_d(\"ButterflyColors::fountainea_ryphea\")[c(1)] \n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 41 } &bull; Source: NPSpecies - The National Park Service biodiversity database<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nmn <- str_glue(\"<span style='font-family:fa6-brands'>&#xf4f6;</span>\")\n\n# text\ntitle_text    <- str_glue(\"Radar Charts of Species Categories by National Park\")\nsubtitle_text <- str_glue(\"Comparison of species distributions across U.S. national parks\")\ncaption_text  <- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    \n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_blank(),  \n    axis.text.y           = element_blank(),\n    axis.text.x           = element_text(color = text_col, family = \"text\", size = rel(0.9)),\n    axis.ticks.x          = element_line(color = text_col),  \n)\n\n### |- plot function ----\n\n# Function to create radar chart and save as PNG\ncreate_and_save_radar_plot <- function(data, park_name) {\n    \n    # Define maximum and minimum values for the radar chart\n    max_values <- rep(max(data), ncol(data))\n    min_values <- rep(0, ncol(data))\n    \n    # Combine the max, min, and park data to create the radar chart data frame\n    plot_data <- as.data.frame(rbind(max_values, min_values, data))\n    colnames(plot_data) <- names(data)\n    rownames(plot_data) <- c(\"Max\", \"Min\", park_name)\n    \n     # Define the file path to save the radar chart\n    temp_path <- here(\"2024/Week_41/\")\n    if (!dir.exists(temp_path)) {\n      dir.create(temp_path, recursive = TRUE)\n    }\n    file_path <- file.path(temp_path, paste0(\"radar_plot_\", gsub(\" \", \"_\", park_name), \".png\"))\n    \n    # Close any open devices\n    while (!is.null(dev.list())) dev.off()\n    \n    # Create and save the radar chart as a PNG\n    png(filename = file_path, width = 400, height = 400)\n    fmsb::radarchart(plot_data,\n                     axistype = 1,                             # Axis type configuration\n                     title = park_name,                        # Title for the radar chart\n                     pcol = col_palette,                       # Line color for the polygon\n                     pfcol = scales::alpha(col_palette, 0.25), # Fill color for the polygon with transparency\n                     plty = 1,                                 # Line type for the polygon\n                     cglcol = bkg_col,                         # Color of the grid lines\n                     cglty = 1,                                # Type of the grid lines\n                     cglwd = 0.8,                              # Width of the grid lines\n                     axislabcol = bkg_col,                     # Color of the axis labels\n                     cex.axis = 1.2,                           # Increase axis text size\n                     cex.main = 1.5                            # Increase title text size\n    )\n    dev.off()\n    \n    return(file_path)\n}\n```\n````\n:::\n\n\n\n#### 6. Plot\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: plot\n\n### |-  individual plots ----\n# Generate and save radar plots for each park\nshowtext_auto(enable = FALSE)\nradar_plot_files <- radar_data |>\n    split(radar_data$park_name) |>\n    map_chr(~ {\n        park_name <- .x$park_name[1]                      # Extract park name\n        park_data <- .x |> select(-park_name)             # Remove park name column from data\n        create_and_save_radar_plot(park_data, park_name)  # Create and save radar plot\n    })\n\n\n# Load each saved radar plot as a raster image and convert to ggplot\nradar_plots <- map(radar_plot_files, ~ {\n    img <- readPNG(.x)                                    # Read the saved PNG file\n    ggdraw() + \n        draw_image(img)                                   # Convert the image to a ggplot object\n    })\n\n\n### |-  combined plots ----\nshowtext_auto(enable = TRUE)\n\ncombined_plot <- wrap_plots(radar_plots, ncol = 4) +\n    plot_annotation(\n        \n        # Labs\n        title = title_text,\n        subtitle = title_text,\n        caption = caption_text,\n        \n        # Theme\n        theme = theme(\n            plot.title = element_text(\n                size = rel(1.7),\n                family = \"title\",\n                face = \"bold\",\n                color = title_col,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size = rel(1),\n                family = \"subtitle\",\n                color = subtitle_col,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.caption = element_markdown(\n                size = rel(0.65),\n                family = \"caption\",\n                color = caption_col,\n                lineheight = 1.1,\n                hjust = 0.5,\n                halign = 1,\n                margin = margin(t = 5, b = 5)\n            )\n        )\n    )\n\ncombined_plot \n```\n````\n:::\n\n\n#### 7. Save\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: save\n\n### |-  plot image ----  \n\nlibrary(ggplotify)\n# Convert patchwork plot to grob \n# There was some issues between cowplot and ggsave\nplot_grob <- as.grob(combined_plot)\n\n# Save the plot again\n# Activate showtext manually\nshowtext_begin()\n\n# Save the plot as PNG\npng(filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_41.png\"),\n    width = 10, height = 10, units = \"in\", res = 320)\ngrid.draw(plot_grob)\ndev.off()\n\n# Deactivate showtext\nshowtext_end()\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_41.png\")) |> \n  magick::image_resize(geometry = \"400\") |> \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_41.png\"))\n```\n````\n:::\n\n\n\n#### 8. Session Info\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r, eval=TRUE}}\ninfo <- capture.output(sessioninfo::session_info())\n# Remove lines that contain \"[1]\" and \"[2]\" (the file paths)\nfiltered_info <- grep(\"\\\\[1\\\\]|\\\\[2\\\\]\", info, value = TRUE, invert = TRUE)\ncat(filtered_info, sep = \"\\n\")\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 11 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/New_York\n date     2025-05-22\n pandoc   3.4 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      1.0.1   2024-10-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P htmlwidgets   1.6.4   2023-12-06 [?] CRAN (R 4.4.0)\n P jsonlite      1.8.9   2024-09-20 [?] RSPM (R 4.4.0)\n P knitr         1.49    2024-11-08 [?] RSPM (R 4.4.0)\n P rmarkdown     2.29    2024-11-04 [?] RSPM (R 4.4.0)\n P rstudioapi    0.17.1  2024-10-22 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P xfun          0.49    2024-10-31 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}