{
  "hash": "d27ecafeaf76599e64a538c5b7b5edf5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Architecture of Global Country Codes\"\nsubtitle: \"Analysis of ISO country codes reveals geographic and alphabetic patterns\n      in international standardization. Most nations maintain three distinct identifiers.\"\nauthor: \"Steven Ponce\"\ndate: \"2024-11-09\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2024\"]\nimage: \"thumbnails/tt_2024_46.png\"\n\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n\neditor_options: \n  chunk_output_type: inline\n  \nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: true\n  \nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations.png\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n![A visualization titled 'The Architecture of Global Country Codes' showing an analysis of 249 ISO country codes by first letter and numeric value. Ridge plots in purple to orange show the distribution of country codes, with early alphabet countries having lower numeric codes and later alphabet countries having higher codes. A waffle chart in the top right indicates which countries maintain complete sets of Alpha-2, Alpha-3, and Numeric codes.](tt_2024_46.png){#fig-1}\n\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse, # Easily Install and Load the 'Tidyverse'\n  ggtext, # Improved Text Rendering Support for 'ggplot2'\n  showtext, # Using Fonts More Easily in R Graphs\n  janitor, # Simple Tools for Examining and Cleaning Dirty Data\n  scales, # Scale Functions for Visualization\n  glue, # Interpreted String Literals\n  here, # A Simpler Way to Find Your Files\n  ggridges, # Ridgeline Plots in 'ggplot2'\n  waffle, # Create Waffle Chart Visualizations\n  patchwork # The Composer of Plots\n)\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  12,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- tidytuesdayR::tt_load(2024, week = 46)\n\ncountries            <- tt$countries |> clean_names()\ncountry_subdivisions <- tt$country_subdivisions |> clean_names()\nformer_countries     <- tt$former_countries |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(countries)\nglimpse(country_subdivisions)\nglimpse(former_countries)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- tidy data ----\n\n### |- ridge data ----\nridge_data <- countries |>\n  mutate(\n    first_letter = substr(alpha_2, 1, 1),\n    first_letter = factor(first_letter, levels = rev(sort(unique(first_letter))))\n  )\n\n### |- waffle data ----\nwaffle_data <- countries |>\n  summarise(\n    `Complete System` = sum(!is.na(alpha_2) & !is.na(alpha_3) & !is.na(numeric)),\n    `Partial System` = n() - sum(!is.na(alpha_2) & !is.na(alpha_3) & !is.na(numeric))\n  ) |>\n  pivot_longer(\n    cols = everything(),\n    names_to = \"key\",\n    values_to = \"value\"\n  ) |>\n  mutate(\n    value = value / 10,\n    key = factor(key, levels = c(\"Complete System\", \"Partial System\"))\n  )\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- plot aesthetics ----\nbkg_col      <- \"#f5f5f2\"\ntitle_col    <- \"gray20\"\nsubtitle_col <- \"gray20\"\ncaption_col  <- \"gray30\"\ntext_col     <- \"gray30\"\ncol_palette  <- viridis::rocket(5)\n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 46 } &bull; Source: ISOcodes R Package<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nbs <- str_glue(\"<span style='font-family:fa6-brands'>&#xe671; </span>\")\n\n# text\ncaption_text <- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Source Sans Pro\", family = \"text\")\nfont_add_google(\"Roboto Mono\", family = \"numbers\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"plot\",\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 5, r = 15, b = 5, l = 15),\n    panel.spacing         = unit(1, \"lines\"),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), \n                                         size = rel(1),\n                                         color = text_col,\n                                         family = \"text\",\n                                         face = \"bold\"),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0),\n                                         size = rel(1),\n                                         color = text_col,\n                                         family = \"text\",\n                                         face = \"bold\"),\n    axis.text             = element_text(size = rel(0.8),\n                                         color = text_col,\n                                         family = \"text\"),\n    panel.grid.minor      = element_blank(),\n    panel.grid.major      = element_line(color = \"gray95\", linewidth = 0.2),\n    panel.grid.major.y    = element_blank()\n)\n```\n:::\n\n\n\n\n#### 6. Plot \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- ridge plot ----\nridge_plot <- ridge_data |>\n  ggplot(aes(x = numeric, y = first_letter, fill = after_stat(x))) +\n\n  # Geoms\n  # add reference lines\n  geom_vline(\n    xintercept = seq(0, 1000, 200),\n    color = \"gray90\",\n    linetype = \"dashed\"\n  ) +\n  # ridges\n  geom_density_ridges_gradient(\n    alpha = 0.8,\n    scale = 0.95,\n    rel_min_height = 0.005,\n    bandwidth = 25,\n    color = text_col,\n    show.legend = TRUE\n  ) +\n  # country positions\n  geom_point(\n    data = ridge_data,\n    aes(x = numeric, y = first_letter),\n    size = 0.8,\n    alpha = 0.3,\n    color = text_col\n  ) +\n  # annotations\n  annotate(\n    \"text\",\n    x = 10,\n    y = \"E\",\n    label = \"Early alphabet countries\\noften have lower codes\",\n    size = 3.0,\n    family = \"text\",\n    color = \"gray25\",\n    lineheight = 0.9,\n    hjust = 0.4\n  ) +\n  annotate(\n    \"text\",\n    x = 850,\n    y = \"W\",\n    label = \"Higher codes cluster in\\nlater alphabet regions\",\n    size = 3.0,\n    family = \"text\",\n    color = \"gray25\",\n    lineheight = 0.9,\n    vjust = 0.5\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    breaks = seq(0, 1000, 200),\n    expand = c(0.02, 0)\n  ) +\n  scale_y_discrete() +\n  scale_fill_gradientn(\n    colors = col_palette,\n    name = \"Numeric Code Range\",\n    guide = guide_colorbar(\n      title.position = \"top\",\n      barwidth = unit(15, \"lines\"),\n      barheight = unit(0.5, \"lines\")\n    )\n  ) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Numeric Country Code (0-999)\",\n    y = \"First Letter of Alpha-2 Code\"\n  ) +\n\n  # Theme\n  theme(\n    legend.position = \"top\",\n    legend.justification = \"right\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(size = rel(0.8)),\n    legend.text = element_text(size = rel(0.7)),\n    legend.key.width = unit(2.2, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    legend.spacing.x = unit(0.2, \"cm\"),\n    plot.margin = margin(-5, 30, 5, 30),\n    panel.spacing = unit(2, \"lines\")\n  )\n\n### |- waffle plot ----\nwaffle_plot <- waffle_data |>\n  ggplot(aes(fill = key, values = value)) +\n\n  # Geom\n  geom_waffle(\n    n_rows = 5,\n    size = 0.5,\n    colour = \"white\",\n    flip = TRUE,\n    radius = unit(2, \"pt\")\n  ) +\n  # Scales\n  scale_fill_manual(values = col_palette[c(1, 5)]) +\n  coord_equal(ratio = 1) +\n\n  # Theme\n  theme_void() +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    legend.text = element_text(size = rel(1)),\n    plot.margin = margin(10, 5, 0, 5),\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n  )\n\n### |- title plot ----\n\n# Add total count annotation\nn_countries <- nrow(countries)\n\ntitle_plot <- ggplot() +\n  # Geoms\n  annotate(\n    \"text\",\n    x = 0, y = 0.85,\n    label = \"The Architecture of\\nGlobal Country Codes\",\n    hjust = 0,\n    size = 10,\n    lineheight = 1,\n    fontface = \"bold\",\n    family = \"title\",\n    color = title_col\n  ) +\n  annotate(\n    \"text\",\n    x = 0, y = 0.5,\n    label = str_wrap(\n      \"Analysis of ISO country codes reveals geographic and alphabetic patterns\n      in international standardization. Most nations maintain three distinct identifiers.\",\n      width = 65\n    ),\n    hjust = 0,\n    size = 3.5,\n    color = title_col,\n    family = \"text\"\n  ) +\n  annotate(\n    \"text\",\n    x = 0, y = 0.3,\n    label = glue(\"Analysis of {n_countries} country codes\"),\n    hjust = 0,\n    size = 3.5,\n    family = \"text\",\n    color = title_col\n  ) +\n  annotate(\"text\",\n    x = 0, y = 0.1,\n    label = \"Example:\\nUS (Alpha-2)\\nUSA (Alpha-3)\\n840 (Numeric)\",\n    hjust = 0,\n    size = 2.8,\n    color = title_col,\n    family = \"text\",\n    lineheight = 1.2\n  ) +\n\n  # Scales\n  scale_x_continuous(limits = c(0, 1)) +\n  scale_y_continuous(limits = c(0, 1)) +\n\n  # Them\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin = margin(5, 10, 0, 10)\n  )\n\n### |- explanatory text plot for the waffle chart ----\nwaffle_explanation <- ggplot() +\n\n  # Geoms\n  annotate(\"text\",\n    x = 0, y = 0.85,\n    label = \"Country Code Systems\\n\",\n    hjust = 0, size = 3.5, fontface = \"bold\", family = \"text\"\n  ) +\n  annotate(\"text\",\n    x = 0, y = 0.55,\n    label = str_wrap(\"Each square represents 10 countries. A complete system means a country has\n                     all three standardized codes shown in the ridge plot below: Alpha-2 (e.g., US),\n                     Alpha-3 (USA), and Numeric (840).\", 55),\n    hjust = 0, size = 2.8, color = title_col, family = \"text\"\n  ) +\n\n  # Scales\n  scale_x_continuous(limits = c(0, 1)) +\n  scale_y_continuous(limits = c(0, 1)) +\n\n  # Theme\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin = margin(5, 10, 0, 10)\n  )\n\n### |- combined plot ----\n\n# define layout design\ndesign <- c(\n  area(1, 1, 2, 4), # title_plot\n  area(1, 5, 1, 6), # waffle_plot\n  area(2, 5, 2, 6), # waffle_explanation\n  area(3, 1, 5, 6) # ridge_plot\n)\n\ncombined_plot <- title_plot + waffle_plot + waffle_explanation + ridge_plot +\n  plot_layout(\n    design = design,\n    heights = c(1.2, 1, 2, 1, 1), # Simplified heights\n    widths = c(1, 1, -0.4, 1, 0.9, 0.9) # Slightly wider right side\n  ) +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n      plot.background  = element_rect(fill = bkg_col, color = bkg_col),\n      panel.background = element_rect(fill = bkg_col, color = bkg_col),\n      plot.margin  = margin(10, 10, 10, 10),\n      plot.caption = element_markdown(\n        size       = rel(0.60),\n        family     = \"caption\",\n        color      = alpha(caption_col, 0.9),\n        lineheight = 0.65,\n        hjust      = 0.5,\n        margin     = margin(t = 10, b = 5)\n      )\n    )\n  )\n```\n:::\n\n\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----\n\nlibrary(ggplotify)\nlibrary(grid)\n\n# Convert patchwork plot to grob\n# There was some issues between patchwork and ggsave\nplot_grob <- as.grob(combined_plot)\n\n# Activate showtext manually\nshowtext_begin()\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n# Save the plot as PNG\ninvisible({\n  png(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_46.png\"),\n    width = 10, height = 12, units = \"in\", res = 320\n  )\n  grid.draw(plot_grob)\n  dev.off()\n})\n\n# Deactivate showtext\nshowtext_end()\n\n### |-  plot thumbnail----\nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_46.png\")) |>\n  magick::image_resize(geometry = \"400\") |>\n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_46.png\"))\n```\n:::\n\n\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggplotify_0.1.2 patchwork_1.3.0 waffle_1.0.2    ggridges_0.5.6 \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       viridis_0.6.5     \n [5] fastmap_1.2.0      gh_1.4.1           digest_0.6.37      timechange_0.3.0  \n [9] lifecycle_1.0.4    rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.4        tools_4.4.0        utf8_1.2.4         yaml_2.3.10       \n[17] knitr_1.49         labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0         \n[21] curl_6.0.0         plyr_1.8.9         xml2_1.3.6         camcorder_0.1.0   \n[25] RColorBrewer_1.1-3 tidytuesdayR_1.1.2 withr_3.0.2        fansi_1.0.6       \n[29] colorspace_2.1-1   extrafontdb_1.0    gitcreds_0.1.2     cli_3.6.3         \n[33] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[37] tzdb_0.4.0         commonmark_1.9.2   parallel_4.4.0     yulab.utils_0.1.8 \n[41] vctrs_0.6.5        jsonlite_1.8.9     gridGraphics_0.5-1 hms_1.1.3         \n[45] bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[49] DT_0.33            stringi_1.8.4      gtable_0.3.6       extrafont_0.19    \n[53] munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1 \n[57] R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4    vroom_1.6.5       \n[61] evaluate_1.0.1     markdown_1.13      gridtext_0.1.5     snakecase_0.11.1  \n[65] renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3      gridExtra_2.3     \n[69] Rttf2pt1_1.3.12    xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n\n##### Expand for GitHub Repo\n \n[Access the GitHub repository here](https://github.com/poncest/personal-website/)\n:::",
    "supporting": [
      "tt_2024_46_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}