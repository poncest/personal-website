{
  "hash": "4cfc6974b948387b9098b08b864f294b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sydney Beaches: Water Quality Reliability\"\nsubtitle: \"Reliability Index: % of samples meeting 'good' standards (≤ 40 CFU/100ml). 80% reliability is the recommended threshold for safe swimming. Showing top and bottom 5 beaches by type\"\ndescription: \"An analysis of water quality reliability across Sydney's beaches, based on data from the NSW State Government Beachwatch program. This visualization highlights which beaches consistently meet safety standards for swimming and which ones struggle with water quality issues. The stark contrast between ocean beaches (mostly meeting standards) and harbor/river locations (frequently below threshold) reveals important patterns in Sydney's water quality management.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-05-18\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n\"water quality\", \"Sydney\", \"beaches\", \"environmental data\", \"public health\", \"swimming safety\", \"enterococci\", \"bacteria levels\", \"environmental monitoring\", \"coastal management\", \"water pollution\", \"recreation safety\", \"harbor pollution\", \"ocean beaches\", \"urban waterways\"\n]\nimage: \"thumbnails/tt_2025_20.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/TidyTuesday/2025/tt_2025_20.html\"\n  description: \"#TidyTuesday week 20: Exploring Sydney beaches water quality reliability - see which beaches are consistently safe for swimming and which fall below standards\"\n\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n![Sydney Beaches: Water Quality Reliability chart showing the percentage of water samples meeting good standards (≤40 CFU/100ml) across different beach types. The chart is divided into three sections: Harbor/Bay/River Locations, Ocean Beaches, and Other Swimming Locations. Most ocean beaches exceed the 80% reliability threshold (shown by a dashed line), with Avalon reaching 97%. Harbor locations show mixed results, with many falling below the safe swimming threshold. The visualization highlights the contrast between consistently clean beaches and those that struggle to meet water quality standards.](tt_2025_20.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  scales,        # Scale Functions for Visualization\n  glue           # Interpreted String Literals\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n````\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt <- tidytuesdayR::tt_load(2025, week = 20)\n\nwater_quality_raw <- tt$water_quality |> clean_names()\nweather_raw <- tt$weather |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n````\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(water_quality_raw)\nglimpse(weather_raw)\nskimr::skim(water_quality_raw)\nskimr::skim(weather_raw)\n```\n````\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\n# Process and categorize raw water quality data\nwater_quality_processed <- water_quality_raw |>\n    mutate(\n        bacteria_category = case_when(\n            enterococci_cfu_100ml <= 40 ~ \"Good (<= 40 CFU)\",\n            enterococci_cfu_100ml > 40 & enterococci_cfu_100ml <= 200 ~ \"Moderate (41-200 CFU)\",\n            enterococci_cfu_100ml > 200 ~ \"Poor (> 200 CFU)\",\n            TRUE ~ \"Unknown\"\n        ),\n        bacteria_category = factor(\n            bacteria_category,\n            levels = c(\"Good (<= 40 CFU)\", \"Moderate (41-200 CFU)\", \"Poor (> 200 CFU)\", \"Unknown\")\n        )\n    )\n\n# Summarize water quality at the beach level\nbeach_reliability <- water_quality_processed |>\n    group_by(swim_site, region) |>\n    summarise(\n        total_samples = n(),\n        good_samples = sum(enterococci_cfu_100ml <= 40, na.rm = TRUE),\n        reliability_index = good_samples / total_samples * 100,\n        .groups = \"drop\"\n    ) |>\n    filter(total_samples >= 50) |>\n    mutate(\n        reliability_rating = case_when(\n            is.na(reliability_index) ~ \"Unknown\",\n            reliability_index >= 90 ~ \"Excellent (≥90%)\",\n            reliability_index >= 80 ~ \"Very Good (80-89%)\",\n            reliability_index >= 70 ~ \"Good (70-79%)\",\n            reliability_index >= 60 ~ \"Moderate (60-69%)\",\n            reliability_index < 60 ~ \"Needs Improvement (<60%)\"\n        ),\n        reliability_rating = factor(\n            reliability_rating,\n            levels = c(\n                \"Excellent (≥90%)\", \"Very Good (80-89%)\", \"Good (70-79%)\",\n                \"Moderate (60-69%)\", \"Needs Improvement (<60%)\"\n            )\n        )\n    )\n\n# Classify beaches and select top/bottom per type\nbeach_by_type <- beach_reliability |>\n    mutate(\n        beach_type = case_when(\n            grepl(\"Harbour|Harbor|Bay|River|Cove\", swim_site) ~ \"Harbor/Bay/River\",\n            grepl(\"Beach|Ocean\", swim_site) ~ \"Ocean Beach\",\n            TRUE ~ \"Other\"\n        )\n    ) |>\n    group_by(beach_type) |>\n    mutate(rank_in_type = min_rank(desc(reliability_index))) |>\n    filter(rank_in_type <= 5 | rank_in_type > n() - 5) |>\n    mutate(\n        status = if_else(reliability_index >= 80, \"Meeting Standard\", \"Below Standard\"),\n        short_name = swim_site |>\n            str_replace(\" Beach$\", \"\") |>\n            str_replace(\" Harbour$\", \"\") |>\n            str_replace(\" Bay$\", \"\") |>\n            str_replace(\" Baths$\", \"\") |>\n            str_replace(\" Reserve$\", \"\") |>\n            str_replace(\" Pool$\", \"\"),\n        short_name = reorder(short_name, reliability_index)\n    )\n```\n````\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors <- get_theme_colors(\n    palette = c(\n        \"Meeting Standard\" = \"#1b9e77\", \n        \"Below Standard\" = \"#d95f02\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text <- str_glue(\"Sydney Beaches: Water Quality Reliability\")\n\nsubtitle_text <- str_glue(\n    \"Reliability Index: % of samples meeting 'good' standards (≤ 40 CFU/100ml)\\n\",\n    \"80% reliability is the recommended threshold for safe swimming\\n\",\n    \"Showing top and bottom 5 beaches by type\"\n)\n\n# Create caption\ncaption_text <- create_social_caption(\n  tt_year = 2025,\n  tt_week = 20,\n  source_text =  \"BeachwatchNSW, Open-Meteo\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"red\", linewidth = 0.05),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Style facet labels\n    strip.text = element_text(size = rel(0.75), face = \"bold\",\n                              color = colors$title, margin = margin(b = 5, t = 5)\n    ),\n\n    # Add spacing\n    panel.spacing = unit(1.1, \"lines\"),\n    strip.background = element_rect(fill = \"#e0e0e0\", color = NA),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n````\n:::\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: plot\n#| warning: false\n\n# Final plot -----\np <- ggplot(beach_by_type, aes(x = reliability_index, y = short_name)) +\n  # Geoms\n  geom_col(aes(fill = status), width = 0.7) +\n  geom_text(aes(label = sprintf(\"%d%%\", round(reliability_index))),\n    hjust = -0.2,\n    size = 3.5\n  ) +\n  geom_text(\n      data = tibble(\n          beach_type = \"Harbor/Bay/River\",\n          status = c(\"Meeting Standard\", \"Below Standard\"),\n          x = 95,\n          y = c(7, 4),  \n          label = c(\"Meeting Standard\", \"Below Standard\")\n      ),\n      aes(x = x, y = y, label = label, color = status),\n      hjust = 0,\n      size = 4,\n      fontface = \"bold\",\n      inherit.aes = FALSE\n  ) +\n  geom_vline(xintercept = 80, linetype = \"dashed\", color = \"gray40\", linewidth = 0.3) +\n\n  # Scales\n  scale_fill_manual(values = colors$palette) +\n  scale_color_manual(values = colors$palette) +\n  scale_x_continuous(\n    limits = c(0, 125),\n    breaks = c(0, 20, 40, 60, 80, 100),\n    labels = c(\"0%\", \"20%\", \"40%\", \"60%\", \"80%\", \"100%\")\n  ) +\n  # Facets\n  facet_wrap(~beach_type,\n    scales = \"free_y\", ncol = 1,\n    labeller = labeller(beach_type = c(\n      \"Harbor/Bay/River\" = \"Harbor/Bay/River Locations\",\n      \"Ocean Beach\" = \"Ocean Beaches\",\n      \"Other\" = \"Other Swimming Locations\"\n    ))\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = NULL,\n    fill = \"Status\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    legend.key = element_rect(fill = NA),\n    strip.text = element_markdown(\n      lineheight = 1.2,\n      padding = margin(5, 5, 5, 5)\n    )\n  ) \n```\n````\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 20, \n  width = 8,\n  height = 10\n)\n```\n````\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    skimr_2.1.5        lifecycle_1.0.4   \n[17] farver_2.1.2       compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0   \n[29] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[33] stringi_1.8.4      rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] grid_4.4.0         colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3    \n[41] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3    \n[45] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2\n[49] gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3         hms_1.1.3         \n[53] evaluate_1.0.1     knitr_1.49         markdown_1.13      rlang_1.1.6       \n[57] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[61] vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[65] R6_2.5.1           systemfonts_1.1.0 \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`tt_2025_20.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/tt_2025_20.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n#### 10. References\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1.  Data Sources:\n\n-   TidyTuesday 2025 Week 20: [Water Quality at Sydney Beaches](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-05-20)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}