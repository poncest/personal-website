{
  "hash": "bd074e63053004c760432f6dac5a9f54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Netflix Content Viewing Velocity Analysis (Jul to Dec 2023)\"\nsubtitle: \"Strategic insights into audience capture patterns and performance metrics\"\ndescription: \"An in-depth analysis of Netflix content performance using TidyTuesday data, examining how viewing velocity (views per day) changes over time for movies vs shows. Features data-driven insights into content lifecycle patterns, audience capture rates, and strategic implications for content marketing timing.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-07-28\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n  \"netflix\",\n  \"streaming-analytics\", \n  \"content-performance\",\n  \"velocity-analysis\",\n  \"audience-engagement\",\n  \"media-strategy\",\n  \"content-lifecycle\",\n  \"performance-metrics\",\n  \"business-intelligence\",\n  \"entertainment-data\",\n  \"viewing-patterns\",\n  \"data-storytelling\",\n  \"executive-dashboard\",\n  \"ggplot2\",\n  \"patchwork\"\n]\nimage: \"thumbnails/tt_2025_30.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                    \n  cache: true                                       \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n![Netflix Content Viewing Velocity Analysis showing scatter plots of movies and shows with views per day (y-axis, log scale) versus days since release (x-axis, 0-365 days). Movies show a steeper velocity decline than shows over time. Key performance metrics indicate that movies have a higher mean velocity (154K vs. 86K views/day) but fewer total titles (346 vs. 904). Four velocity categories are color-coded, ranging from low (\\<18K views/day) in dark red to very high (200K+ views/day) in gold, with Netflix trend lines in red indicating overall decay patterns.](tt_2025_30.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,  # Easily Install and Load the 'Tidyverse'\n    ggtext,     # Improved Text Rendering Support for 'ggplot2'\n    showtext,   # Using Fonts More Easily in R Graphs\n    janitor,    # Simple Tools for Examining and Cleaning Dirty Data\n    scales,     # Scale Functions for Visualization\n    glue,       # Interpreted String Literals\n    patchwork   # The Composer of Plots\n  )})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  = 12,\n  height = 10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n````\n:::\n\n\n#### 2. Read in the Data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt <- tidytuesdayR::tt_load(2025, week = 30)\n\nmovies <- tt$movies |> clean_names()\nshows <- tt$shows |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n````\n:::\n\n\n#### 3. Examine the Data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(movies)\nglimpse(shows)\n```\n````\n:::\n\n\n#### 4. Tidy Data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: tidy\n#| warning: false\n\n# Function to parse runtime from \"XH YM ZS\" format to minutes\nparse_runtime <- function(runtime_str) {\n  # Extract hours, minutes, seconds using regex\n  hours <- str_extract(runtime_str, \"\\\\d+(?=H)\") |>\n    as.numeric() |>\n    replace_na(0)\n  minutes <- str_extract(runtime_str, \"\\\\d+(?=M)\") |>\n    as.numeric() |>\n    replace_na(0)\n  seconds <- str_extract(runtime_str, \"\\\\d+(?=S)\") |>\n    as.numeric() |>\n    replace_na(0)\n\n  # Convert to total minutes\n  total_minutes <- hours * 60 + minutes + seconds / 60\n  return(total_minutes)\n}\n\n# Generic function to clean and prepare content data\nclean_content_data <- function(df, content_type_label) {\n  df |>\n    mutate(\n      # Parse runtime to minutes\n      runtime_minutes = parse_runtime(runtime),\n\n      # Create content type\n      content_type = content_type_label,\n\n      # Extract release year and month\n      release_year = year(release_date),\n      release_month = month(release_date, label = TRUE),\n      release_quarter = quarter(release_date),\n\n      # Calculate days since release (using latest report date as reference)\n      # Define reference date once if it's constant\n      report_date = as.Date(\"2025-06-30\"),\n      days_since_release = as.numeric(report_date - release_date),\n\n      # Create age categories\n      age_category = case_when(\n        days_since_release <= 30 ~ \"Very Recent (0-30 days)\",\n        days_since_release <= 90 ~ \"Recent (31-90 days)\",\n        days_since_release <= 365 ~ \"Less than 1 year\",\n        days_since_release <= 730 ~ \"1-2 years\",\n        TRUE ~ \"2+ years\"\n      ),\n\n      # Global availability factor\n      available_globally = factor(available_globally, levels = c(\"Yes\", \"No\")),\n\n      # Views per million hours (efficiency metric)\n      views_per_million_hours = views / (hours_viewed / 1e6),\n\n      # Log transformations for better visualization\n      log_hours_viewed = log10(hours_viewed + 1),\n      log_views = log10(views + 1)\n    ) |>\n    # Remove the temporary 'report_date' column\n    select(-report_date)\n}\n\n# Clean and prepare movies and shows data\nmovies_clean <- clean_content_data(movies, \"Movie\")\nshows_clean <- clean_content_data(shows, \"Show\")\n\n# Combine datasets\ncombined_data <- bind_rows(movies_clean, shows_clean)\n\n# Housekeeping\nrm(movies, movies_clean, shows, shows_clean)\n\n# Calculate viewing velocity (views per day since release)\nvelocity_data <- combined_data |>\n    filter(days_since_release > 0, days_since_release <= 365) |>\n    mutate(\n        views_per_day = views / days_since_release,\n        velocity_category = case_when(\n            views_per_day >= 200000 ~ \"Very High (200K+ views/day)\",\n            views_per_day >= 65000 ~ \"High (65K-200K views/day)\",\n            views_per_day >= 18000 ~ \"Moderate (18K-65K views/day)\",\n            TRUE ~ \"Low (<18K views/day)\"\n        ),\n        velocity_category = factor(velocity_category,\n                                   levels = c(\"Low (<18K views/day)\", \"Moderate (18K-65K views/day)\", \n                                              \"High (65K-200K views/day)\", \"Very High (200K+ views/day)\")\n        )\n    )\n\n# Calculate Netflix-specific benchmarks (from the actual data)\nnetflix_benchmarks <- velocity_data |>\n  group_by(content_type) |>\n  summarise(\n    median_velocity = median(views_per_day, na.rm = TRUE),\n    p75_velocity = quantile(views_per_day, 0.75, na.rm = TRUE),\n    p90_velocity = quantile(views_per_day, 0.9, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Identify top performers for annotation\ntop_performers <- velocity_data |>\n  group_by(content_type) |>\n  slice_max(views_per_day, n = 3) |>\n  ungroup() |>\n  mutate(title_clean = str_trunc(title, 25))\n\n# Calculate key statistics for summary box\nsummary_stats <- velocity_data |>\n  group_by(content_type) |>\n  summarise(\n    total_titles = n(),\n    median_velocity = median(views_per_day, na.rm = TRUE),\n    mean_velocity = mean(views_per_day, na.rm = TRUE),\n    peak_day = days_since_release[which.max(views_per_day)],\n    .groups = \"drop\"\n  ) |>\n  mutate(\n    median_velocity_formatted = case_when(\n      median_velocity >= 1e6 ~ paste0(round(median_velocity / 1e6, 1), \"M\"),\n      median_velocity >= 1e3 ~ paste0(round(median_velocity / 1e3, 0), \"K\"),\n      TRUE ~ as.character(round(median_velocity, 0))\n    ),\n    mean_velocity_formatted = case_when(\n      mean_velocity >= 1e6 ~ paste0(round(mean_velocity / 1e6, 1), \"M\"),\n      mean_velocity >= 1e3 ~ paste0(round(mean_velocity / 1e3, 0), \"K\"),\n      TRUE ~ as.character(round(mean_velocity, 0))\n    )\n  )\n\n# KPI data\nsummary_data <- summary_stats |>\n  mutate(\n    total_titles = as.character(total_titles)\n  ) |>\n  pivot_longer(\n    cols = c(median_velocity_formatted, mean_velocity_formatted, total_titles),\n    names_to = \"metric\", values_to = \"value\"\n  ) |>\n  mutate(\n    metric_clean = case_when(\n      metric == \"median_velocity_formatted\" ~ \"Median Velocity\",\n      metric == \"mean_velocity_formatted\" ~ \"Mean Velocity\",\n      metric == \"total_titles\" ~ \"Total Titles\"\n    )\n  )\n```\n````\n:::\n\n\n#### 5. Visualization Parameters\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors <- get_theme_colors(\n  palette = c(\n      # Scatter\n      \"Low (<18K views/day)\" = \"#8B0000\",           \n      \"Moderate (18K-65K views/day)\" = \"#CD5C5C\",       \n      \"High (65K-200K views/day)\" = \"#696969\",           \n      \"Very High (200K+ views/day)\" = \"#FFD700\", \n      \"Netflix Trend\" = \"#E50914\",   \n      \n      # KPI\n      \"Movie\" = \"#E50914\", \n      \"Show\" = \"#221F1F\"\n  )\n)\n\n### |- titles and caption ----\ntitle_text <- str_glue(\"Netflix Content Viewing Velocity Analysis (Jan to Jun 2025)\")\nsubtitle_text <- str_glue(\"Strategic insights into audience capture patterns and performance metrics\")\n\ncaption_text <- create_social_caption(\n  tt_year = 2025,\n  tt_week = 30,\n  source_text =  \"Netflix Engagement Report (Jan to Jun 2025)\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling\n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), color  = colors$title, margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$subtitle, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.line = element_blank(), \n    axis.ticks = element_blank(), \n    \n    # Grid elements\n    panel.grid.major.y = element_line(color = \"gray90\",linetype = \"solid\", linewidth = 0.3),\n    panel.grid.minor.y = element_blank(), \n    panel.grid.major.x = element_blank(), \n    panel.grid.minor.x = element_blank(), \n  \n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margin\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n````\n:::\n\n\n#### 6. Plot\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: plot\n#| warning: false\n\n# Scatter Plot ----\nscatter_plot <- velocity_data |>\n  ggplot(aes(x = days_since_release, y = views_per_day)) +\n\n  # Geoms\n  geom_hline(\n    data = netflix_benchmarks, aes(yintercept = median_velocity),\n    linetype = \"dashed\", alpha = 0.6, color = \"gray40\", size = 0.8\n  ) +\n  geom_point(aes(color = velocity_category), alpha = 0.7, size = 1.2) +\n  geom_smooth(aes(color = \"Netflix Trend\"),\n    method = \"loess\", se = TRUE,\n    alpha = 0.15, size = 1.8, span = 0.3\n  ) +\n  geom_point(\n    data = top_performers, aes(color = velocity_category),\n    size = 3, shape = 21, stroke = 1.5, fill = \"white\"\n  ) +\n  ggrepel::geom_text_repel(\n    data = top_performers,\n    aes(label = title_clean),\n    size = 3.5,\n    fontface = \"bold\",\n    box.padding = 0.5,\n    point.padding = 0.3,\n    segment.color = \"gray50\",\n    segment.size = 0.5,\n    max.overlaps = 6,\n    force = 2\n  ) +\n  # Scales\n  scale_color_manual(\n    name = \"Viewing Velocity\",\n    values = colors$palette,\n    guide = guide_legend(override.aes = list(size = 3, alpha = 1))\n  ) +\n  scale_y_log10(\n    labels = function(x) {\n      case_when(\n        x >= 1e6 ~ paste0(round(x / 1e6, 1), \"M\"),\n        x >= 1e3 ~ paste0(round(x / 1e3, 0), \"K\"),\n        TRUE ~ as.character(round(x, 0))\n      )\n    },\n    breaks = c(1e3, 1e4, 1e5, 1e6, 1e7),\n    minor_breaks = NULL\n  ) +\n  scale_x_continuous(\n    breaks = seq(0, 365, 60),\n    labels = function(x) paste0(x, \"d\"),\n    minor_breaks = seq(0, 365, 30)\n  ) +\n  # Labs\n  labs(\n    x = \"Days Since Release\",\n    y = \"Views per Day (Log Scale)\",\n    caption = \"Velocity categories based on quartiles of views per day | Dashed lines show Netflix median velocity by content type\"\n  ) +\n  # Facet by content type\n  facet_wrap(~content_type) +\n  # Theme\n  theme(\n    # Facet formatting\n    strip.text = element_text(size = 12, face = \"bold\", color = \"gray20\"),\n    strip.background = element_rect(fill = \"gray95\", color = NA),\n    panel.spacing.x = unit(2, \"lines\"),\n\n    # Legend formatting\n    legend.position = \"bottom\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9),\n    legend.box.margin = margin(t = 15),\n  )\n\n# KPI Plot ----\nkpi_plot <- summary_data |>\n  ggplot(aes(x = metric_clean, y = content_type, fill = content_type)) +\n  # Geoms\n  geom_tile(alpha = 0.8, color = \"white\", size = 1) +\n  geom_text(aes(label = value), size = 4, fontface = \"bold\", color = \"white\") +\n  # Scales\n  scale_x_discrete(position = \"top\") +\n  scale_fill_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = \"Key Performance Metrics\",\n    subtitle = \"Views per day in first year\"\n  ) +\n  # Theme\n  theme_void() +\n  theme(\n    plot.title = element_text(\n      face = \"bold\", family = fonts$title, size = rel(1.14),\n      color = colors$title, margin = margin(b = 10), hjust = 0.5\n    ),\n    plot.subtitle = element_text(\n      family = fonts$subtitle, color = colors$subtitle,\n      size = rel(0.78), margin = margin(b = 20), , hjust = 0.5\n    ),\n    plot.caption = element_markdown(\n        size = rel(0.6),\n        family = fonts$caption,\n        color = colors$caption,\n        hjust = 0.5,\n        margin = margin(t = 10)\n    ),\n    axis.text.y = element_text(size = 9),\n    axis.text.x.top = element_text(size = 9, hjust = 0.5),\n    legend.position = \"none\",\n  )\n\n# Insight Plot ----\ninsights_plot <-\n  tibble(\n    insight = c(\n      \"**VELOCITY PATTERNS:** Movies show steeper initial decline than shows in first year after release\",\n      \"**EARLY CONCENTRATION:** Highest velocity content clusters in first 60 days across both content types\",\n      \"**PERFORMANCE TIERS:** Four distinct velocity categories emerge, with 'Lightning Fast' content maintaining higher rates\",\n      \"**CONTENT DIFFERENCES:** Shows demonstrate more sustained velocity compared to movies over time\"\n    ),\n    x = c(1, 1, 1, 1),\n    y = c(4, 3, 2, 1)\n  ) |>\n  ggplot(aes(x = x, y = y)) +\n  geom_richtext(aes(label = insight),\n    hjust = 0, size = 3.5,\n    color = \"gray20\", lineheight = 1.2, family = fonts$text,\n    fill = NA, label.color = NA\n  ) + \n  xlim(0.5, 12) +\n  ylim(0.5, 4.5) +\n  labs(title = \"Key Data-Driven Observations\") +\n  theme_void() +\n  theme(\n    plot.title = element_text(size = rel(1), face = \"bold\", hjust = 0.5, margin = margin(b = 10)),\n    plot.margin = margin(15, 20, 15, 20),\n    # plot.background = element_rect(fill = \"gray97\", color = \"gray90\", linewidth = 0.5)\n  )\n\n# Combined Plot ----\ntop_panel <- (kpi_plot | insights_plot) +\n    plot_layout(widths = c(1, 2))\n\ncombined_plots <- top_panel / scatter_plot +\n    plot_layout(heights = c(1, 4))\n\ncombined_plots <- combined_plots +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size = rel(1.8),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        hjust = 0.5,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(1),\n        family = fonts$subtitle,\n        color = alpha(colors$subtitle, 0.9),\n        lineheight = 1.2,\n        hjust = 0.5,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size = rel(0.6),\n        family = fonts$caption,\n        color = colors$caption,\n        hjust = 0.5,\n        margin = margin(t = 10)\n      )\n    )\n  )\n```\n````\n:::\n\n\n#### 7. Save\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plots, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 30, \n  width  = 12,\n  height = 10\n  )\n```\n````\n:::\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/La_Paz\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      patchwork_1.3.0 glue_1.8.0      scales_1.3.0   \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  ggrepel_0.9.6     \n [5] lattice_0.22-6     tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     yulab.utils_0.1.8  fansi_1.0.6        pkgconfig_2.0.3   \n[13] Matrix_1.7-0       ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      codetools_0.2-20   snakecase_0.11.1  \n[21] htmltools_0.5.8.1  yaml_2.3.10        pillar_1.9.0       magick_2.8.5      \n[25] nlme_3.1-164       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[29] stringi_1.8.4      splines_4.4.0      labeling_0.4.3     rprojroot_2.0.4   \n[33] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.4         \n[37] magrittr_2.0.3     utf8_1.2.4         withr_3.0.2        timechange_0.3.0  \n[41] rmarkdown_2.29     hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[45] markdown_1.13      mgcv_1.9-1         gridGraphics_0.5-1 rlang_1.1.6       \n[49] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[53] rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1           fs_1.6.5          \n```\n\n\n:::\n:::\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`tt_2025_30.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/tt_2025_30.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n#### 10. References\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1.  Data Sources:\n\n-   TidyTuesday 2025 Week 30: \\[What have we been watching on Netflix?\\](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-07-29)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}