{
  "hash": "9760bcf09605e97e7e12f12b2886d0dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A Tale of Pixar's Evolution: Duration and Reception\"\nsubtitle: \"How Pixar films have evolved in length and how audiences vs critics perceive them.\"\ndescription: \"An analysis of Pixar's film evolution examining how movie durations have increased over time and comparing audience and critic reception patterns across their filmography. Visualizations reveal interesting patterns in run times and reception across different eras and franchises.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-03-10\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n \"pixar\",\n\"film analysis\", \n\"data storytelling\",\n\"ggplot2\",\n\"animation\",\n\"movie ratings\",\n\"cinema\",\n\"audience reception\",\n\"film critics\",\n\"time series\",\n\"entertainment data\",\n\"patchwork\"\n]\nimage: \"thumbnails/tt_2025_10.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/TidyTuesday/2025/tt_2025_10.html\"\n  description: \"Exploring 25+ years of Pixar films: See how movie lengths have grown over time and discover which films critics loved but audiences didn't (and vice versa)! #TidyTuesday #DataViz\"\n\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n![A two-panel visualization titled 'A Tale of Pixar's Evolution: Duration and Reception.' The top panel shows 'The Evolution of Pixar Film Durations (1995-2023)' with a scatter plot and trend line demonstrating how Pixar films have increased in length from around 80 minutes to over 150 minutes, with points color-coded by film. The bottom panel displays 'Audience vs. Critic Reception of Pixar Films' comparing Cinema Score (audience ratings) on the y-axis with Rotten Tomatoes (critic consensus) on the x-axis. Films are grouped into four quadrants: Universal Acclaim, Critic Favorite, Audience Favorite, and Mixed Reception, revealing patterns in how different Pixar films are received by audiences versus critics.](tt_2025_10.png){#fig-1}\n\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    patchwork,      # The Composer of Plots # The Composer of Plots # The Composer of Plots\n    ggrepel         # Position Non-Overlapping Text Labels with 'ggplot2'\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- tidytuesdayR::tt_load(2025, week = 10) \n\npixar_films <- tt$pixar_films |> clean_names()\npublic_response <- tt$public_response |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pixar_films)\nskim(pixar_films)\n\nglimpse(public_response)\nskim(public_response)\n```\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  tidy data ----\n# Combine the data for easier analysis\npixar_combined <- pixar_films |>\n    left_join(public_response, by = \"film\")\n\n# P1. Film Duration's ----\n\n# Define eras for P1\np1_data <- pixar_combined |>\n    mutate(\n        era = case_when(\n            release_date < as.Date(\"2001-01-01\") ~ \"Early Years (1995-2000)\",\n            release_date < as.Date(\"2006-01-01\") ~ \"Finding Nemo Era (2001-2005)\",\n            release_date < as.Date(\"2011-01-01\") ~ \"Golden Age (2006-2010)\",\n            release_date < as.Date(\"2016-01-01\") ~ \"Brave New World (2011-2015)\",\n            TRUE ~ \"Modern Era (2016+)\"\n        )\n    ) |> \n    filter(!is.na(film))\n\n# Define era boundary lines\nera_boundaries <- data.frame(\n    x = as.Date(c(\"2001-01-01\", \"2006-01-01\", \"2011-01-01\", \"2016-01-01\")),\n    ymin = 70,\n    ymax = 160\n)\n\n# Era labels coordinates\nera_labels <- data.frame(\n    x = as.Date(c(\"1997-06-01\", \"2003-06-01\", \"2008-06-01\", \"2013-06-01\", \"2020-06-01\")),\n    y = c(rep(160, 5)),\n    label = c(\"Early Years\", \"Finding\\nNemo Era\", \"Golden Age\", \"Brave New\\nWorld\", \"Modern Era\")\n)\n\n# P2. Audience vs. Critic Reception ----\np2_data <- pixar_combined |>  \n    filter(!is.na(rotten_tomatoes) & !is.na(cinema_score)) |>\n    mutate(\n        # Convert Cinema Score to numeric\n        cinema_score_numeric = case_when(\n            cinema_score == \"A+\" ~ 10,\n            cinema_score == \"A\" ~ 9,\n            cinema_score == \"A-\" ~ 8.5,\n            cinema_score == \"B+\" ~ 8,\n            cinema_score == \"B\" ~ 7,\n            cinema_score == \"B-\" ~ 6.5,\n            TRUE ~ 5\n        ),\n        # Create release year groups\n        release_decade = case_when(\n            release_date < as.Date(\"2000-01-01\") ~ \"1995-1999\",\n            release_date < as.Date(\"2010-01-01\") ~ \"2000-2009\",\n            release_date < as.Date(\"2020-01-01\") ~ \"2010-2019\",\n            TRUE ~ \"2020+\"\n        ),\n        # Create selective labeling flag\n        label_film = case_when(\n            cinema_score_numeric >= 9 & rotten_tomatoes < 90 ~ TRUE,\n            cinema_score_numeric < 10 & rotten_tomatoes >= 99 ~ TRUE,\n            rotten_tomatoes < 50 ~ TRUE,\n            film %in% c(\"Toy Story\", \"Inside Out\", \"Coco\", \"Soul\") ~ TRUE,\n            TRUE ~ FALSE\n        )\n    )\n\n# Create a filtered dataframe for labels\np2_labels <- p2_data |> filter(label_film == TRUE)\n\n# Define reception area dividing lines\nreception_lines <- data.frame(\n    type = c(\"vertical_1\",  \"horizontal\"),\n    x1 = c(90, 40),\n    y1 = c(5, 9),\n    x2 = c(90, 105),\n    y2 = c(10.5, 9)\n)\n```\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Color for P1\ncolors <- get_theme_colors(palette = c(\n    \"gray40\", \"gray60\", \"gray70\", \"gray80\", \"#87BBA2\")\n    )\n\n### |-  titles and caption ----\ntitle_text <- str_glue(\"A Tale of Pixar's Evolution: Duration and Reception\")\n\nsubtitle_text <- str_glue(\"How Pixar films have evolved in length and how audiences vs critics perceive them.\")\n\n# Create caption\ncaption_text <- create_social_caption(\n    tt_year = 2025,\n    tt_week = 10,\n    source_text =  \"pixarfilms R package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray80\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8)),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  Plot  ----\n# P1. Film Duration's ----\np1 <- ggplot(p1_data, aes(x = release_date, y = run_time)) +\n  # Geoms\n  geom_vline(\n    data = era_boundaries,\n    aes(xintercept = x),\n    linetype = \"dotted\",\n    color = colors$palette[2],\n    alpha = 0.4\n  ) +\n  geom_smooth(\n    method = \"loess\", se = FALSE, color = colors$palette[1],\n    linewidth = 0.5, alpha = 0.6, linetype = \"dashed\", na.rm = TRUE\n  ) +\n  geom_text_repel(\n    aes(label = film),\n    size = 3,\n    max.overlaps = 10,\n    box.padding = 0.5,\n    colour = colors$palette[1],\n    segment.color = colors$palette[3],\n    min.segment.length = 0.2,\n    seed = 123\n  ) +\n  geom_point(size = 3, color = colors$palette[5], alpha = 0.9, na.rm = TRUE) +\n  # Annotate\n  annotate(\n    \"text\",\n    x = era_labels$x,\n    y = era_labels$y,\n    label = era_labels$label,\n    alpha = 0.8,\n    fontface = \"bold\",\n    size = 3\n  ) +\n  # Scales\n  scale_x_date(\n    date_breaks = \"5 years\",\n    date_labels = \"%Y\",\n    limits = c(as.Date(\"1994-01-01\"), NA)\n  ) +\n  scale_y_continuous(\n    breaks = seq(80, 180, by = 10),\n  ) +\n  coord_cartesian(clip = \"off\") +\n  # Labs\n  labs(\n    title = \"The Evolution of Pixar Film Durations (1995-2023)\",\n    subtitle = \"From 80-minute early films to 100+ minute modern features\",\n    x = \"Release Date\",\n    y = \"Run Time (minutes)\"\n  )\n\n# P2. Audience vs. Critic Reception ----\np2 <- ggplot(p2_data, aes(x = rotten_tomatoes, y = cinema_score_numeric)) +\n  # Geoms\n  geom_segment(\n    data = reception_lines,\n    aes(x = x1, y = y1, xend = x2, yend = y2),\n    linetype = \"dotted\", color = colors$palette[1], alpha = 0.8\n  ) +\n  geom_text_repel(\n    data = p2_labels,\n    aes(label = film),\n    size = 3,\n    box.padding = 0.8,\n    point.padding = 0.5,\n    colour = colors$palette[1],\n    segment.color = colors$palette[3],\n    min.segment.length = 0.2,\n    max.overlaps = 30,\n    force = 3,\n    seed = 145\n  ) +\n  geom_point(\n    aes(size = 3),\n    color = colors$palette[5], alpha = 0.8\n  ) +\n  # Annotate\n  annotate(\n    \"text\",\n    x = 105, y = 10.8,\n    label = \"Universal Acclaim\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 105, y = 7,\n    label = \"Critic Favorite\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 75, y = 10.8,\n    label = \"Audience Favorite\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 0.5\n  ) +\n  annotate(\n    \"text\",\n    x = 75, y = 7,\n    label = \"Mixed Reception\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 0.5\n  ) +\n  # Scales\n  scale_color_brewer(\n    palette = \"Set1\",\n    name = \"Film Era\"\n  ) +\n  scale_size_continuous(\n    range = c(2, 5),\n    name = \"Runtime (min)\"\n  ) +\n  scale_y_continuous(\n    breaks = c(10, 9, 8.5, 8, 7, 6.5),\n    labels = c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\"),\n    limits = c(6, 10.8),\n    minor_breaks = NULL,\n    expand = expansion(mult = c(0.02, 0.02))\n  ) +\n  scale_x_continuous(\n    breaks = seq(40, 100, by = 10),\n    limits = c(40, 105),\n    minor_breaks = NULL,\n    expand = expansion(mult = c(0.02, 0.02))\n  ) +\n  coord_cartesian(clip = \"off\") +\n  # Labs\n  labs(\n    title = \"Audience vs. Critic Reception of Pixar Films\",\n    subtitle = \"Comparing Cinema Score (audience ratings) with Rotten Tomatoes (critic consensus)\",\n    y = \"Cinema Score (audience rating)\",\n    x = \"Rotten Tomatoes Score (critic rating)\"\n  ) \n\n# Combined Plot -----\ncombined_plot <- (p1 / plot_spacer() / p2) +\n  plot_layout(\n    height = c(1, 0.005, 1),\n    ncol = 1\n  )\n\ncombined_plot <- combined_plot +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size = rel(1.8),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(0.85),\n        family = fonts$subtitle,\n        color = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.65),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 10, \n  width = 8,\n  height = 10\n)\n```\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggrepel_0.9.6   patchwork_1.3.0 camcorder_0.1.0 here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         htmlwidgets_1.6.4 \n[17] bit_4.5.0          curl_6.0.0         xml2_1.3.6         repr_1.1.7        \n[21] tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0         fansi_1.0.6       \n[25] colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   splines_4.4.0      parallel_4.4.0     ggplotify_0.1.2   \n[37] base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0      \n[41] jsonlite_1.8.9     gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2       \n[45] systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20  \n[49] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[53] rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6       \n[57] rprojroot_2.0.4    lattice_0.22-6     vroom_1.6.5        evaluate_1.0.1    \n[61] markdown_1.13      gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3        \n[65] Rcpp_1.0.13-1      nlme_3.1-164       svglite_2.1.3      mgcv_1.9-1        \n[69] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`tt_2025_10.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/tt_2025_10.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1. Data Sources:\n\n   - TidyTuesday 2025 Week 10: [Pixar Films](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-03-11)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}