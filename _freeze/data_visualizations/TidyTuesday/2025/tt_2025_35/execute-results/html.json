{
  "hash": "7efc78be98b2ba2ccfd0491e612ee4cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Australian Frogs Show Distinct Seasonal Calling Patterns\"\nsubtitle: \"Species within families vary widely in calling seasons, revealing ecological niche partitioning.\"\ndescription: \"Analyzing FrogID citizen science data to reveal seasonal calling patterns across Australian frog species. Using ggbeeswarm plots to visualize how 135,154 recordings from 2023 show distinct seasonal preferences within taxonomic families, with Spring emerging as peak activity season.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-08-31\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n  \"ggbeeswarm\",\n  \"citizen science\", \n  \"ecology\",\n  \"biodiversity\",\n  \"Australia\",\n  \"seasonal patterns\",\n  \"FrogID\",\n  \"beeswarm plots\",\n  \"data exploration\",\n  \"conservation biology\"\n]\nimage: \"thumbnails/tt_2025_35.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                    \n  cache: true                                       \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n![Beeswarm plot showing seasonal patterns of frog calling in Australia. Each colored dot represents the recording frequency of one species, grouped by season (Summer to Spring) on the y-axis and log-scale recordings on the x-axis. White circles mark seasonal medians. Spring shows the highest activity with 81 species and 60,405 recordings, while Winter shows the lowest with 78 species and 32,002 recordings. Colors distinguish five major frog subfamilies (Hylid, Microhylidae, Myobatrachid, Toad, and Unknown), revealing diverse seasonal preferences within these taxonomic groups.](tt_2025_35.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,   # Easily Install and Load the 'Tidyverse'\n    ggtext,      # Improved Text Rendering Support for 'ggplot2'\n    showtext,    # Using Fonts More Easily in R Graphs\n    janitor,     # Simple Tools for Examining and Cleaning Dirty Data\n    scales,      # Scale Functions for Visualization\n    glue,        # Interpreted String Literals,\n    ggbeeswarm,  # Categorical Scatter (Violin Point) Plots\n    viridis,     # Colorblind-Friendly Color Maps for R\n    lubridate    # Make Dealing with Dates a Little Easier\n  )})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  = 8,\n  height = 8,\n  units  = \"in\",\n  dpi    = 300\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n````\n:::\n\n\n#### 2. Read in the Data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt <- tidytuesdayR::tt_load(2025, week = 35)\n\nfrogID_data <- tt$frogID_data |> clean_names()\nfrog_names <- tt$frog_names |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n````\n:::\n\n\n#### 3. Examine the Data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(frogID_data)\nglimpse(frog_names)\n```\n````\n:::\n\n\n#### 4. Tidy Data\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: tidy\n#| warning: false\n\nfrog_data_clean <- frogID_data |>\n  rename_all(~ str_replace_all(., \"([A-Z])\", \"_\\\\1\") |> str_to_lower()) |>\n  rename_all(~ str_remove(., \"^_\")) |>\n  mutate(\n    month = month(event_date, label = TRUE),\n    # Define seasons for Southern Hemisphere (Australia)\n    season = case_when(\n      month %in% c(\"Dec\", \"Jan\", \"Feb\") ~ \"Summer\",\n      month %in% c(\"Mar\", \"Apr\", \"May\") ~ \"Autumn\",\n      month %in% c(\"Jun\", \"Jul\", \"Aug\") ~ \"Winter\",\n      month %in% c(\"Sep\", \"Oct\", \"Nov\") ~ \"Spring\"\n    ),\n    hour = hour(event_time)\n  ) |>\n  left_join(frog_names, by = \"scientific_name\") |>\n  mutate(\n    common_name = if_else(is.na(common_name) | common_name == \"â€”\",\n      scientific_name, common_name\n    ),\n    state_province = str_trim(state_province),\n    subfamily_clean = str_trim(coalesce(subfamily, \"Unknown\"))\n  ) |>\n  filter(!is.na(state_province), !is.na(season))\n\n# Species seasonal activity\nspecies_seasonal <- frog_data_clean |>\n  filter(!is.na(subfamily_clean)) |>\n  # Get species with enough records\n  group_by(scientific_name) |>\n  filter(n() >= 50) |>\n  ungroup() |>\n  # Count by species and season\n  count(scientific_name, common_name, subfamily_clean, season) |>\n  # Get top subfamilies\n  group_by(subfamily_clean) |>\n  mutate(total_subfamily_records = sum(n)) |>\n  ungroup() |>\n  arrange(desc(total_subfamily_records)) |>\n  filter(subfamily_clean %in% unique(subfamily_clean)[1:5]) |> # Top 5 for clarity\n  mutate(\n    season_ordered = factor(season, levels = c(\"Spring\", \"Winter\", \"Autumn\", \"Summer\"))\n  )\n\n# Calculate medians for reference\nseason_medians <- species_seasonal |>\n  group_by(season_ordered) |>\n  summarise(median_recordings = median(n), .groups = \"drop\")\n\n# Add context metrics\nseason_stats <- species_seasonal |>\n  group_by(season_ordered) |>\n  summarise(\n    total_species = n(),\n    total_recordings = sum(n),\n    median_recordings = median(n),\n    .groups = \"drop\"\n  ) |>\n  mutate(\n    season_label = paste0(\n      season_ordered, \"\\n(\", total_species, \" species,\\n\",\n      scales::comma(total_recordings), \" recordings)\"\n    )\n  )\n```\n````\n:::\n\n\n#### 5. Visualization Parameters\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\n# Get basic theme colors\ncolors <- get_theme_colors()\n\n### |- titles and caption ----\ntitle_text <- str_glue(\"Australian Frogs Show Distinct Seasonal Calling Patterns\")\n\nsubtitle_text <- str_glue(\n    \"Species within families vary widely in calling seasons, revealing ecological niche partitioning<br>\",\n    \"**Spring** emerges as peak season with highest species diversity and recording activity<br><br>\",\n    \"FrogID citizen science data: **Jan 1 - Nov 9, 2023** (n=135,154 total recordings)<br>\",\n    \"**White circles** show seasonal medians | **Each dot** represents one frog species\"\n)\n\ncaption_text <- create_social_caption(\n  tt_year = 2025,\n  tt_week = 35,\n  source_text = \"FrogID dataset 6.0\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling\n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.2), color = colors$title, margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, lineheight = 1.2, color = colors$subtitle, size = rel(0.78), margin = margin(b = 20)),\n\n    # Axis elements\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n\n    # Grid elements\n    panel.grid.major = element_line(color = \"gray90\", linetype = \"solid\", linewidth = 0.3),\n    # panel.grid.major.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n\n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n    legend.margin = margin(t = 15),\n\n    # Plot margin\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n````\n:::\n\n\n#### 6. Plot\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: plot\n#| warning: false\n\n### |-  final plot ----\np <- species_seasonal |>\n  ggplot(aes(y = season_ordered, x = n)) +\n  # Geoms\n  geom_beeswarm(aes(color = subfamily_clean),\n    size = 2.5, alpha = 0.7, cex = 1\n  ) +\n  geom_point(\n    data = season_stats,\n    aes(y = season_ordered, x = median_recordings),\n    shape = 21, size = 4, fill = \"white\", color = \"black\", stroke = 1.2\n  ) +\n  # Scales\n  scale_color_viridis_d(name = \"Frog Subfamily\", option = \"plasma\") +\n  scale_x_log10(labels = comma_format()) +\n  scale_y_discrete(labels = season_stats$season_label) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    y = NULL,\n    x = \"Recordings per Species (Log Scale)\"\n  ) +\n  # Theme\n  theme(\n    axis.text.y = element_text(size = 10, hjust = 0.5),\n    legend.position = \"right\",\n    plot.title = element_text(\n      size = rel(1.5),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.80),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.5),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n```\n````\n:::\n\n\n#### 7. Save\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 35, \n  width  = 8,\n  height = 8\n  )\n```\n````\n:::\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1        viridis_0.6.5     viridisLite_0.4.2 ggbeeswarm_0.7.2 \n [5] glue_1.8.0        scales_1.3.0      janitor_2.2.0     showtext_0.9-7   \n [9] showtextdb_3.0    sysfonts_0.8.9    ggtext_0.1.2      lubridate_1.9.3  \n[13] forcats_1.0.0     stringr_1.5.1     dplyr_1.1.4       purrr_1.0.2      \n[17] readr_2.1.5       tidyr_1.3.1       tibble_3.2.1      ggplot2_3.5.1    \n[21] tidyverse_2.0.0   pacman_0.5.1     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   vipor_0.4.7        farver_2.1.2       fastmap_1.2.0     \n [5] gh_1.4.1           digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   \n [9] rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6       \n[13] tools_4.4.0        utf8_1.2.4         yaml_2.3.10        knitr_1.49        \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] camcorder_0.1.0    tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.4         \n[29] rmarkdown_2.29     crayon_1.5.3       ragg_1.3.3         generics_0.1.3    \n[33] rstudioapi_0.17.1  tzdb_0.5.0         commonmark_1.9.2   parallel_4.4.0    \n[37] vctrs_0.6.5        jsonlite_1.8.9     hms_1.1.3          bit64_4.5.2       \n[41] beeswarm_0.4.0     systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[45] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       munsell_0.5.1     \n[49] pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1          \n[53] httr2_1.0.6        textshaping_0.4.0  rprojroot_2.0.4    vroom_1.6.5       \n[57] evaluate_1.0.1     markdown_1.13      gridtext_0.1.5     snakecase_0.11.1  \n[61] renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3      gridExtra_2.3     \n[65] xfun_0.49          pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`tt_2025_35.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/tt_2025_35.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n#### 10. References\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1.  Data Sources:\n\n-   TidyTuesday 2025 Week 35: \\[Australian Frogs\\](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-09-02)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}