{
  "hash": "e085dfbf188a67e2b6874d4ca37e6999",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Simpsons: Character Dialogue Analysis (2010-2016)\"\nsubtitle: \"Exploring speaking patterns, viewership trends, and character contributions across seasons\"\ndescription: \"An in-depth analysis of The Simpsons character dialogues from 2010-2016, revealing speaking patterns, viewership trends, and character contributions. Through data visualization, we explore how the Simpson family dominates conversations, examine the declining viewership pattern, and identify unique speaking characteristics of key characters.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-02-02\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n   \"ggplot2\",\n   \"tidyverse\",\n   \"patchwork\",\n   \"text analysis\",\n   \"The Simpsons\",\n   \"TV shows\",\n   \"character analysis\",\n   \"data visualization\",\n   \"animated series\",\n   \"dialogue analysis\",\n   \"viewership trends\",\n   \"TV ratings\",\n   \"entertainment data\",\n   \"R programming\"\n]\nimage: \"thumbnails/tt_2025_05.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/TidyTuesday/2025/tt_2025_05.html\"\n  description: \"Analyzing The Simpsons dialogue data (2010-2016): Homer speaks 51K words while viewership declines. Discover how the Simpson family dominates screen time and shapes the show's narrative. #TidyTuesday #DataViz #TheSimpsons\"\n\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n![A three-panel visualization analyzing The Simpsons dialogue data (2010-2016). The top panel shows a scatter plot of character speaking patterns, with the Simpson family highlighted in yellow and showing higher total lines. The bottom left shows declining viewership trends across seasons 21-27 using boxplots. The bottom right displays a horizontal bar chart of the top 10 most talkative characters, led by Homer Simpson with over 50,000 words spoken.](tt_2025_05.png){#fig-1}\n\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    patchwork,      # The Composer of Plots\n    camcorder,      # Record Your Plot History \n    tidytext,       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n    ggrepel         # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- tidytuesdayR::tt_load(2025, week = 05) \n\ncharacters   <- tt$simpsons_characters |> clean_names()\nepisodes     <- tt$simpsons_episodes |> clean_names()\nlocations    <- tt$simpsons_locations |> clean_names()\nscript_lines <- tt$simpsons_script_lines |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(characters)\nglimpse(episodes)\nglimpse(locations)\nglimpse(script_lines)\n```\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed for reproducibility\nset.seed(123)\n\n# P1. Character Speaking Pattern\nspeaking_patterns <- script_lines |>\n    filter(\n        !is.na(raw_character_text), \n        speaking_line == TRUE,\n        !(episode_id %in% c(597, 598, 599, 600))  # filter S28\n    ) |> \n    group_by(raw_character_text) |>\n    summarise(\n        total_lines = n(),\n        avg_words = mean(word_count, na.rm = TRUE)\n    ) |>\n    ungroup() |> \n    filter(total_lines > 50) |>\n    mutate(\n        character_type = case_when(\n            raw_character_text %in% c(\"Homer Simpson\", \"Marge Simpson\", \n                                      \"Bart Simpson\", \"Lisa Simpson\") ~ \"Simpson Family\",\n            TRUE ~ \"Supporting Characters\"\n        ),\n        show_label = raw_character_text %in% c(\n            \"Homer Simpson\", \"Marge Simpson\", \"Bart Simpson\", \"Lisa Simpson\",\n            \"Kent Brockman\", \"Ralph Wiggum\" # Key outliers\n        )\n    )\n\n# P2. US Viewership Distribution by Season\nepisodes_filtered <- episodes |>\n    filter(season != 28)\n\n# P3. Top 10 Most Talkative Characters\ntalkative_chars <- script_lines |>\n    filter(!is.na(raw_character_text)) |>  \n    group_by(raw_character_text) |>\n    summarise(\n        total_words = sum(word_count, na.rm = TRUE)\n    ) |>\n    ungroup() |> \n    # Get top 10\n    arrange(desc(total_words)) |>\n    head(10) |>\n    # Add character type and reverse the order\n    mutate(\n        character_type = case_when(\n            raw_character_text %in% c(\"Homer Simpson\", \"Marge Simpson\", \n                                      \"Bart Simpson\", \"Lisa Simpson\") ~ \"Simpson Family\",\n            TRUE ~ \"Supporting Characters\"\n        ),\n        # Create factor for reversed ordering\n        raw_character_text = factor(raw_character_text, levels = rev(raw_character_text))\n    )\n```\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors <- get_theme_colors(palette = c(\n    \"Simpson Family\"        = \"#FED41D\", \n    \"Supporting Characters\" = \"grey50\",\n    \" \" = \"#009DDC\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text <- str_glue(\"The Simpsons: Character Dialogue Analysis (2010-2016)\")\nsubtitle_text <- str_glue(\"Exploring speaking patterns, viewership trends, and character contributions across seasons\")\n\n# Create caption\ncaption_text <- create_social_caption(\n    tt_year = 2025,\n    tt_week = 05,\n    source_text = \"The Simpsons Dataset\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Axis elements\n        axis.title = element_text(color = colors$text, size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey80\", linewidth = 0.1),\n        \n        # Legend elements\n        legend.position = \"right\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8)),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n#### 6. Plot \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  Plot ----\n\n# P1. Character Speaking Pattern\np1 <- ggplot(speaking_patterns, aes(x = total_lines, y = avg_words)) +\n    \n    # Geoms\n    geom_point(aes(size = total_lines, color = character_type, alpha = character_type)) +\n    geom_text_repel(\n        data = filter(speaking_patterns, show_label),\n        aes(label = raw_character_text),\n        family = fonts$text,\n        size = 4,\n        color = \"grey30\",\n        min.segment.length = 0,\n        max.overlaps = Inf,\n        segment.size = 0.2,\n        segment.color = \"grey50\",\n        segment.alpha = 0.5,\n        box.padding = 0.5,\n        point.padding = 0.3,\n        force = 3,\n        direction = \"both\",\n        seed = 123\n    ) +\n    # Control legend order and appearance\n    guides(\n        color = guide_legend(\n            override.aes = list(size = 4),\n            order = 1\n        ),\n        size = guide_legend(\n            nrow = 1,\n            order = 2,\n            override.aes = list(color = \"grey70\")  \n        )\n    ) +\n    \n    # Scales\n    scale_x_continuous(\n        breaks = seq(0, 6000, 1000),\n        labels = scales::label_number(scale = 1e-3, suffix = \" K\"),  \n        limits = c(-100, 6100)\n    ) +\n    scale_y_continuous(\n        breaks = seq(6, 18, 3),\n        limits = c(5.5, 18)\n    ) +\n    scale_color_manual(\n        values = colors$palette\n    ) +\n    scale_alpha_manual(\n        values = c(\"Simpson Family\" = 0.9,\n                   \"Supporting Characters\" = 0.5),\n        guide = \"none\"\n    ) +\n    scale_size_continuous(\n        range = c(1, 8),\n        breaks = c(100, 500, 1000, 2000),\n        labels = scales::comma\n    ) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        title = \"Character Speaking Patterns\",\n        x = \"Total Lines (Thousands)\",\n        y = \"Average Words per Line\",\n        color = \"Character Type\",\n        size = \"Total Lines\"\n    ) +\n    \n    # Theme\n    theme(\n        panel.grid = element_blank(),\n        legend.position = c(0.8, 0.84),\n        legend.box = \"vertical\",\n        legend.background = element_rect(fill = colors$background, color = NA),\n        legend.title = element_text(family = fonts$text, size = 10),\n        legend.text = element_text(family = fonts$text, size = 9),\n        legend.margin = margin(5, 5, 5, 5),\n        \n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n    ) \n   \n# P2. US Viewership Distribution by Season\np2 <- ggplot(episodes_filtered, aes(x = factor(season), y = us_viewers_in_millions)) +\n    \n    # Geoms\n    geom_point(\n        position = position_jitter(width = 0.2, seed = 123),\n        color = colors$palette[3],\n        alpha = 0.5,\n        size = 2\n    ) +\n    geom_boxplot(\n        fill = colors$palette[1],\n        alpha = 0.25, \n        outlier.shape = NA,\n        width = 0.5\n    ) +\n    \n    # Scales\n    scale_y_continuous(\n        breaks = seq(0, 15, 3),\n        limits = c(0, 15),\n        labels = scales::label_number(scale = 1, suffix = \" K\"),\n    ) +\n    \n    # Labs\n    labs(\n        title = \"US Viewership Distribution by Season\",\n        x = \"Season\",\n        y = \"US Viewers (Millions)\"\n    ) +\n    \n    # Theme\n    theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        \n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n    ) \n    \n# P3. Top 10 Most Talkative Characters\np3 <- ggplot(talkative_chars,\n             aes(x = raw_character_text, \n                 y = total_words,\n                 fill = character_type)) +\n    \n    # Geoms\n    geom_col(\n        width = 0.7,\n        alpha = 0.9, \n        show.legend = FALSE\n    ) +\n    geom_text(\n        aes(label = scales::comma(total_words)),\n        hjust = -0.2,\n        family = fonts$text,\n        size = 3,\n        color = colors$text\n    ) +\n    \n    # Scales\n    scale_y_continuous(\n        labels = scales::label_number(scale = 1e-3, suffix = \" K\"),  \n        expand = expansion(mult = c(0, 0.15))  \n    ) +\n    scale_fill_manual(\n        values = colors$palette\n    ) +\n    coord_flip() +\n    \n    # Labs\n    labs(\n        title = \"Top 10 Most Talkative Characters\",\n        x = NULL,\n        y = \"Total Words Spoken ((Thousands)\"\n    ) +\n    \n    # Theme\n    theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n\n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n    ) \n    \n# Combine plots \ncombined_plot <- (p1 / (p2 + p3)) +\n    \n    plot_layout(\n        heights = c(1.2, 1),  \n        widths = c(1, 1)    \n        ) \n\ncombined_plot <- combined_plot +\n    # Add overall title, subtitle, and caption\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                size   = rel(1.8),\n                family = fonts$title,\n                face   = \"bold\",\n                color  = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size   = rel(1),\n                family = fonts$subtitle,\n                color  = colors$subtitle,\n                lineheight = 1.2,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.caption = element_markdown(\n                size   = rel(0.6),\n                family = fonts$caption,\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 10)\n            ),\n             plot.margin = margin(t = 20, r = 10, b = 20, l = 10)\n            )\n        )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 5, \n  width = 10,\n  height = 10\n)\n```\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggrepel_0.9.6   tidytext_0.4.2  camcorder_0.1.0 patchwork_1.3.0\n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    skimr_2.1.5    \n [9] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n[13] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[17] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[21] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] janeaustenr_1.0.0  digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   \n [9] rsvg_2.6.1         tokenizers_0.3.0   magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.4        tools_4.4.0        utf8_1.2.4         yaml_2.3.10       \n[17] knitr_1.49         labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0         \n[21] curl_6.0.0         xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2\n[25] withr_3.0.2        grid_4.4.0         fansi_1.0.6        colorspace_2.1-1  \n[29] gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29     crayon_1.5.3      \n[33] generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0         commonmark_1.9.2  \n[37] parallel_4.4.0     ggplotify_0.1.2    yulab.utils_0.1.8  base64enc_0.1-3   \n[41] vctrs_0.6.5        Matrix_1.7-0       jsonlite_1.8.9     gridGraphics_0.5-1\n[45] hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5      \n[49] gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4      gtable_0.3.6      \n[53] munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1 \n[57] R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4    vroom_1.6.5       \n[61] evaluate_1.0.1     lattice_0.22-6     markdown_1.13      SnowballC_0.7.1   \n[65] gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1     \n[69] svglite_2.1.3      xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`tt_2025_05.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/tt_2025_05.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1. Data Sources:\n   - TidyTuesday 2025 Week 05: [The Simpsons](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-02-04)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}