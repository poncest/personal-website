{
  "hash": "2614cef3519f1e955bbd10b83ac5e216",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Track Connections at posit::conf (2023-2024)\"\nsubtitle: \"Kamada–Kawai Forced-Directed Network analysis showing how conference tracks are related through shared words in talk titles.\"\ndescription: \"Exploring the interconnected topics at posit::conf through network analysis. This visualization reveals how different conference tracks are linked through common terminology in talk titles, highlighting the relationships between various R programming and data science themes across 2023-2024 conferences.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-01-13\" \ncategories: [TidyTuesday, Data Visualization, R Programming]  \ntags: [\n    \"network-analysis\", \n    \"ggraph\", \n    \"tidygraph\", \n    \"text-analysis\", \n    \"conference-data\", \n    \"posit-conf\", \n    \"R-conference\", \n    \"data-visualization\",\n    \"tidyverse\",\n    \"data-science\"\n]\nimage: \"thumbnails/tt_2025_02.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/TidyTuesday/2024/tt_2025_02.html\"\n  description: \"Discover how posit::conf tracks are interconnected! This network visualization reveals the relationships between different conference topics through shared terminology, showcasing the diverse yet interrelated nature of R programming and data science talks at posit::conf 2023-2024.\"\n\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n![A Kamada-Kawai network visualization of posit::conf tracks (2023-2024), where tracks are nodes connected by gray edges. Thicker edges indicate more shared words between track titles, and larger blue nodes show tracks with more connections. The network reveals clusters of related topics and central tracks that bridge different conference themes.](tt_2025_02.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    tidytext,       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools \n    ggraph,         # An Implementation of Grammar of Graphics for Graphs and Networks \n    igraph,         # Network Analysis and Visualization \n    tidygraph       # A Tidy API for Graph Manipulation\n    #withr           # Run Code 'With' Temporarily Modified Global State\n)\n\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- tidytuesdayR::tt_load(2025, week = 02) \n\nconf2023 <- tt$conf2023 |> clean_names()\nconf2024 <- tt$conf2024 |> clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(conf2023)\nskim(conf2023)\n\nglimpse(conf2024)\nskim(conf2024)\n```\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare 2023 data\nconf2023_clean <- conf2023 |>\n    select(\n        speaker_name,\n        title = session_title,\n        description = session_abstract,\n        track = block_track_title,\n        session_type,\n        speaker_affiliation,\n        session_date,\n        session_start,\n        session_length\n    ) |>\n    mutate(\n        year = 2023,\n        has_video = FALSE\n    )\n\n# Prepare 2024 data\nconf2024_clean <- conf2024 |>\n    select(\n        speaker_name,\n        title = talk_title,\n        description,\n        track,\n        yt_url\n    ) |>\n    mutate(\n        year = 2024,\n        has_video = TRUE,\n        session_type = case_when(\n            str_to_lower(track) == \"keynote\" ~ \"keynote\",\n            TRUE ~ \"regular\"\n        ),\n        speaker_affiliation = NA_character_,\n        session_date = NA,\n        session_start = NA,\n        session_length = NA\n    )\n\n# Combine datasets\nconf_combined <- bind_rows(conf2023_clean, conf2024_clean) \n\n### |-  plot data ----\n\n# Create topic similarity network\ntitle_similarity <- conf_combined |>\n    # Split titles into individual words\n    unnest_tokens(word, title) |>\n    \n    # Remove common stop words (e.g., \"the\", \"and\", \"in\")\n    anti_join(stop_words) |>\n    \n    # Clean up words:\n    # Remove numbers and single-letter words\n    filter(!str_detect(word, \"^[0-9]+$\"),\n           str_length(word) > 1) |>\n    \n    # Count word occurrences per track\n    count(track, word) |>\n    \n    # Focus on meaningful patterns:\n    group_by(track) |>\n    # Keep words that appear at least twice\n    filter(n >= 2) |>\n    # Take top 8 most frequent words per track\n    slice_max(n, n = 8) |>\n    ungroup()\n\n# Create network edges by finding pairs of tracks that share common words\nedges <- title_similarity |>\n    # Group by each unique word\n    group_by(word) |>\n    \n    # Keep only words that appear in more than one track\n    filter(n() > 1) |>\n    \n    # For each word group, create pairs of tracks that share the word\n    summarize(\n        combinations = list(data.frame(\n            # First track in each pair (taking first row of combinations)\n            X1 = combn(track, 2)[1,],\n            # Second track in each pair (taking second row of combinations) \n            X2 = combn(track, 2)[2,]\n        ))\n    ) |>\n    \n    # Convert the list of combinations into rows\n    unnest(combinations) |>\n    \n    # Count how many words each pair of tracks have in common\n    # This creates the 'weight' of the connection between tracks\n    count(X1, X2, name = \"weight\")\n\n# Create network nodes\nnodes <- tibble(\n    name = unique(c(edges$X1, edges$X2)),\n    type = \"track\"\n)\n\n# Create network graph using tidygraph\ngraph <- tbl_graph(\n    nodes = nodes,\n    edges = edges,\n    directed = FALSE\n) |>\n    # Add degree centrality using mutate\n    mutate(\n        degree = centrality_degree()\n    )\n```\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors <- get_theme_colors(palette = c(\"gray50\", \"#297ACC\"))\n\n### |-  titles and caption ----\ntitle_text <- str_glue(\"Track Connections at posit::conf (2023-2024)\")\n\nsubtitle_text <- str_glue(\n    \"__Kamada–Kawai__ Forced-Directed Network analysis showing how conference tracks are related<br>\n    through shared words in talk titles.<br><br>\n    __Node size__ corresponds to __node degree__ (the number of connections to other tracks),<br>\n    __edge thickness__ shows the number of shared words between tracks.\"\n)\n\n# Create caption\ncaption_text <- create_social_caption(\n    tt_year = 2025,\n    tt_week = 02,\n    source_text = \"posit::conf attendee portal 2023-2024\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Weekly-specific modifications\n        legend.box = \"vertical\",          # Stack legends vertically\n        # legend.position = \"top\",\n        legend.position      = c(0.95, 1.28),    # x=1, y=1 puts it in the upper-right\n        legend.justification = c(1, 1),          # Anchor the legend’s top-right corner\n        legend.box.margin  = margin(b = 15),\n        legend.spacing     = unit(0.2, \"cm\"),\n        legend.box.spacing = unit(0.2, \"cm\"),\n        legend.key.size    = unit(0.8, \"lines\"),\n        legend.text        = element_text(size = 9),\n        legend.title       = element_text(size = 10, face = \"bold\"),\n        panel.grid.major   = element_blank(),\n        panel.grid.minor   = element_blank()\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  Plot ----\n### |-  Plot  ----\n\n# Set seed for reproducibility\nset.seed(123)  \n\n# Create layout using tidygraph functions\ngraph_laid_out <- graph |>\n    activate(nodes) |>\n    create_layout(layout = \"kk\")\n\n# ggraph call\np <- ggraph(graph_laid_out) +\n    # Geom\n    geom_edge_link(\n        aes(edge_alpha = weight, \n            edge_width = weight),\n        edge_color = colors$palette[1],\n        show.legend = TRUE,\n        edge_linetype = \"solid\",\n        alpha = 0.5,    \n        lineend = \"round\"\n    ) +\n    geom_node_point(\n        aes(size = degree),\n        color = colors$palette[2],\n        alpha = 0.8\n    ) +\n    geom_node_label(\n        aes(label = str_wrap(name, 20)),\n        repel        = TRUE,\n        fill = alpha(\"white\", 0.8),  \n        label.size   = 0,     # remove border\n        label.padding = unit(0.15, \"lines\"),\n        size         = 3.0,\n        family       = fonts$text,\n        fontface     = \"bold\",\n        color        = colors$text,\n        # Additional ggrepel arguments:\n        box.padding  = 0.4,        # Increase if labels overlap too much\n        point.padding = 0.3,       # Space between node and label\n        force        = 1.0,        # Higher = stronger repel\n        force_pull   = 0.1,        # Pull label toward or away from point\n        max.overlaps = Inf\n    ) +\n    # Scales\n    scale_edge_width(range = c(0.5, 2.5)) +\n    scale_size(range = c(3, 8)) +\n    scale_edge_alpha(range = c(0.2, 0.8)) +\n    \n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        edge_alpha = \"Shared Words\",   \n        edge_width = \"Connection Strength\",   \n        size = \"Node Degree\" \n    ) +\n    # Combine similar legends\n    guides(\n        edge_alpha = guide_legend(\n            title = \"Connection Strength\",\n            override.aes = list(alpha = 0.6)\n        ),\n        edge_width = \"none\",  # Hide duplicate legend\n        size = guide_legend(\n            title = \"Node Degree\",\n            override.aes = list(alpha = 0.8)\n        ) \n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size   = rel(2.6),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_markdown(\n            size   = rel(1.1),\n            family = fonts$subtitle,\n            color  = colors$subtitle,\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size   = rel(0.65),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n        )\n    )  \n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nsave_plot (p, type = \"tidytuesday\", \n          year = 2025, week = 02, width = 14, height = 10)\n```\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] tidygraph_1.3.1 igraph_2.1.1    ggraph_2.2.1    tidytext_0.4.2 \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    skimr_2.1.5    \n [9] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n[13] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[17] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[21] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       viridis_0.6.5     \n [5] fastmap_1.2.0      gh_1.4.1           tweenr_2.0.3       janeaustenr_1.0.0 \n [9] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    tokenizers_0.3.0  \n[13] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[17] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[21] graphlayouts_1.2.0 htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0        \n[25] xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2       \n[29] grid_4.4.0         polyclip_1.10-7    fansi_1.0.6        colorspace_2.1-1  \n[33] gitcreds_0.1.2     MASS_7.3-60.2      cli_3.6.3          crayon_1.5.3      \n[37] rmarkdown_2.29     ragg_1.3.3         generics_0.1.3     rstudioapi_0.17.1 \n[41] tzdb_0.4.0         commonmark_1.9.2   cachem_1.1.0       ggforce_0.4.2     \n[45] parallel_4.4.0     base64enc_0.1-3    vctrs_0.6.5        Matrix_1.7-0      \n[49] jsonlite_1.8.9     hms_1.1.3          bit64_4.5.2        ggrepel_0.9.6     \n[53] magick_2.8.5       systemfonts_1.1.0  codetools_0.2-20   stringi_1.8.4     \n[57] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[61] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        textshaping_0.4.0 \n[65] rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1     lattice_0.22-6    \n[69] markdown_1.13      SnowballC_0.7.1    gridtext_0.1.5     memoise_2.0.1     \n[73] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      gridExtra_2.3     \n[77] xfun_0.49          pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`tt_2025_02.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/TidyTuesday/2025/tt_2025_02.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1. Data Sources:\n   - TidyTuesday 2025 Week 02: [posit::conf talks](https://github.com/rfordatascience/tidytuesday/tree/main/data/2025/2025-01-14)\n\n\n \n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}