{
  "hash": "455d3a2eb0cef6853eba866843770b22",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Eurovision: Sweden and Ireland Lead with the Most Wins\"\nsubtitle: \"Tracking Eurovision Wins by Country from 1956 to 2024\"\nauthor: \"Steven Ponce\"\ndate: \"2024-12-01\"\n\ncategories:\n  - \"#SWDchallenge\"\nimage: \"thumbnails/swd_2024_11.png\"\n\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n  \neditor_options: \n  chunk_output_type: console\n\nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: false\n\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations.html\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n### Original\n\nThe goal of this month's #SWDchallenge is to _make a good graph_. For my submission, I decided to revisit a #dataviz from early in my journey. The chart below was my submission for the 2022 #TidyTuesday week 20 challenge. The goal back then was to visualize the countries with more than three Eurovision wins.\n\n![Original chart](https://raw.githubusercontent.com/poncest/tidytuesday/main/2022/Week_20/2022_20_eurovision.png){#fig-1}\n\n\nAdditional information about this month's #SWDchallenge can be found [HERE](https://community.storytellingwithdata.com/challenges/nov-2024-make-a-good-graph)\n\n![Line chart showing cumulative Eurovision wins by country from 1956 to 2024. Sweden and Ireland lead with 7 wins each, with Ireland's most recent win in 1996 and Sweden's in 2023. Other countries have fewer wins, depicted in gray.](swd_2024_11.png){#fig-1}\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  tidytuesdayR,      # Access the Weekly 'TidyTuesday' Project Dataset\n  ggrepel            # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n) \n\n### |- figure size ---- \ncamcorder::gg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 10,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n\n### |- resolution ---- \nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neurovision <- tidytuesdayR::tt_load(2022, week = 20)$eurovision %>% \n  clean_names() \n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(eurovision)\nskim(eurovision)\ncolnames(eurovision)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Winners from 1956 to 2003\nwinners_1956_2003_tbl <- eurovision |> \n  filter(year < 2004,\n         section == 'final',\n         winner == TRUE) |> \n  select(year, host_city, artist_country, total_points, winner) |> \n  arrange(desc(year)) |> \n  drop_na()\n\n# Winners from 2004 to 2022\nwinners_2004_2022_tbl <- eurovision |> \n  filter(section == 'grand-final',\n         winner == TRUE) |> \n  select(year, host_city, artist_country, total_points, winner) |> \n  arrange(desc(year)) |> \n  drop_na()\n\n# Winners for 2023 and 2024\nwinners_2023_2024_tbl <- tibble(\n  year = c(2023, 2024),\n  host_city = c(\"Liverpool\", \"MalmÃ¶\"),  \n  artist_country = c(\"Sweden\", \"Switzerland\"),\n  total_points = c(583, 591),  # Placeholder points, adjust based on real data if available\n  winner = TRUE\n)\n \n# Combine all winners\nwinners_combined_tbl <- bind_rows(winners_1956_2003_tbl, winners_2004_2022_tbl, winners_2023_2024_tbl) |>\n  arrange(year) |>\n  drop_na()\n\n# Calculate cumulative wins by year\ncumulative_data <- winners_combined_tbl |>\n  group_by(year, artist_country) |>\n  summarise(total_points = sum(total_points), .groups = \"drop\") |>\n  arrange(year) |>\n  group_by(artist_country) |>\n  mutate(cumulative_wins = row_number()) |>\n  ungroup()\n\n# Define key countries to highlight\nkey_countries <- c(\"Sweden\", \"Ireland\")\n\n# Get the most recent year for each key country\nlatest_year_data <- cumulative_data |> \n  filter(artist_country %in% key_countries) |> \n  group_by(artist_country) |> \n  filter(year == max(year)) |> \n  ungroup()\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |- plot aesthetics ---- \nbkg_col      <- \"#f5f5f2\"  \ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"    \ncol_palette  <- c(\"#FF007F\", \"#004080\")\n\n### |-  titles and caption ----\n# icons\ntt <- str_glue(\"#SWDchallenge: Nov 2024 &bull; Source: TidyTuesday 2023 week 20<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\nbs <- str_glue(\"<span style='font-family:fa6-brands'>&#xe671; </span>\")\n\ntitle_text    <- str_glue(\"Eurovision: Sweden and Ukraine Lead with the Most Wins\")\nsubtitle_text <- str_glue(\"Tracking Eurovision Wins by Country from 1956 to 2024<br><br>\n                          **Total Wins Since Inception**\")\ncaption_text  <- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n# |- fonts ----\nfont_add('fa6-brands', here::here(\"fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")                 \nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")   \nfont_add_google(\"Noto Sans\", regular.wt = 400,family = \"caption\")\nshowtext_auto(enable = TRUE)  \n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = \"plot\",\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n  axis.line.x           = element_line(color = \"#252525\", linewidth = .3),\n  axis.ticks.x          = element_line(color = text_col),  \n  axis.title            = element_text(face = \"bold\"),\n  panel.grid.minor      = element_blank(),\n  panel.grid.major      = element_blank(),\n  panel.grid.major.y    = element_line(color = \"grey85\", linewidth = .4),\n)  \n```\n:::\n\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  Line Chart \ncumulative_line_chart <-\n  # Geoms\n  ggplot(\n    cumulative_data,\n    aes(x = year, y = cumulative_wins, group = artist_country, color = artist_country)\n  ) +\n  geom_line(\n    data = cumulative_data |> filter(!artist_country %in% key_countries),\n    linewidth = 0.25, color = \"gray20\", alpha = 0.3, linetype = \"solid\"\n  ) +\n  geom_line(\n    data = cumulative_data |> filter(artist_country %in% key_countries),\n    linewidth = 1.2\n  ) +\n  geom_point(\n    data = latest_year_data,\n    aes(color = artist_country), size = 4, shape = 21, fill = \"white\", stroke = 2\n  ) +\n  geom_text(\n    data = latest_year_data,\n    aes(label = str_glue(\"{artist_country} ({cumulative_wins})\\n{year}\")),\n    vjust = -0.5,\n    hjust = 0.2, nudge_x = 1, size = 4, fontface = \"bold\", lineheight = 1\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    breaks = pretty_breaks(n = 5),\n    limits = c(min(cumulative_data$year), max(cumulative_data$year) + 5)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 8, by = 2),\n    limits = c(0, 8)\n  )+\n  scale_color_manual(values = col_palette) +\n  coord_cartesian(clip = \"off\") +\n  \n  # Labs\n  labs(\n    x = \"Year\",\n    y = \"\",\n    color = \"Country\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = \"title\",\n      face = \"bold\",\n      color = title_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(1.1),\n      family = \"subtitle\",\n      color = subtitle_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = \"caption\",\n      color = caption_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 1,\n      margin = margin(t = 15, b = 5)\n    )\n  )\n\n\n# Show plot\ncumulative_line_chart\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\n# Save the plot again\nggsave(\n  filename = here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_11.png\"),\n  plot   = cumulative_line_chart,\n  width  =  10,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n \n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_11.png\")) |> \n  magick::image_resize(geometry = \"400\") |> \n  magick::image_write(here::here(\"data_visualizations/SWD Challenge/2024/thumbnails/swd_2024_11.png\"))\n```\n:::\n\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.16.0 yaml_2.3.10      \n [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.8    xfun_0.47        \n[13] digest_0.6.37     rlang_1.1.4       renv_1.0.3        evaluate_0.24.0  \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n\n##### Expand for GitHub Repo\n \n[Access the GitHub repository here](https://github.com/poncest/personal-website/)\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}