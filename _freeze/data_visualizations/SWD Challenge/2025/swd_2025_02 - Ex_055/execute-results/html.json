{
  "hash": "8ee293664ecdcff06f3dd08d6fd8a550",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TrueNut's Market Dominance in Powdered Nut Butter\"\nsubtitle: \"Strategic position and category performance across a $386M market\"\ndescription: \"A strategic market analysis visualizing TrueNut's dominant position in the powdered nut butter market. Using complementary quadrant and dumbbell charts, this visualization reveals how TrueNut commands 70% market share with complete category coverage, while competitors NutBrite and GoldenSpread occupy specialist and limited player positions respectively.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-02-27\"\ncategories: [\"SWDchallenge\", \"Exercise\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [\n  \"Market Analysis\", \"Strategic Positioning\", \"Dumbbell Chart\", \"Quadrant Chart\", \"ggplot2\", \"Competitive Analysis\", \"Market Share\", \"Category Coverage\", \"patchwork\", \"Business Intelligence\", \"Tidyverse\", \"Data Storytelling\"\n]\nimage: \"thumbnails/swd_2025_02-Ex_055.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                          \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/SWD Challenge/2025/swd_2025_02-Ex_055.html\" \n  description: \"Visualizing TrueNut's 70% market dominance in the $386M powdered nut butter market through quadrant and dumbbell charts #DataVisualization #MarketAnalysis #ggplot2\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n### Original\n\nThe goal of this month's Storytelling with Data exercise is to go crazy or keep it simple (marimekko chart).\n\n![Original chart](https://stwd-prod-static-back.s3.amazonaws.com/media/Exercise_banners.png){#fig-1}\n\n\nAdditional information can be found [HERE](https://community.storytellingwithdata.com/exercises/go-crazy-or-keep-it-simple)\n\n\n### Makeover\n\n![A dual-panel visualization titled TrueNut's Market Dominance in Powdered Nut Butter. The left panel shows a quadrant chart positioning TrueNut as a market leader with 100% category coverage and high market share, NutBrite as a specialist with high coverage but lower share, and GoldenSpread as a limited player with low coverage and share. The right panel displays a dumbbell chart showing sales by product category, with TrueNut leading in most categories, particularly in Peanut Butter ($71.9M) and Hazelnut Spread ($73.81M).](swd_2025_02-Ex_0055.png){#fig-1}\n\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  camcorder,         # Record Your Plot History,\n  paletteer,         # Comprehensive Collection of Color Palettes\n  patchwork          # The Composer of Plots # The Composer of Plots # The Composer of Plots\n) \n\n### |- figure size ---- \ngg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 12,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data <- read_csv(\n  here::here(\"data/swdexercise055.csv\")\n  ) |> \n  clean_names() \n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(raw_data)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# P1. Market Share Data ----\n\n# Transform raw data to long format with company identifiers\nlong_data <- raw_data |>\n  # Remove the total market row\n  filter(x1 != \"Total Market\") |>\n  # Convert from wide to long format\n  pivot_longer(\n    cols = c(true_nut_sales, nut_brite_sales, golden_spread_sales),\n    names_to = \"company\", \n    values_to = \"sales\"\n  ) |>\n  # Clean company names and calculate percentages\n  mutate(\n    # Use case_when instead of recode for better readability\n    company = case_when(\n      company == \"true_nut_sales\" ~ \"TrueNut\",\n      company == \"nut_brite_sales\" ~ \"NutBrite\",\n      company == \"golden_spread_sales\" ~ \"GoldenSpread\",\n      TRUE ~ company  # Fallback for unexpected values\n    ),\n    # Calculate percentage of category total\n    percentage = sales / total_sales * 100\n  )\n\n# Calculate overall company totals\ncompany_totals <- raw_data |>\n  # Sum sales for each company\n  summarise(\n    TrueNut = sum(true_nut_sales),\n    NutBrite = sum(nut_brite_sales),\n    GoldenSpread = sum(golden_spread_sales)\n  ) |>\n  # Convert to long format\n  pivot_longer(\n    cols = everything(), \n    names_to = \"company\", \n    values_to = \"sales\"\n  ) |>\n  # Calculate market share percentages\n  mutate(percentage = sales / sum(sales) * 100)\n\n# Calculate category coverage for each company\ncoverage <- long_data |>\n  # Only count categories where the company has sales\n  filter(sales > 0) |>\n  # Count unique categories per company\n  group_by(company) |>\n  summarise(\n    categories_covered = n_distinct(x1),\n    # Calculate as percentage of all categories\n    coverage_percent = categories_covered / n_distinct(long_data$x1) * 100\n  )\n\n# Join company totals with coverage data\nposition_data <- left_join(company_totals, coverage, by = \"company\")\n\n# Define quadrant labels with semantic positioning\nquadrant_labels <- tibble(\n  # Define quadrant centers\n  quadrant = c(\"Specialists\", \"Limited Players\", \"Market Leaders\", \"Volume Players\"),\n  x = c(25, 25, 75, 75),     \n  y = c(65, 20, 65, 20),\n  # Add clear descriptions\n  description = c(\n    \"(Niche categories, strong coverage)\",\n    \"(Low share, few categories)\",\n    \"(Strong share, wide coverage)\",\n    \"(High share, category focused)\"\n  )\n) |>\n  # Convert to label format expected by ggplot\n  rename(label = quadrant)\n\n# P2. Market by Product Category Data ----\n\n# Calculate category statistics and establish ordering\ncategory_stats <- long_data |> \n  # Group by category\n  group_by(x1) |>\n  # Get key category metrics (just once per category)\n  summarize(\n    total_sales = first(total_sales),\n    .groups = \"drop\"  \n  ) |>\n  # Sort by total sales descending\n  arrange(desc(total_sales))\n\n# Create ordered factor for consistent category display\ncategory_order <- category_stats |> pull(x1)\n\n# Prepare the main plotting data with ordered categories\nplot_data <- long_data |>\n  # Create ordered factor with categories in descending sales order\n  mutate(\n    # Reverse for bottom-to-top ordering in the plot\n    x1 = factor(x1, levels = rev(category_order))\n  ) |>\n  # Only include meaningful sales values\n  filter(sales > 0.01)  \n\n# Create the label data from filtered plot data\nlabel_data <- plot_data |> \n  # Format sales values as currency with millions indicator\n  mutate(\n    label = paste0(\"$\", round(sales, 2), \"M\")\n  )\n\n# Simplified category totals reference (using earlier calculation)\ncategory_totals <- category_stats |>\n  # Apply the same factor ordering\n  mutate(x1 = factor(x1, levels = rev(category_order)))\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors <- get_theme_colors(\n  palette = paletteer:::paletteer_d(\"ltc::trio4\")\n)\n\n### |-  titles and caption ----\ntitle_text <- str_glue(\"TrueNut's Market Dominance in Powdered Nut Butter\")\n\nsubtitle_text <- str_glue(\"Strategic position and category performance across a $386M market\")\n\n# Create caption\ncaption_text <- create_swd_exe_caption(\n  year = 2025,\n  month = \"Feb\",\n  source_text =  \"Let's Practice! Exercise 5.5\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n    \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# P1. Market Position Chart ----\np1 <- ggplot(position_data, aes(x = percentage, y = coverage_percent)) +\n  # Geoms\n  geom_rect(xmin = 0, xmax = 50, ymin = 0, ymax = 50, fill = \"gray95\", alpha = 0.5) +\n  geom_rect(xmin = 50, xmax = 100, ymin = 0, ymax = 50, fill = \"gray95\", alpha = 0.5) +\n  geom_rect(xmin = 0, xmax = 50, ymin = 50, ymax = 100, fill = \"gray95\", alpha = 0.5) +\n  geom_rect(xmin = 50, xmax = 100, ymin = 50, ymax = 100, fill = \"gray95\", alpha = 0.5) +\n  geom_hline(yintercept = 50, linetype = \"dashed\", color = \"gray50\") +\n  geom_vline(xintercept = 50, linetype = \"dashed\", color = \"gray50\") +\n  geom_point(aes(color = company), size = 6, alpha = 0.8) +\n  geom_text(aes(label = company), color = \"gray20\", \n            fontface = \"bold\", size = 3.5, vjust = 3) +\n  geom_text(\n    data = quadrant_labels,\n    aes(x = x, y = y, label = label),\n    size = 4,\n    color = \"gray40\",\n    fontface = \"bold\",\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n  geom_text(\n    data = quadrant_labels,\n    aes(x = x, y = y - 4, label = description),  \n    size = 3,\n    color = \"gray50\",\n    fontface = \"italic\",\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n  # Scales\n  scale_x_continuous(\n    labels = percent_format(scale = 1), limits = c(0, 100)\n    ) +\n  scale_y_continuous(\n    labels = percent_format(scale = 1), limits = c(0, 100)\n    ) +\n  scale_color_manual(values = colors$palette) +\n  coord_cartesian(clip = \"off\") +\n  # Labs  \n  labs(\n    title = \"Company Market Position Analysis\",\n    subtitle = \"Comparison of market share vs. category coverage\",\n    x = \"Market Share\\n(% of total sales)\",\n    y = \"Category Coverage\\n(% of product categories)\"\n  ) \n\n# P2. Market by Product Category Chart ----\np2 <- ggplot() +\n  # Geoms\n  geom_segment(\n    data = category_totals,\n    aes(y = x1, yend = x1, x = 0, xend = max(total_sales) * 1.05),\n    color = \"gray85\", linewidth = 0.5\n  ) +\n  geom_point(\n    data = plot_data,\n    aes(x = sales, y = x1, color = company),\n    size = 4, alpha = 0.9,\n    show.legend = TRUE\n  ) +\n  geom_text(\n    data = label_data,\n    aes(x = sales, y = x1, label = label),\n    vjust = -0.9, \n    size = 3,\n    show.legend = FALSE  \n  ) +\n  geom_text(\n    data = category_totals,\n    aes(x = max(total_sales) * 1.1, y = x1, label = paste0(\"Total: $\", total_sales, \"M\")),\n    hjust = 0, vjust = 0.3, size = 3, color = \"gray30\",\n    show.legend = FALSE\n  ) +\n  # Scales\n  scale_x_continuous(\n    labels = dollar_format(suffix = \"M\"),\n    limits = c(-10, max(category_totals$total_sales) * 1.3),\n    expand = c(0.01, 0)\n  ) +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = \"Nut Butter Market Analysis by Product Category\",\n    subtitle = \"Sales comparison across product categories by company\",\n    x = \"Sales ($ Millions)\",\n    y = NULL,\n  ) +\n  # Theme\n  theme(\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    legend.key.size = unit(0.8, \"lines\"),  \n  )\n\n# Combined Charts -----\n\n# Combined Plot -----\ncombined_plot <- (p1 + p2) +\n  plot_layout(widths = c(1, 1))   \n\ncombined_plot <- combined_plot +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text( \n        size = rel(2.2),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(0.95),  \n        family = fonts$subtitle,\n        color = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.65),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    ))\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(\n  combined_plot, type = 'swd', year = 2025, month = 02, exercise = 055,\n  width = 12, height = 8\n  )\n```\n:::\n\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 paletteer_1.6.0 camcorder_0.1.0 janitor_2.2.0  \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      codetools_0.2-20   snakecase_0.11.1  \n[21] htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3       pillar_1.9.0      \n[25] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[29] stringi_1.8.4      rematch2_2.1.2     labeling_0.4.3     rsvg_2.6.1        \n[33] rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1  \n[37] cli_3.6.3          magrittr_2.0.3     utf8_1.2.4         withr_3.0.2       \n[41] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     bit_4.5.0         \n[45] hms_1.1.3          evaluate_1.0.1     knitr_1.49         markdown_1.13     \n[49] gridGraphics_0.5-1 rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1     \n[53] xml2_1.3.6         renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1 \n[57] vroom_1.6.5        jsonlite_1.8.9     R6_2.5.1           fs_1.6.5          \n[61] prismatic_1.1.2    systemfonts_1.1.0 \n```\n\n\n:::\n:::\n\n\n:::\n\n\n#### 9. GitHub Repository\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n \nThe complete code for this analysis is available in [`swd_2025_02-Ex_055.qmd`](https://github.com/poncest/personal-website/tree/master/data_visualizations/SWD%20Challenge/2025/swd_2025_02-Ex_055.qmd).\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n \nData Sources:\n\n1. Data Sources:\n\n   - Storytelling with Data Exercise | go crazy or keep it simple: [Download the data](https://community.storytellingwithdata.com/exercises/go-crazy-or-keep-it-simple)\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}