{
  "hash": "670d993ea011995634e791c654862804",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"From Magic to Mixed Feelings: Analyzing 'One Hundred Years of Solitude' Reviews\"\nsubtitle: \"How readers experience the novel: A deep dive into emotional responses, writing complexity, and thematic connections across different rating categories.\"\ndescription: \"A comprehensive analysis of reader reviews for 'One Hundred Years of Solitude', examining emotional patterns, writing complexity, and common themes through data visualization of Goodreads and LibraryThing reviews.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-01-05\"\ndate-modified: last-modified\n\ncategories: [SWDchallenge, Data Visualization, R Programming]  \ntags: [ggplot2, text-analysis, sentiment-analysis, patchwork, tidytext, web-scraping, book-reviews, literary-analysis, Gabriel-García-Márquez]\nimage: \"thumbnails/swd_2025_01.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                          \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nshare:\n  permalink: \"https://stevenponce.netlify.app/data_visualizations/swd_2024_12.png\"\n  description: \"Analyzing how readers experience Gabriel García Márquez's masterpiece through sentiment analysis and text mining of online reviews.\"\n  linkedin: true\n  twitter: true\n  email: true\n---\n\n\n\n![Data visualization analyzing reviews of One Hundred Years of Solitude with four plots: (1) Distribution of emotional content by rating category, showing positive emotions dominating higher ratings; (2) Emotional flow through reviews, illustrating a mix of joy, trust, and sadness across the text; (3) Review complexity by rating, indicating longer sentences in positive reviews; (4) Common word pairs in reviews, highlighting frequent terms such as 'family', 'buendía', and 'realism'.](swd_2025_01.png){#fig-1}\n\n\n**Update**: This post has been updated based on feedback from the #SWDchallenge community. The changes include:\n- Fixed the chart legends that were inadvertently left out during one iteration.\n\n\n### <mark> __Steps to Create this Graphic__ </mark>\n\n#### 1. Load Packages & Setup \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  camcorder,         # Record Your Plot History\n  textcat,           # N-Gram Based Text Categorization\n  ggdist,            # Visualizations of Distributions and Uncertainty # Visualizations of Distributions and Uncertainty # Visualizations of Distributions and Uncertainty\n  tidytext,          # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n  patchwork          # The Composer of Plots # The Composer of Plots # The Composer of Plots\n) \n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoodreads <- read_csv(\n  here::here(\"data/goodreads_reviews_full.csv\"))\n  \nlibrarything <- read_csv(\n  here::here(\"data/librarything_reviews_full.csv\"))\n\n# Combine the datasets\ncombined_reviews <- bind_rows(goodreads, librarything)\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(goodreads)\nglimpse(librarything)\nglimpse(combined_reviews)\n```\n:::\n\n\n\n#### 4. Tidy Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_reviews_clean <- combined_reviews |>\n  # Combine 'star_rating' and 'numeric_rating' into a single 'rating' column\n  mutate(rating = coalesce(star_rating, numeric_rating)) |>\n  # Convert 'review_date' to Date format\n  mutate(review_date = lubridate::mdy(review_date)) |>\n  # Standardize column names\n  rename(\n    reviewer = reviewer_name,\n    date = review_date,\n    text = review_text\n  ) |>\n  # Clean up review text  \n  mutate(\n    text = str_squish(text), # Remove extra whitespace\n    text = tolower(text),    # Convert to lowercase\n    text = str_replace_all(text, \"[^a-zA-Z0-9 .,!?']\", \"\") # Remove special characters\n  ) |>\n  # Select and reorder columns\n  select(reviewer, date, rating, text, source) |>\n  # Remove duplicate rows\n  distinct() |> \n  mutate(\n    language = textcat(text),             # Add detected language as a new column\n    word_count = str_count(text, \"\\\\S+\")  # Count words in text\n    ) |>  \n  filter(language == \"english\")           # Keep only English reviews\n\n\n# Housekeeping\nrm(goodreads, librarything, combined_reviews)\n\n\n# Prepare text data for sentiment analysis\nreview_sentiments <- combined_reviews_clean |>\n  unnest_tokens(word, text) |>\n  anti_join(stop_words) |>\n  inner_join(get_sentiments(\"nrc\")) |>\n  # Add rating categories for comparison\n  mutate(rating_category = case_when(\n    rating <= 2 ~ \"Negative (1-2)\",\n    rating == 3 ~ \"Neutral (3)\",\n    rating >= 4 ~ \"Positive (4-5)\"\n  ))\n\n# 1. Revised Complexity Analysis\ncomplexity_analysis <- combined_reviews_clean |>    \n  mutate(\n    sentences = str_count(text, \"[.!?]+\"),\n    words_per_sentence = word_count / sentences,\n    rating_category = factor(case_when(\n      rating <= 2 ~ \"Negative (1-2)\",\n      rating == 3 ~ \"Neutral (3)\",\n      rating >= 4 ~ \"Positive (4-5)\"\n    ), levels = c(\"Negative (1-2)\", \"Neutral (3)\", \"Positive (4-5)\"))\n  ) |>\n  filter(is.finite(words_per_sentence))\n\n# 2. Sentiment Flow (keeping existing structure, updating colors)\nsentiment_flow <- review_sentiments |>\n  mutate(\n    theme = case_when(\n      sentiment %in% c(\"joy\", \"trust\", \"anticipation\") ~ \"positive\",\n      sentiment %in% c(\"anger\", \"fear\", \"disgust\") ~ \"negative\",\n      TRUE ~ \"neutral\"\n    )\n  ) |>\n  count(rating_category, theme) |>\n  group_by(rating_category) |>\n  mutate(prop = n/sum(n)) |>\n  ungroup()\n\n# 3. Temporal Pattern (keeping existing structure)\ntemporal_pattern <- review_sentiments |>\n  group_by(reviewer) |>\n  mutate(\n    position = row_number(),\n    position_pct = position/n()\n  ) |>\n  count(position_pct = round(position_pct, 2), sentiment) |> \n  ungroup()\n\n# 4. Simplified Bigram Network\nbigram_graph <- combined_reviews_clean |>\n  unnest_tokens(bigram, text, token = \"ngrams\", n = 2) |>\n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \") |>\n  filter(\n    !word1 %in% stop_words$word,\n    !word2 %in% stop_words$word,\n    !is.na(word1),\n    !is.na(word2)\n  ) |>\n  count(word1, word2, sort = TRUE) |>\n  filter(n >= 4) |>  # Increased threshold\n  slice_head(n = 15)  # Take only top 15 pairs\n```\n:::\n\n\n\n\n#### 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors <- get_theme_colors(palette = c(\"negative\" = \"#E69B95\", \"neutral\"  = \"#709BB0\", \"positive\" = \"#86B8B1\"))\n\n### |-  titles and caption ----\ntitle_text   <- str_glue(\"From Magic to Mixed Feelings: Analyzing 'One Hundred Years of Solitude' Reviews\") \n\nsubtitle_text <- str_glue(\n  \"How readers experience the novel: A deep dive into emotional responses, writing complexity, and thematic\\n\nconnections across different rating categories\",\n  \n  \"\\n\\n**Note**: This analysis is based on a small sample of 42 reviews, collected from Goodreads and LibraryThing\\n\nas of January 3, 2025.\")\n\n# Create caption\ncaption_text <- create_swd_caption(\n  year = 2025,\n  month = \"Jan\",\n  source_text = \"Source: Scrapped from goodreads & librarthing\"\n)\n\n\n# |- fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n            \n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n    base_theme,\n    theme(\n      plot.margin         = margin(t = 10, r = 20, b = 10, l = 20),\n      axis.title.x        = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = colors$text, family = fonts$text, face = \"bold\", hjust = 0.5),\n      axis.title.y        = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = colors$text, family = fonts$text, face = \"bold\", hjust = 0.5),\n      axis.text           = element_text(size = rel(0.8), color = colors$text),\n      axis.line.x         = element_line(color = \"#252525\", linewidth = .3),\n      axis.ticks.x        = element_line(color = colors$text),  \n      axis.title          = element_text(face = \"bold\"),\n      panel.grid.minor    = element_blank(),\n      panel.grid.major    = element_blank(),\n      panel.grid.major.y  = element_line(color = \"grey85\", linewidth = .4)\n      )\n)\n      \n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Sentiment Flow Plot\np1 <- sentiment_flow |>  \n  ggplot(aes(x = rating_category, y = prop, fill = theme)) +\n  geom_col(position = \"fill\", alpha = 0.9) +\n  scale_fill_manual(values = colors$palette) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"<b>Distribution of Emotional Content by Rating</b>\",\n    fill = \"Emotional Theme\",\n    x = \"Rating Category\",\n    y = \"Proportion of Emotions\",\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# 2. Temporal Pattern Plot\np2 <- temporal_pattern |> \n  ggplot(aes(x = position_pct, y = n, fill = sentiment)) +\n  geom_area(position = \"fill\", alpha = 0.7) +\n  scale_fill_brewer(palette = \"RdYlBu\") +\n  scale_x_continuous(\n    labels = scales::percent,\n    breaks = c(0, 0.25, 0.5, 0.75, 1),\n    expand = c(0, 0)\n  ) +\n  scale_y_continuous(\n    labels = scales::percent,\n    expand = c(0, 0)\n  ) +\n  labs(\n    title = \"<b>Emotional Flow Through Reviews</b>\",\n    x = \"Relative Position in Review\",\n    y = \"Proportion of Emotions\",\n    fill = \"Emotion\"\n  ) +\n  theme_minimal() +\n  theme(\n   plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# 3. Complexity Analysis Plot\np3 <- complexity_analysis |> \n  ggplot(aes(x = words_per_sentence, y = rating_category, fill = rating_category)) +\n  stat_gradientinterval(\n    aes(color = after_scale(fill)), \n    point_size = 1.2,\n    alpha = 0.3,\n    point_alpha = 0.7\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Negative (1-2)\" = \"#E69B95\",\n      \"Neutral (3)\"    = \"#709BB0\",\n      \"Positive (4-5)\" = \"#86B8B1\"\n    )\n  ) +\n  labs(\n    title = \"<b>Review Complexity by Rating</b>\",\n    x = \"Words per Sentence\",\n    y = NULL,\n    fill = \"Rating Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    panel.grid.major.y = element_blank(),\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# 4. Bigram Network Plot\np4 <- bigram_graph |> \n  ggplot(aes(x = word1, y = word2)) +\n  geom_point(aes(size = n), color = colors$palette[\"neutral\"], alpha = 0.7) +\n  scale_size_continuous(range = c(2, 6)) +\n  labs(\n    title = \"<b>Common Word Pairs in Reviews</b>\",\n    size = \"Frequency\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    axis.text.x = element_text(hjust = 1),\n    panel.grid = element_line(color = \"grey90\"),\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# Combine plots \ncombined_plots <- (p1 + p2) /\n  (p3 + p4) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_markdown(\n        family = \"title\",\n        face = \"bold\", \n        size = rel(1.7),\n        color = colors$title,\n        margin = margin(b = 10)\n      ),\n      plot.subtitle = element_markdown(\n        family = \"subtitle\",\n        size = rel(1.1),\n        color = colors$subtitle, \n        margin = margin(b = 20),\n        lineheight = 1.1\n      ),\n      plot.caption = element_markdown(\n        family = \"caption\",\n        size = 10, \n        color = colors$caption,\n        margin = margin(t = 20),\n        hjust = 0.5,\n        lineheight = 1.2\n      )\n    )\n  ) &\n  theme(plot.background = element_rect(fill =colors$background, color = NA))\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(combined_plots, type = 'swd', year = 2025, month = 01, \n                    width = 12, height = 12)\n```\n:::\n\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/La_Paz\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 tidytext_0.4.2  ggdist_3.3.2    textcat_1.0-9  \n [5] camcorder_0.1.0 skimr_2.1.5     janitor_2.2.0   here_1.0.1     \n [9] glue_1.8.0      scales_1.3.0    showtext_0.9-7  showtextdb_3.0 \n[13] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[17] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[21] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[25] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     farver_2.1.2         fastmap_1.2.0       \n [4] janeaustenr_1.0.0    digest_0.6.37        timechange_0.3.0    \n [7] lifecycle_1.0.4      rsvg_2.6.1           tokenizers_0.3.0    \n[10] magrittr_2.0.3       compiler_4.4.0       rlang_1.1.4         \n[13] tools_4.4.0          utf8_1.2.4           yaml_2.3.10         \n[16] knitr_1.49           labeling_0.4.3       htmlwidgets_1.6.4   \n[19] curl_6.0.0           bit_4.5.0            RColorBrewer_1.1-3  \n[22] xml2_1.3.6           repr_1.1.7           withr_3.0.2         \n[25] grid_4.4.0           fansi_1.0.6          colorspace_2.1-1    \n[28] cli_3.6.3            rmarkdown_2.29       crayon_1.5.3        \n[31] generics_0.1.3       rstudioapi_0.17.1    textdata_0.4.5      \n[34] tzdb_0.4.0           commonmark_1.9.2     parallel_4.4.0      \n[37] ggplotify_0.1.2      yulab.utils_0.1.8    base64enc_0.1-3     \n[40] vctrs_0.6.5          Matrix_1.7-0         jsonlite_1.8.9      \n[43] slam_0.1-55          gridGraphics_0.5-1   hms_1.1.3           \n[46] bit64_4.5.2          systemfonts_1.1.0    magick_2.8.5        \n[49] gifski_1.32.0-1      codetools_0.2-20     distributional_0.5.0\n[52] stringi_1.8.4        gtable_0.3.6         munsell_0.5.1       \n[55] pillar_1.9.0         rappdirs_0.3.3       htmltools_0.5.8.1   \n[58] R6_2.5.1             rprojroot_2.0.4      vroom_1.6.5         \n[61] evaluate_1.0.1       lattice_0.22-6       markdown_1.13       \n[64] SnowballC_0.7.1      gridtext_0.1.5       tau_0.0-26          \n[67] snakecase_0.11.1     renv_1.0.3           Rcpp_1.0.13-1       \n[70] svglite_2.1.3        xfun_0.49            fs_1.6.5            \n[73] pkgconfig_2.0.3     \n```\n\n\n:::\n:::\n\n\n:::\n\n\n#### 9. GitHub Repository\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n \nThe complete code for this analysis is available in [`swd_2025_01.qmd`](https://github.com/poncest/personal-website/tree/master/data_visualizations/SWD%20Challenge/2025/01_Jan/swd_2025_01.qmd).\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n \nThe web scraping scripts used to collect the review data:\n- Goodreads: [`goodreads_web_scraping.R`](https://github.com/poncest/SWDchallenge/blob/main/2025/01_Jan/goodread_web_scrapping.R)\n- LibraryThing: [`librarything_web_scraping.R`](https://github.com/poncest/SWDchallenge/blob/main/2025/01_Jan/librarything_web_scrapping.R)\n\nData Sources:\n- Goodreads: [One Hundred Years of Solitude Reviews](https://www.goodreads.com/book/show/320.One_Hundred_Years_of_Solitude)\n- LibraryThing: [One Hundred Years of Solitude Reviews](https://www.librarything.com/work/5864)\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}