{
  "hash": "6cab15bc953d09c3a5a8a761bd4e9726",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Thames in Motion: How Flow Shapes Water Quality and Pollution at FRBC\"\nsubtitle: \"Analysis of water quality measurements and cleanup data at Fulham Reach Boat Club, 2023-2024\"\ndescription: \"Exploring how water flow in the Thames influences pollution accumulation, nutrient levels, and water clarity at Fulham Reach Boat Club through analysis of water quality measurements and cleanup data.\"\nauthor: \"Steven Ponce\"\ndate: \"2025-03-02\" \ncategories: [\"MakeoverMonday\", \"Data Visualization\", \"R Programming\", \"2025\"]   \ntags: [\n \"Water Quality\", \"River Thames\", \"Pollution\", \"Environmental Analysis\", \"ggplot2\", \"Tidyverse\", \"Patchwork\", \"Nutrient Dynamics\", \"Turbidity\", \"Flow Rate\", \"Fulham Reach Boat Club\", \"Water Pollution\", \"Cleanup Data\", \"Seasonal Patterns\", \"Urban Rivers\"\n]\nimage: \"thumbnails/mm_2025_10.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: \n      light: [flatly, assets/styling/custom_styles.scss]\n      dark: [darkly, assets/styling/custom_styles_dark.scss]\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\nfilters:\n  - social-share\nshare:                     \n  permalink: \"https://stevenponce.netlify.app/data_visualizations/MakeoverMonday/2025/mm_2025_10.html\"\n  description: \"How does river flow affect water quality and pollution in the Thames? This visualization reveals the relationships between flow rates, rubbish collection, turbidity, and nutrient levels at Fulham Reach Boat Club. #DataViz #MakeoverMonday\"\n  twitter: true\n  linkedin: true\n  email: true\n  facebook: false\n  reddit: false\n  stumble: false\n  tumblr: false\n  mastodon: true\n  bsky: true\n---\n\n\n\n### Original\n\nThe original visualization __River Water Quality__ comes from [data.world.org](https://data.world/makeovermonday/2025-week-10-river-water-quality/workspace/project-summary?agentid=makeovermonday&datasetid=2025-week-10-river-water-quality)\n\n![Original visualization](https://raw.githubusercontent.com/poncest/MakeoverMonday/master/2025/Week_10/original_chart.png)\n\n### Makeover\n\n![The Thames in Motion\" visualization shows three charts analyzing water quality at Fulham Reach Boat Club. Top left: Negative correlation between water flow and rubbish collected. Top right: Turbidity peaks at moderate flow rates with blue-green algae common at low flows. Bottom: Seasonal nitrate and phosphate relationships across four seasons with theoretical thresholds. All charts demonstrate how river flow fundamentally impacts pollution accumulation, water clarity, and nutrient dynamics.](mm_2025_10.png){#fig-1}\n\n### <mark> **Steps to Create this Graphic** </mark>\n\n#### 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n     tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    ggpubr,         # 'ggplot2' Based Publication Ready Plots\n    patchwork,      # The Composer of Plots\n    camcorder       # Record Your Plot History \n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  12,\n    height =  12,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n:::\n\n\n\n#### 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' The raw data for the week MakeoverMonday challenge can be downloaded \n#' here: https://data.world/makeovermonday/2025-week-10-river-water-quality/workspace/project-summary?agentid=makeovermonday&datasetid=2025-week-10-river-water-quality\n#' \n\nfrbc_fresh_water_raw <- read_csv(\n  here::here('data/FRBC FreshWater Watch - Form responses 1.csv')) |> \n  clean_names()\n\nfrbc_river_cleanups_raw  <- read_csv(\n  here::here('data/FRBC River Clean ups - Form responses 1.csv')) |> \n  clean_names()\n```\n:::\n\n\n\n#### 3. Examine the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(frbc_fresh_water_raw)\nskim(frbc_fresh_water_raw)\n\nglimpse(frbc_river_cleanups_raw)\nskim(frbc_river_cleanups_raw)\n```\n:::\n\n\n\n#### 4. Tidy Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  tidy data ----\n# Clean the water quality dataset\nclean_frbc_water <- function(frbc_fresh_water_raw) {\n  frbc_clean <- frbc_fresh_water_raw |>\n    # Convert date to proper format\n    mutate(\n      sample_date = dmy(sample_date),\n      # Create date_time column\n      date_time = if_else(\n        !is.na(sample_date) & !is.na(sample_time),\n        paste(sample_date, sample_time),\n        NA_character_\n      ),\n      date_time = as.POSIXct(date_time, format = \"%Y-%m-%d %H:%M:%S\")\n    ) |>\n    # Clean column names for easier reference\n    rename(\n      participants = total_number_of_participants,\n      organisation = organisation_representing_participants_e_g_school_company,\n      surface_condition = is_there_any_of_the_following_on_the_water_surface,\n      algae_type = what_best_describes_the_dominant_form_of_algae_present,\n      litter_presence = can_you_see_any_litter_including_litter_caught_in_vegetation,\n      plastic_pollution = which_of_the_following_sources_of_plastic_pollution_can_you_see_select_all_that_apply,\n      pollution_sources = are_there_any_water_pollution_sources_in_the_immediate_surroundings_select_all_that_apply,\n      aquatic_life = what_aquatic_life_is_there_evidence_of_select_all_that_apply,\n      recent_rain = has_there_been_any_rain_during_the_last_24_hrous,\n      air_temp_c = air_temperature_degrees_celsius_to_nearest_whole_number,\n      water_temp_c = water_temperature_degrees_celsius_to_nearest_whole_number,\n      flow_ms = water_flow_measurement_m_s,\n      nitrate_fww_mgl = fresh_water_watch_nitrate_test_mg_l,\n      phosphate_fww_mgl = fresh_water_watch_phosphate_mg_l,\n      turbidity_ntu = turbidity_secchi_tube_ntu,\n      water_color = estimate_the_water_colour,\n      nitrate_strip_mgl = test_strip_nitrate_mg_l_ppm,\n      nitrite_strip_mgl = test_strip_nitrite_mg_l_ppm,\n      chlorine_mgl = test_strip_chlorine_mg_l_ppm,\n      hardness_mgl = test_strip_total_hardness_mg_l_ppm,\n      carbonate_mgl = test_strip_carbonate_mg_l_ppm,\n      ph = test_strip_p_h,\n      phosphate_strip_mgl = test_strip_phosphate_mg_l_ppm_precision_laboratories,\n      ecoli_cfu = alert_one_e_coli_reading_cfu_per_100ml\n    ) |>\n    # Extract year, month for easier analysis\n    mutate(\n      year = year(sample_date),\n      month = month(sample_date),\n      month_name = month(sample_date, label = TRUE),\n      season = case_when(\n        month %in% c(12, 1, 2) ~ \"Winter\",\n        month %in% c(3, 4, 5) ~ \"Spring\",\n        month %in% c(6, 7, 8) ~ \"Summer\",\n        month %in% c(9, 10, 11) ~ \"Autumn\",\n        TRUE ~ NA_character_\n      )\n    ) |>\n    # Handle missing values appropriately\n    mutate(across(where(is.numeric), ~if_else(is.na(.), NA_real_, .))) |>\n    # Create a binary rain indicator\n    mutate(rain_binary = ifelse(recent_rain == \"None\", 0, 1))\n  \n  return(frbc_clean)\n}\n\n# Clean the river cleanups dataset\nclean_frbc_cleanups <- function(frbc_river_cleanups_raw) {     \n  frbc_cleanups_clean <- frbc_river_cleanups_raw |>\n    # Convert date to proper format\n    mutate(\n      sample_date = dmy(sample_date),\n      # Create date_time column\n      date_time = if_else(\n        !is.na(sample_date) & !is.na(sample_time),\n        paste(sample_date, sample_time),\n        NA_character_\n      ),\n      date_time = as.POSIXct(date_time, format = \"%Y-%m-%d %H:%M:%S\")\n    ) |>\n    # Clean column names for easier reference\n    rename(\n      participants = total_number_of_participants,\n      organisation = organisation_representing_participants_e_g_school_company,\n      rubbish_sources = which_of_the_following_sources_of_rubbish_can_you_see_select_all_that_apply,\n      rubbish_types = rubbish_types_collected_during_the_clean_up_select_all_that_apply,\n      rubbish_weight_kg = estimated_weight_of_rubbish_collected_in_kilograms_kg\n    ) |>\n    # Extract year, month for easier analysis\n    mutate(\n      year = year(sample_date),\n      month = month(sample_date),\n      month_name = month(sample_date, label = TRUE),\n      season = case_when(\n        month %in% c(12, 1, 2) ~ \"Winter\",\n        month %in% c(3, 4, 5) ~ \"Spring\",\n        month %in% c(6, 7, 8) ~ \"Summer\",\n        month %in% c(9, 10, 11) ~ \"Autumn\",\n        TRUE ~ NA_character_\n      )\n    ) |>\n    # Calculate rubbish per participant\n    mutate(rubbish_per_participant = rubbish_weight_kg / participants)\n  \n  return(frbc_cleanups_clean)\n}\n\n# Function to join the datasets for integrated analysis\njoin_frbc_datasets <- function(frbc_water_clean, frbc_cleanups_clean) {\n  # Create a date-based lookup to find closest water quality measurement for each cleanup\n  frbc_cleanups_clean <- frbc_cleanups_clean |>\n    mutate(cleanup_id = row_number())\n  \n  frbc_water_clean <- frbc_water_clean |>\n    mutate(water_id = row_number())\n  \n  # Extract relevant columns from each dataset with their proper names\n  cleanup_dates <- frbc_cleanups_clean |>\n    select(cleanup_id, cleanup_date = sample_date, year, month)\n  \n  water_data <- frbc_water_clean |>\n    select(\n      water_id, \n      water_date = sample_date, \n      water_temp_c, \n      flow_ms, \n      nitrate_fww_mgl, \n      phosphate_fww_mgl, \n      turbidity_ntu, \n      ph\n    )\n  \n  # Create all combinations of cleanup events and water measurements\n  all_combinations <- expand_grid(\n    cleanup_id = cleanup_dates$cleanup_id,\n    water_id = water_data$water_id\n  )\n  \n  # Calculate time differences\n  closest_measurements <- all_combinations |>\n    left_join(cleanup_dates, by = \"cleanup_id\") |>\n    left_join(water_data, by = \"water_id\") |>\n    mutate(days_diff = abs(as.numeric(difftime(cleanup_date, water_date, units = \"days\")))) |>\n    group_by(cleanup_id) |>\n    slice_min(order_by = days_diff, n = 1) |>\n    ungroup()\n  \n  # Join back to cleanup data\n  joined_data <- frbc_cleanups_clean |>\n    left_join(\n      closest_measurements |>\n        select(\n          cleanup_id, \n          water_id, \n          days_diff, \n          water_date,\n          water_temp_c, \n          flow_ms, \n          nitrate_fww_mgl, \n          phosphate_fww_mgl, \n          turbidity_ntu, \n          ph\n        ),\n      by = \"cleanup_id\"\n    )\n  \n  return(joined_data)\n}\n\n# Cleaned and joined datasets\nfrbc_water_clean <- clean_frbc_water(frbc_fresh_water_raw) \nfrbc_cleanups_clean <- clean_frbc_cleanups(frbc_river_cleanups_raw) \njoined_data <- join_frbc_datasets(frbc_water_clean, frbc_cleanups_clean)\n```\n:::\n\n\n\n#### 5. Visualization Parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors <- get_theme_colors(palette = c())\n  \n### |-  titles and caption ----\ntitle_text <- str_glue(\"The Thames in Motion: How Flow Shapes Water Quality and Pollution at FRBC\")\nsubtitle_text <- str_glue(\"Analysis of water quality measurements and cleanup data at Fulham Reach Boat Club, 2023-2024\")\n\n# Create caption\ncaption_text <- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 10,\n    source_text = \"River Water Quality\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts <- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme <- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme <- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    legend.position = \"top\",\n    legend.title = element_text(size = rel(0.79)),\n    legend.text = element_text(size = rel(0.71)),\n    \n    axis.title = element_text(size = rel(1.14)),  \n    axis.text = element_text(size = rel(0.86)),  \n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", size = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n    \n    strip.text.y = element_text(size = rel(0.7), angle = 0), \n    \n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(1, \"lines\"),  \n    panel.spacing.y = unit(0, \"lines\"),\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n:::\n\n\n\n#### 6. Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  Plot  ----\n# P1. River Flow Influences Pollution Accumulation ----\nflow_rubbish_plot <- joined_data |>\n  filter(!is.na(flow_ms), !is.na(rubbish_weight_kg)) |>  \n  ggplot(aes(x = flow_ms, y = rubbish_weight_kg, color = season)) +\n  # Geoms\n  geom_point(size = 3.5, alpha = 0.85) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"black\", \n              linetype = \"dashed\", fill = \"gray80\", alpha = 0.4) +\n  # Scale\n  scale_x_continuous(\n    breaks = seq(-0.3, 0.5, by = 0.1),\n    labels = function(x) sprintf(\"%.1f\", x)\n  ) +\n  scale_y_continuous(breaks = seq(0, 120, by = 20)) +\n  scale_color_brewer(palette = \"Set1\") +\n  # Labs\n  labs(\n    title = \"River Flow Influences Pollution Accumulation\",\n    subtitle = \"Negative correlation shows higher rubbish collection at lower flow rates\",\n    x = \"Water Flow (m/s)\",\n    y = \"Rubbish Collected (kg)\",\n    color = \"Season\"\n  ) +\n  # Theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"sans\", size = 12),\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_line(color = \"gray95\"),\n    panel.grid.major = element_line(color = \"gray90\"),\n    axis.title = element_text(face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n# Add annotation for statistical significance\n# Get the linear model to extract statistics\nflow_model <- lm(rubbish_weight_kg ~ flow_ms, data = joined_data)\nmodel_p_value <- summary(flow_model)$coefficients[2,4]\nmodel_r_squared <- summary(flow_model)$r.squared\n\n# Format p-value and R-squared for display\np_value_text <- ifelse(model_p_value < 0.001, \"p < 0.001\", paste(\"p =\", round(model_p_value, 3)))\nr_squared_text <- paste(\"R² =\", round(model_r_squared, 2))\n\n# Add the annotation in upper right corner with improved formatting\nflow_rubbish_plot <- flow_rubbish_plot +\n  annotate(\n    \"label\", \n    x = 0.3, \n    y = 110,\n    label = paste(r_squared_text, p_value_text, sep = \"\\n\"),\n    hjust = 1, \n    size = 4,\n    fontface = \"bold\",\n    color = \"black\",\n    fill = \"white\",\n    alpha = 0.7\n  )\n\n\n# P2. Seasonal Nutrient Dynamics in Thames Water ----\nnutrient_scatter_plot <- frbc_water_clean |>\n  filter(!is.na(nitrate_fww_mgl), !is.na(phosphate_fww_mgl)) |>\n  ggplot(aes(x = nitrate_fww_mgl, y = phosphate_fww_mgl, color = season)) +\n  # Geoms\n  geom_point(size = 3.5, alpha = 0.85) +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1.2) +\n  # Scale\n  scale_x_continuous(\n    limits = c(0, 10.5),\n    breaks = seq(0, 10, by = 2.5)\n  ) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, by = 0.25)\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  # Labs \n  labs(\n    title = \"Seasonal Nutrient Dynamics in Thames Water\",\n    subtitle = \"Correlated nutrient levels suggest common sources vary by season\",\n    x = \"Nitrate (mg/L)\",\n    y = \"Phosphate (mg/L)\",\n    color = \"Season\"\n  ) +\n  # Facet \n  facet_wrap(~ season, scales = \"fixed\") +\n  # Theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"sans\", size = 12),\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 12, color = \"gray30\", hjust = 0.5),\n    legend.position = \"none\", \n    panel.grid.minor = element_line(color = \"gray95\"),\n    panel.grid.major = element_line(color = \"gray90\"),\n    axis.title = element_text(face = \"bold\"),\n    strip.text = element_text(face = \"bold\", size = 12), \n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n# Create a dataframe with R² values for each season\nr2_values <- tibble(season = character(), r2 = numeric())\n\nfor(current_season in unique(frbc_water_clean$season)) {\n  # Skip if there's no data for this season\n  season_data <- frbc_water_clean |> \n    filter(season == current_season, !is.na(nitrate_fww_mgl), !is.na(phosphate_fww_mgl))\n  \n  if(nrow(season_data) < 3) {\n    # Add placeholder if not enough data\n    r2_values <- r2_values |> add_row(season = current_season, r2 = NA)\n    next\n  }\n  \n  # Calculate linear model for this season\n  season_model <- lm(phosphate_fww_mgl ~ nitrate_fww_mgl, data = season_data)\n  r2_values <- r2_values |> add_row(\n    season = current_season, \n    r2 = summary(season_model)$r.squared\n  )\n}\n\n# Add a data frame with annotation positions for each season\nannotation_positions <- tibble(\n  season = unique(frbc_water_clean$season),\n  x = rep(2, length(unique(frbc_water_clean$season))),\n  y = rep(0.7, length(unique(frbc_water_clean$season)))\n)\n\n# Join R² values with positions\nannotation_data <- annotation_positions |>\n  left_join(r2_values, by = \"season\") |>\n  filter(!is.na(r2))\n\n# Add annotations programmatically with one per facet\nnutrient_scatter_plot <- nutrient_scatter_plot +\n  geom_label(\n    data = annotation_data,\n    aes(x = x, y = y, label = sprintf(\"R² = %.2f\", r2)),\n    inherit.aes = FALSE,\n    hjust = 0,\n    size = 3.5,\n    fontface = \"bold\",\n    fill = \"white\",\n    alpha = 0.7\n  )\n\n# Add reference line for theoretical threshold\nnutrient_scatter_plot <- nutrient_scatter_plot +\n  geom_hline(\n    yintercept = 0.1, \n    linetype = \"dashed\", \n    color = \"darkred\", \n    alpha = 0.6\n  ) +\n  annotate(\n    \"text\",\n    x = 9.5,\n    y = 0.16,\n    label = \"Theoretical threshold (0.1 mg/L)\",\n    hjust = 1,\n    size = 3,\n    fontface = \"italic\",\n    color = \"darkred\"\n  )\n\n\n# P3. Turbidity vs Water Flow with Algae Type \nturbidity_flow_plot <- frbc_water_clean |>\n  filter(!is.na(flow_ms), !is.na(turbidity_ntu)) |>\n  # Clean up algae type values for better display\n  mutate(\n    algae_type = case_when(\n      is.na(algae_type) ~ \"No data\",\n      algae_type == \"\" ~ \"No data\",\n      TRUE ~ algae_type\n    )\n  ) |>\n  # Handle extreme outliers if present\n  filter(turbidity_ntu <= 100) |>  \n  ggplot(aes(x = flow_ms, y = turbidity_ntu, color = algae_type)) +\n  # Geoms\n  geom_point(size = 3.5, alpha = 0.85) +\n  geom_smooth(\n    method = \"loess\", \n    se = TRUE, \n    color = \"black\", \n    linetype = \"dashed\", \n    fill = \"gray80\", \n    alpha = 0.4,\n    aes(group = 1)\n  ) +\n  # Scale\n  scale_x_continuous(\n    limits = c(-0.3, 0.6),\n    breaks = seq(-0.3, 0.6, by = 0.1),\n    labels = function(x) sprintf(\"%.1f\", x)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 100, by = 20)\n  ) +\n  scale_color_brewer(palette = \"Dark2\") +\n  # Labs\n  labs(\n    title = \"Water Flow Affects Clarity and Algal Growth\",\n    subtitle = \"Different algae types dominate at specific flow conditions\",\n    x = \"Water Flow (m/s)\",\n    y = \"Turbidity (NTU)\",\n    color = \"Algae Type\"\n  ) +\n  # Theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"sans\", size = 12),\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_line(color = \"gray95\"),\n    panel.grid.major = element_line(color = \"gray90\"),\n    axis.title = element_text(face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20),\n    legend.key.size = unit(0.8, \"lines\"),\n    legend.text = element_text(size = 10)\n  ) +\n  # Make the legend more readable with wrapped labels\n  guides(color = guide_legend(nrow = 2, byrow = TRUE))\n\n# Check if there are any blue-green scum algae points\nblue_green_points <- frbc_water_clean |>\n  filter(!is.na(flow_ms), !is.na(turbidity_ntu)) |>\n  filter(algae_type == \"Blue-green scum\")\n\n# Only add the annotation if blue-green points exist\nif(nrow(blue_green_points) > 0) {\n  # Find average position of blue-green scum points\n  avg_x <- mean(blue_green_points$flow_ms)\n  avg_y <- mean(blue_green_points$turbidity_ntu)\n  \n  # Add an annotation at that position\n  turbidity_flow_plot <- turbidity_flow_plot +\n    geom_label(\n      data = data.frame(x = avg_x, y = avg_y + 5),\n      aes(x = x, y = y, label = \"Blue-green algae common\\nat these flow rates\"),\n      inherit.aes = FALSE,\n      size = 3,\n      fontface = \"bold\",\n      color = \"black\",\n      fill = \"white\",\n      alpha = 0.7\n    )\n}\n\n# Add an annotation about how flow affects turbidity\nturbidity_flow_plot <- turbidity_flow_plot +\n  annotate(\n    \"label\",\n    x = 0.3,\n    y = 80,\n    label = \"Moderate flow rates (around 0.3 m/s)\\nshow peak turbidity with lower values\\n at both slow and fast flows\",\n    size = 3,\n    fontface = \"bold\",\n    color = \"black\",\n    fill = \"white\",\n    alpha = 0.7\n  )\n\n# Combined Plots ----\nplot1 <- flow_rubbish_plot \nplot2 <- nutrient_scatter_plot \nplot3 <- turbidity_flow_plot \n\ncombined_plot <- (plot1 + plot3) / plot2 +\n  plot_layout(heights = c(1, 1)) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size   = rel(1.8),\n        family = fonts$title,\n        face   = \"bold\",\n        color  = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size   = rel(0.95),\n        family = fonts$subtitle,\n        color  = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.75),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n```\n:::\n\n\n\n#### 7. Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### |-  plot image ----  \nsave_plot_patchwork(\n  combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 10,\n  width = 12, \n  height = 12\n  )\n```\n:::\n\n\n\n#### 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 patchwork_1.3.0 ggpubr_0.6.0    here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      pacman_0.5.1      \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         ggsignif_0.6.4    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         RColorBrewer_1.1-3\n[21] xml2_1.3.6         repr_1.1.7         abind_1.4-8        withr_3.0.2       \n[25] grid_4.4.0         fansi_1.0.6        colorspace_2.1-1   cli_3.6.3         \n[29] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[33] tzdb_0.4.0         commonmark_1.9.2   splines_4.4.0      parallel_4.4.0    \n[37] ggplotify_0.1.2    yulab.utils_0.1.8  base64enc_0.1-3    vctrs_0.6.5       \n[41] Matrix_1.7-0       jsonlite_1.8.9     carData_3.0-5      car_3.1-3         \n[45] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        rstatix_0.7.2     \n[49] Formula_1.2-5      systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[53] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       munsell_0.5.1     \n[57] pillar_1.9.0       htmltools_0.5.8.1  R6_2.5.1           rprojroot_2.0.4   \n[61] lattice_0.22-6     vroom_1.6.5        evaluate_1.0.1     markdown_1.13     \n[65] backports_1.5.0    gridtext_0.1.5     broom_1.0.7        snakecase_0.11.1  \n[69] renv_1.0.3         Rcpp_1.0.13-1      nlme_3.1-164       svglite_2.1.3     \n[73] mgcv_1.9-1         xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n\n:::\n\n#### 9. GitHub Repository\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for GitHub Repo\n\nThe complete code for this analysis is available in [`mm_2025_10.qmd`](https://github.com/poncest/personal-website/blob/master/data_visualizations/MakeoverMonday/2025/mm_2025_10.qmd).\n\nFor the full repository, [click here](https://github.com/poncest/personal-website/).\n:::\n\n\n#### 10. References\n::: {.callout-tip collapse=\"true\"}\n##### Expand for References\n\n1. Data:\n\n  - Makeover Monday 2025 Week 10: [River Water Quality](https://data.world/makeovermonday/2025-week-10-river-water-quality)\n \n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}