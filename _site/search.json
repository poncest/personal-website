[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "My Featured Projects\nWelcome to the projects section! Here you can find details on the R package(s) I’ve created and standalone visualizations that are not tied to data challenges.\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n    \n  \n\n\n\n\n\n\n\n\n\n\nRWFD Supply Chain Analytics Dashboard\n\n\n\nFebruary 16, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmotional Flow in Bob’s Burgers\n\n\n\nNovember 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nBob’s Burgers Episode Fingerprints by Season\n\n\n\nNovember 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nBob’s Burgers Viewership from Seasons 1 to 14\n\n\n\nOctober 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Rise and Fall of Bob’s Burgers Ratings Across Seasons\n\n\n\nOctober 27, 2024\n\n\n\n\n\n\n\n\n\n\n\nIntroducing the bobsburgersR Package\n\n\n\nOctober 26, 2024\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/standalone_visualizations/sa_2024-11-13.html",
    "href": "projects/standalone_visualizations/sa_2024-11-13.html",
    "title": "Emotional Flow in Bob’s Burgers",
    "section": "",
    "text": "Figure 1: Emotional Flow in Bob’s Burgers Seasons 1–14: A grid of line charts, each showing emotional tone over the progress of each season. Positive tone is above 0, with most seasons ending on an upward trend and mid-season dips in tone. Key patterns are noted below the charts.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  bobsburgersR,      # Bob's Burgers Datasets for Data Visualization\n  tidytext,          # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n  patchwork,         # The Composer of Plots\n  zoo                # S3 Infrastructure for Regular and Irregular Time Series \n)     \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  9,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nbobsburgersR::transcript_data\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(transcript_data)\nskim(transcript_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n# Sentiment analysis - AFINN Sentiment Lexicon\nsentiment_data &lt;- transcript_data |&gt;\n  filter(!is.na(dialogue)) |&gt;\n  unnest_tokens(word, dialogue) |&gt;\n  inner_join(get_sentiments(\"afinn\")) |&gt;\n  group_by(season, episode) |&gt;\n  mutate(\n    position = line / max(line),\n    rolling_sentiment = zoo::rollmean(value, k = 30, fill = NA)\n  ) |&gt;\n  ungroup()\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray30\"     \ntext_col     &lt;- \"gray30\"    \ncaption_col  &lt;- \"gray40\"  \nmain_color   &lt;- \"#2b8cbe\" \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"Source: {{bobsburgersR}}\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Emotional Flow in Bob's Burgers\")\nsubtitle_text &lt;- str_glue(\"Tracking the emotional tone throughout each season (Seasons 1-14)&lt;br&gt;\n                          Based on dialogue sentiment analysis | Values above 0 indicate positive emotional tone\")\ncaption_text  &lt;- str_glue(\"{li} stevenponce &bull; {gh} poncest &bull; #rstats #ggplot2 &bull; {tt}\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Source Sans Pro\", family = \"subtitle\")\nfont_add_google(\"Source Sans Pro\", family = \"text\")  \nfont_add_google(\"Roboto Mono\", family = \"numbers\")  \nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = \"plot\",\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 10, b = 10, l = 10),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.6), color = text_col, family = \"numbers\"),\n  strip.text            = element_text(size = rel(1), face = \"bold\", margin = margin(b = 10), family = \"text\"),\n  panel.grid.major.y    = element_line(color = \"#d3d3d3\", linewidth = 0.2), \n  panel.grid.major.x    = element_blank(), \n  panel.grid.minor      = element_blank(),\n  panel.spacing.x       = unit(2, \"lines\"),  \n  panel.spacing.y       = unit(1, \"lines\"),  \n)\n```\n\n\n6. Plot\n\nShow code```{r}\n### |- title & subtitle plot ----\ntitle_plot &lt;- ggplot() +\n  labs(\n    title = title_text,\n    subtitle = subtitle_text\n  ) +\n  theme_void() +\n  theme(\n    plot.title      = element_text(\n      size          = rel(2.4),\n      family        = \"title\",\n      face          = \"bold\",\n      color         = title_col,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 5)\n    ),\n    plot.subtitle   = element_markdown(\n      size          = rel(1.2),\n      family        = \"subtitle\",\n      color         = subtitle_col,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 15)\n    ),\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin     = margin(10, 10, 0, 10)\n  )\n  \n### |- main plot ---- \nmain_plot &lt;- sentiment_data |&gt;\n  ggplot(aes(x = position, y = rolling_sentiment)) +\n\n  # Geoms\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray60\", linewidth = 0.3) +\n  geom_smooth(\n    color = main_color,\n    se = FALSE,\n    size = 1,\n    span = 0.3\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    labels = scales::percent,\n    breaks = seq(0, 1, 0.5)\n  ) +\n  scale_y_continuous(\n    breaks = seq(-1, 1, 0.5),\n    limits = c(-0.1, 1.1)\n  ) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Season Progress\",\n    y = \"Emotional Tone\"\n  ) +\n\n  # Facet\n  facet_wrap(~season,\n    ncol = 4,\n    labeller = labeller(season = function(x) paste(\"Season\", x))\n  ) +\n\n  # Theme\n  theme(\n    plot.margin = margin(0, 0, 0, 0)\n  )\n\n\n### |- key pattern plot ----\nkey_patterns_plot &lt;- ggplot() +\n  annotate(\n    \"richtext\",\n    x = 0.5,\n    y = 0.5,\n    label = glue::glue(\n      \"&lt;span style='font-family:sans;font-size:11pt;color:{title_col}'&gt;**Key Patterns:**&lt;/span&gt;&lt;br&gt;\n        &lt;span style='font-family:sans;font-size:9pt;color:{text_col}'&gt;\n        • Almost every season ends on an upward trend&lt;br&gt;\n        • Consistent mid-season dips in emotional tone&lt;br&gt;\n        • Overall tone stays mostly positive\n        &lt;/span&gt;\"\n    ),\n    fill = NA,\n    label.color = NA,\n    hjust = 0,\n    vjust = 1.2\n  ) +\n  theme_void() +\n  theme(\n    plot.margin = margin(5, 10, 5, 10)\n  )\n\n\n### |- combined plot ----\n\n# Define layout design with adjusted areas\n\n  # Define layout\ndesign &lt;- c(\n  area(1, 1, 1, 6),      # title area\n  area(2, 1, 5, 6),      # main plot area\n  area(4, 2, 6, 6)       # key patterns area \n)\n  \n  # Combine plots\ncombined_plot &lt;- title_plot + main_plot + key_patterns_plot +\n  plot_layout(\n    design = design,\n    heights = c(0.8, 4, 4, 4, 4, .1),\n    widths = c(1, 1, 1, 1)\n  ) +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n      plot.background = element_rect(fill = bkg_col, color = bkg_col),\n      plot.margin     = margin(10, 10, 10, 10),\n      plot.caption    = element_markdown(\n        size          = rel(0.65),\n        family        = \"caption\",\n        color         = caption_col,\n        lineheight    = 1.1,\n        hjust         = 0.5,\n        margin        = margin(t = 5, b = 5)\n      )\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n# There was some issues between patchwork and ggsave\n\n# Make sure these pkgs are installed\nif (!require(\"ggplotify\")) install.packages(\"ggplotify\")\nif (!require(\"grid\")) install.packages(\"grid\")\n\n# Use Arial (Windows system font)\nwindowsFonts(Arial = windowsFont(\"Arial\"))\n\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\n\n# Convert patchwork plot to grob\nplot_grob &lt;- as.grob(combined_plot)\n\n# Set up the PNG device with proper font handling\npng(\n  filename = here::here(\"projects/standalone_visualizations/sa_2024-11-13.png\"),\n  width = 9, \n  height = 10, \n  units = \"in\", \n  res = 320,\n  type = \"cairo\" \n)\n\n# Enable showtext with specific settings\nshowtext::showtext_begin()\nshowtext::showtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n# Draw the plot\ngrid::grid.draw(plot_grob)\n\n# Clean up\nshowtext::showtext_end()\ninvisible(dev.off())\n\n# Create thumbnail\nmagick::image_read(here::here(\"projects/standalone_visualizations/sa_2024-11-13.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"projects/standalone_visualizations/thumbnails/sa_2024-11-13.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggplotify_0.1.2         zoo_1.8-12              patchwork_1.3.0        \n [4] tidytext_0.4.2          bobsburgersR_0.0.0.9000 glue_1.8.0             \n [7] scales_1.3.0            skimr_2.1.5             janitor_2.2.0          \n[10] showtext_0.9-7          showtextdb_3.0          sysfonts_0.8.9         \n[13] ggtext_0.1.2            lubridate_1.9.3         forcats_1.0.0          \n[16] stringr_1.5.1           dplyr_1.1.4             purrr_1.0.2            \n[19] readr_2.1.5             tidyr_1.3.1             tibble_3.2.1           \n[22] ggplot2_3.5.1           tidyverse_2.0.0         pacman_0.5.1           \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      janeaustenr_1.0.0 \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] tokenizers_0.3.0   magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6       \n[13] tools_4.4.0        utf8_1.2.4         yaml_2.3.10        knitr_1.49        \n[17] labeling_0.4.3     htmlwidgets_1.6.4  curl_6.0.0         here_1.0.1        \n[21] xml2_1.3.6         camcorder_0.1.0    repr_1.1.7         withr_3.0.2       \n[25] fansi_1.0.6        colorspace_2.1-1   cli_3.6.4          rmarkdown_2.29    \n[29] generics_0.1.3     rstudioapi_0.17.1  textdata_0.4.5     tzdb_0.5.0        \n[33] commonmark_1.9.2   splines_4.4.0      base64enc_0.1-3    vctrs_0.6.5       \n[37] yulab.utils_0.1.8  Matrix_1.7-0       jsonlite_1.8.9     gridGraphics_0.5-1\n[41] hms_1.1.3          systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[45] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       munsell_0.5.1     \n[49] pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1          \n[53] rprojroot_2.0.4    evaluate_1.0.1     lattice_0.22-6     markdown_1.13     \n[57] SnowballC_0.7.1    gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3        \n[61] Rcpp_1.0.13-1      nlme_3.1-164       svglite_2.1.3      mgcv_1.9-1        \n[65] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/standalone_visualizations/sa_2024-10-28.html",
    "href": "projects/standalone_visualizations/sa_2024-10-28.html",
    "title": "Bob’s Burgers Viewership from Seasons 1 to 14",
    "section": "",
    "text": "Figure 1: Bob’s Burgers Viewership by Season: A dot plot highlighting the highest viewed episode for each season from 1 to 14. Season 1’s ‘Human Flesh’ episode had the highest viewership with 9.38 million viewers.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  ggrepel,           # Automatically Position Non-Overlapping Text Labels with'ggplot2' \n  ggbeeswarm,        # Categorical Scatter (Violin Point) Plots\n  bobsburgersR       # Bob's Burgers Datasets for Data Visualization\n)    \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nbobsburgersR::imdb_wikipedia_data\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(imdb_wikipedia_data)\nskim(imdb_wikipedia_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n## |- highlight  data ----\n\nhighlight_data &lt;- imdb_wikipedia_data |&gt;\n  group_by(season) |&gt;\n  filter(wikipedia_viewers == max(wikipedia_viewers, na.rm = TRUE)) |&gt;\n  slice(1) |&gt;\n  ungroup() |&gt;\n  mutate(\n    label = paste0(\"Ep: \", episode, \" - \", imdb_title, \"\\nViewers: \", wikipedia_viewers, \" M\")\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"     \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette &lt;- c(\"#b358a6\", \"#762a83\", \"#4d004b\", \"grey50\") \n\n### |-  titles and caption ----\n\n# icons\ntt &lt;- str_glue(\"Source: {{bobsburgersR}}\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Bob's Burgers Viewership from Seasons 1 to 14\")\nsubtitle_text &lt;- str_glue(\"Highlighting the highest viewed episode per season, based on Wikipedia viewership data.\")\ncaption_text  &lt;- str_glue(\"{li} stevenponce &bull; {gh} poncest &bull; #rstats #ggplot2 &bull; {tt}\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = 'plot',\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n  panel.grid.major.y    = element_line(color = \"#e0e0e0\", linewidth = 0.6, linetype = 'dotted'),\n  panel.grid.major.x    = element_line(color = \"#d3d3d3\", linewidth = 0.6, linetype = 'dotted'),\n  panel.grid.minor      = element_blank()\n)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\np &lt;- ggplot(imdb_wikipedia_data, \n            aes(x = wikipedia_viewers, y = factor(season, levels = rev(unique(season))))) +\n\n  # Geoms\n  ggbeeswarm::geom_beeswarm(cex = 1, color = col_palette[2], size = 2, \n                            alpha = 0.5, shape = 21, na.rm = TRUE) +\n  ggbeeswarm::geom_beeswarm(\n    data = highlight_data,\n    aes(color = factor(ifelse(season == 1, \"highlight\", \"normal\"))),\n    cex = 1, size = 2.1, alpha = 0.75, shape = 19, na.rm = TRUE\n  ) +\n  geom_segment(\n    data = highlight_data,\n    aes(\n      x = wikipedia_viewers, xend = wikipedia_viewers + 0.5,\n      y = as.numeric(factor(season, levels = rev(unique(season)))), yend = as.numeric(factor(season, levels = rev(unique(season))))\n    ),\n    color = col_palette[4], size = 0.2, linetype = \"dotted\"\n  ) +\n  geom_text(\n    data = highlight_data, aes(\n      x = wikipedia_viewers + 0.6, y = factor(season, levels = rev(unique(season))),\n      label = label, lineheight = 1, color = factor(ifelse(season == 1, \"highlight\", \"normal\"))\n    ),\n    size = 3, hjust = 0\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    breaks = seq(0, 10, by = 2),\n    limits = c(1, 12)\n  ) +\n  scale_y_discrete() +\n  scale_color_manual(values = c(\"highlight\" = col_palette[3], \"normal\" = col_palette[4])) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n\n  labs(\n    x = \"US Viewers (in millions)\",\n    y = \"Season\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n  \n  # Theme\n  theme(\n    plot.margin  = margin(10, 20, 10, 20),\n    plot.title   = element_markdown(\n      size       = rel(1.6),\n      family     = \"title\",\n      face       = \"bold\",\n      color      = title_col,\n      lineheight = 1.1,\n      margin     = margin(t = 10, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size       = rel(0.85),\n      family     = \"subtitle\",\n      color      = subtitle_col,\n      lineheight = 1.1,\n      margin     = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size       = rel(0.65),\n      family     = \"caption\",\n      color      = caption_col,\n      lineheight = 1.1,\n      hjust      = 0.5,\n      halign     = 0.5,\n      margin     = margin(t = 5, b = 5)\n    ),\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \n\n# Save the plot as PNG\nggsave(\n  filename = here::here(\"projects/standalone_visualizations/sa_2024-10-28.png\"), \n  plot = p,\n  width = 8, height = 8, units = \"in\", dpi = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"projects/standalone_visualizations/sa_2024-10-28.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"projects/standalone_visualizations/thumbnails/sa_2024-10-28.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] bobsburgersR_0.0.0.9000 ggbeeswarm_0.7.2        ggrepel_0.9.6          \n [4] glue_1.8.0              scales_1.3.0            skimr_2.1.5            \n [7] janitor_2.2.0           showtext_0.9-7          showtextdb_3.0         \n[10] sysfonts_0.8.9          ggtext_0.1.2            lubridate_1.9.3        \n[13] forcats_1.0.0           stringr_1.5.1           dplyr_1.1.4            \n[16] purrr_1.0.2             readr_2.1.5             tidyr_1.3.1            \n[19] tibble_3.2.1            ggplot2_3.5.1           tidyverse_2.0.0        \n[22] pacman_0.5.1           \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      beeswarm_0.4.0    xfun_0.49         htmlwidgets_1.6.4\n [5] tzdb_0.5.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] vipor_0.4.7       htmltools_0.5.8.1 yaml_2.3.10       pillar_1.9.0     \n[25] camcorder_0.1.0   magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        here_1.0.1        colorspace_2.1-1 \n[37] cli_3.6.4         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[41] withr_3.0.2       timechange_0.3.0  rmarkdown_2.29    ragg_1.3.3       \n[45] hms_1.1.3         evaluate_1.0.1    knitr_1.49        markdown_1.13    \n[49] rlang_1.1.6       gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6       \n[53] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9   \n[57] R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/r_packages/2024-10-26-introducing-bobsburgersr.html",
    "href": "projects/r_packages/2024-10-26-introducing-bobsburgersr.html",
    "title": "Introducing the bobsburgersR Package",
    "section": "",
    "text": "Hex sticker for the { bobsburgersR } R package"
  },
  {
    "objectID": "projects/r_packages/2024-10-26-introducing-bobsburgersr.html#introducing-the-bobsburgersr-package",
    "href": "projects/r_packages/2024-10-26-introducing-bobsburgersr.html#introducing-the-bobsburgersr-package",
    "title": "Introducing the bobsburgersR Package",
    "section": "Introducing the bobsburgersR Package",
    "text": "Introducing the bobsburgersR Package\nI’m excited to share my latest project: an R package called bobsburgersR! If you’re a fan of the animated sitcom Bob’s Burgers or enjoy exploring TV show data, this package might be perfect for you.\nbobsburgersR is a collection of datasets related to Bob’s Burgers, covering seasons 1-14. It offers access to a wealth of data about the show, including episode ratings, character dialogues, and more. My goal with this package is to make it easy for anyone—from data enthusiasts to die-hard fans—to explore the trends and insights hidden within the series.\nWith bobsburgersR, you can analyze everything from how ratings have changed over time to various aspects of character interactions and dialogues. I see it as a way to dive into the show’s universe, using data to tell stories and reveal interesting patterns.\nYou can install bobsburgersR directly from GitHub with:\n# install.packages(\"devtools\")\ndevtools::install_github(\"poncest/bobsburgersR\")\nThe package is now complete and ready for use, packed with information that can lead to fun analyses. Check it out, and let me know what cool insights you discover!\nI’ll update bobsburgersR with new data and features as Bob’s Burgers releases new episodes. Stay tuned for more!\n\nFeel free to explore the package and share your feedback or ideas for what else you’d like to see. You can find the repository here."
  },
  {
    "objectID": "data_visualizations.html",
    "href": "data_visualizations.html",
    "title": "Data Visualizations",
    "section": "",
    "text": "Data Visualization Portfolio\nWelcome to my data visualization gallery. Here you’ll find a collection of visualizations created using R, primarily focusing on #TidyTuesday, #30DayChartChallenge, #SWDchallenege, and #MakeoverMonday challenges and personal projects.\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nScience, Health, and History: The Big Three of Misconceptions\n\n\n\nJuly 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Evolution of Diesel’s Premium Over Gasoline\n\n\n\nJune 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Measles Surveillance: Quality vs Disease Burden\n\n\n\nJune 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI Catalog Maintenance Patterns\n\n\n\nJune 17, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiversity in Federal Judicial Appointments Has Increased Over Time\n\n\n\nJune 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nProject Gutenberg: Language Patterns in Author Longevity\n\n\n\nJune 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Stakes for U.S. Truck Manufacturing Under Shifting Federal Policy\n\n\n\nJune 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom 17x Industry Benchmark to Optimized Efficiency: A Data-Driven Supplier Strategy\n\n\n\nJune 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nD&D Encounter Design: Celestials Dominate Skill-Based Challenges\n\n\n\nMay 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nClient Contact Program: Uneven Success Demands Strategic Response\n\n\n\nMay 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Enduring Legacy of PC Gaming Excellence\n\n\n\nMay 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nSydney Beaches: Water Quality Reliability\n\n\n\nMay 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nReligious Representation Gap: Migrants vs. General Population\n\n\n\nMay 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nVolatility and Change Patterns in Mount Vesuvius Seismic Activity (2011-2023)\n\n\n\nMay 10, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Uneven Landscape of Asian Restaurants in the U.S.\n\n\n\nMay 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis of 1,041 Terminated NSF Grants Totaling $613.26M\n\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisaster Death Distributions: 1950-2020\n\n\n\nMay 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nTHE HIDDEN UNCERTAINTY\n\n\n\nApril 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nMeteorite Mass Distribution and Uncertainty\n\n\n\nApril 29, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nTopic-Speaker Bipartite Network for useR! 2025 Conference\n\n\n\nApril 29, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nGender Gap in Educational Exclusion by Region\n\n\n\nApril 28, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrump Approval Ratings Across Selected Demographic Groups\n\n\n\nApril 28, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nS&P 500 Price Uncertainty and Noise\n\n\n\nApril 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nUncertainty in Cardiovascular Disease Prevalence Across the U.S.\n\n\n\nApril 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA Team Risk Matrix (2023-24 Season)\n\n\n\nApril 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nGender Differences in Diabetes Rates Vary Sharply by Region\n\n\n\nApril 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nPharmaceutical Giants Stock Performance (2018-2025)\n\n\n\nApril 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nStellar Observations by the Hubble Space Telescope\n\n\n\nApril 22, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nRise and Fall of Trilobites: Fossil Records Over Time\n\n\n\nApril 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Shifting Speeds of Urbanization (1960-2023)\n\n\n\nApril 20, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nApril 20th Fatal Crashes Compared to Yearly Average (1992-2016)\n\n\n\nApril 20, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA 3-Point Shooting Efficiency: Top 4 Teams\n\n\n\nApril 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nRelationship Between Peak Hour and Daily Traffic\n\n\n\nApril 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nBirds of a Feather: How NBA’s Bird Teams Show Identical Home Nest Advantage\n\n\n\nApril 17, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA 2023-2024: High Usage Players with Below-Average Efficiency\n\n\n\nApril 16, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nMorphological Separation in Bill Dimensions Across Penguin Species\n\n\n\nApril 16, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Complicated Relationship Between Assists and Turnovers\n\n\n\nApril 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWin Percentage by Player Combinations and Playstyle in 2023-2024 Season\n\n\n\nApril 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA Player Archetypes: The Relationship Between Defense and 3-Point Shooting\n\n\n\nApril 13, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nTraffic Volume Distribution Analysis Across California Counties\n\n\n\nApril 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA Teams: Distribution of Assist-to-Turnover Ratios\n\n\n\nApril 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistribution of Offensive Rebounding Specialization by Position (2024 NBA Season)\n\n\n\nApril 10, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA 2023-24: Players with the Highest and Lowest Impact\n\n\n\nApril 9, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistribution of Points Per Game: Starters vs. Bench Players\n\n\n\nApril 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nShooting Performance Variability Across NBA Teams (2023-24)\n\n\n\nApril 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparison of NBA Stars’ Shooting Efficiency (2023-2024)\n\n\n\nApril 6, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nChina’s Rise: GDP Ranking Changes (1960-2020)\n\n\n\nApril 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nPreserving Public Health Knowledge: CDC Dataset Categories at Risk\n\n\n\nApril 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nRadial Warmth: San Juan’s Temperature Profile\n\n\n\nApril 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nDigital Divide Narrows: Internet Adoption Across Generations\n\n\n\nApril 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nCitrus: The Only Effective Treatment for Scurvy (1757)\n\n\n\nApril 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nFocus to Collaboration Ratio Across Industries\n\n\n\nMarch 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvolution of Business Priorities in Amazon’s Annual Reports\n\n\n\nMarch 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpeed Distribution by Pokémon Type\n\n\n\nMarch 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nRetail Department Performance Analysis: Growth and Volatility\n\n\n\nMarch 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nEl Niño Impact on Regional Precipitation\n\n\n\nMarch 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrowth Form Patterns Across Palm Subfamilies\n\n\n\nMarch 17, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Transformation of the Global Electric Vehicle Market (2013-2023)\n\n\n\nMarch 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Tale of Pixar’s Evolution: Duration and Reception\n\n\n\nMarch 10, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Thames in Motion: How Flow Shapes Water Quality and Pollution at FRBC\n\n\n\nMarch 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nYouth Vaping Crisis: Policy Intervention Failure\n\n\n\nMarch 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrueNut’s Market Dominance in Powdered Nut Butter\n\n\n\nFebruary 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLong Beach Animal Shelter: Stay Duration and Outcomes\n\n\n\nFebruary 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nRacial and Ethnic Disparities in Reproductive Medicine Research (2010-2023)\n\n\n\nFebruary 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation Growth Patterns Across Regions\n\n\n\nFebruary 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Spectrum of Frequencies in Nature and Technology\n\n\n\nFebruary 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeographic Distribution of U.S. Law Enforcement Agencies\n\n\n\nFebruary 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost Popular Valentine’s Candy Across U.S. States (2024)\n\n\n\nFebruary 9, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nCDC Dataset Purge: A Timeline of Public Health Data Removal\n\n\n\nFebruary 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nBritain’s Power Mix: A Daily Energy Snapshot\n\n\n\nFebruary 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Simpsons: Character Dialogue Analysis (2010-2016)\n\n\n\nFebruary 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nFive Major U.S. Fresh Vegetable Crops (2000-2022)\n\n\n\nFebruary 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Happiness Report 2024\n\n\n\nJanuary 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nNearly Half of U.S. Counties Face Increased Water Insecurity\n\n\n\nJanuary 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Paradox of Himalayan Climbing Expeditions\n\n\n\nJanuary 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnergy Drink Brand Comparison: Activity Support Drives High Scores\n\n\n\nJanuary 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack Connections at posit::conf (2023-2024)\n\n\n\nJanuary 13, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nAid Worker Security: A Global Analysis of Risks and Incidents\n\n\n\nJanuary 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Magic to Mixed Feelings: Analyzing ‘One Hundred Years of Solitude’ Reviews\n\n\n\nJanuary 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Holidays Associated with Lower Air Traffic Volatility in Larger Markets\n\n\n\nDecember 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Arcane Hierarchy: D&D Spellcasting Classes Compared\n\n\n\nDecember 8, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 20 Perfume Brands Ranked by Average Rating and Portfolio Size\n\n\n\nDecember 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgress in Reducing Working Poverty Rates in Africa (2000-2019)\n\n\n\nDecember 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nTraffic Flow Analysis: A64 Road, May 2021\n\n\n\nNovember 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nBorder Encounters by Demographic and Authority Type\n\n\n\nNovember 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nBob’s Burgers: Questioning Nature of Dialogue\n\n\n\nNovember 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Architecture of Global Country Codes\n\n\n\nNovember 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nRise and Fall of Democracies and Non-Democracies (1950-2020)\n\n\n\nNovember 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nEurovision: Sweden and Ireland Lead with the Most Wins\n\n\n\nNovember 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonster Movies by Decade and Title Type\n\n\n\nOctober 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nExploring Relationships Among CIA Factbook Variables\n\n\n\nOctober 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrca Encounter Observations: Leading Vessels\n\n\n\nOctober 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nWakeUp Coffee Sales Summary\n\n\n\nOctober 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nRadar Charts of Species Categories by National Park\n\n\n\nOctober 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nAstronaut Mission Trends and Career Paths: A Journey from Nationality to Occupation\n\n\n\nOctober 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhite and Black Chess Ratings: A Distribution Analysis\n\n\n\nSeptember 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nGender Representation in the International Mathematical Olympiad\n\n\n\nSeptember 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacter Interaction Networks in Shakespeare’s Plays\n\n\n\nSeptember 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistribution of College Attendance Rates by Selectivity Tier\n\n\n\nSeptember 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 20 Responses to Key Questions in the 2024 Stack Overflow Survey\n\n\n\nSeptember 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nHydrogen Projects by Country and Status\n\n\n\nSeptember 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nExploring Individual Word Trends Across 27 Seasons of Power Rangers\n\n\n\nAugust 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nAge at Marriage of Kings and Consorts\n\n\n\nAugust 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisitor Distribution by Start Month at World’s Fairs\n\n\n\nAugust 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nJudo’s Elite: Medal Achievements of the Top 10 Nations at the Summer Olympics Games, 1964 - 2016\n\n\n\nAugust 7, 2024\n\n\n\n\n\n\nNo matching items\n\n  \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_19.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_19.html",
    "title": "Volatility and Change Patterns in Mount Vesuvius Seismic Activity (2011-2023)",
    "section": "",
    "text": "Figure 1: This visualization shows volatility and change patterns in Mount Vesuvius seismic activity from 2011 to 2023 through three related charts. The top chart displays waiting times between consecutive earthquakes on a logarithmic scale, showing that most events occur within 2-20 hours of each other, with a median of 2.6 hours. The middle chart shows month-to-month percentage changes in seismic activity, with nearly balanced increases (72 months, 50%) and decreases (73 months, 50%), suggesting a dynamic but stable volcanic system. The bottom chart presents long-term patterns with monthly counts, a 6-month moving average, and a trend line, revealing multi-year cycles despite short-term volatility.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  scales,        # Scale Functions for Visualization\n  glue,          # Interpreted String Literals\n  patchwork      # The Composer of Plots\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  12,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 19)\n\nvesuvius_raw &lt;- tt$vesuvius |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(vesuvius_raw)\nskimr::skim(vesuvius_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\nvesuvius &lt;- vesuvius_raw |&gt;\n  mutate(\n    date = as.Date(time),\n    year = year(time),\n    month = month(time),\n    day = day(time),\n    hour = hour(time),\n    weekday = wday(time, label = TRUE),\n    # Create a month-year for time series\n    month_year = floor_date(time, \"month\"),\n  )\n\n# P1: Monthly event counts with  trend decomposition -----\nmonthly_counts &lt;- vesuvius |&gt;\n  count(year, month) |&gt;\n  mutate(date = make_date(year, month, 1))\n\n# Calculate a 6-month moving average\nmonthly_counts &lt;- monthly_counts |&gt;\n  arrange(date) |&gt;\n  mutate(moving_avg = zoo::rollmean(n, k = 6, fill = NA, align = \"right\"))\n\n# P2: Time-to-next events analysis -----\nevents_ordered &lt;- vesuvius |&gt;\n  arrange(time) |&gt;\n  mutate(\n    next_event_time = lead(time),\n    hours_to_next = as.numeric(difftime(next_event_time, time, units = \"hours\"))\n  ) |&gt;\n  filter(!is.na(hours_to_next))\n\n# Calculate statistics\nmedian_time &lt;- median(events_ordered$hours_to_next, na.rm = TRUE)\nmean_time &lt;- mean(events_ordered$hours_to_next, na.rm = TRUE)\ncv &lt;- sd(events_ordered$hours_to_next, na.rm = TRUE) / mean_time\n\n# P3: Event rate change analysis ----\nevents_per_month &lt;- vesuvius |&gt;\n  count(year, month) |&gt;\n  mutate(date = make_date(year, month, 1)) |&gt;\n  arrange(date) |&gt;\n  mutate(\n    prev_month = lag(n),\n    pct_change = (n - prev_month) / prev_month * 100,\n    change_type = ifelse(pct_change &gt; 0, \"Increase\", \"Decrease\")\n  ) |&gt;\n  filter(!is.na(pct_change)) |&gt;\n  # Limit extreme values for better visualization (cap at ±200%)\n  mutate(pct_change = pmin(pmax(pct_change, -200), 200))\n\n# Calculate statistics\nincrease_count &lt;- sum(events_per_month$change_type == \"Increase\")\ndecrease_count &lt;- sum(events_per_month$change_type == \"Decrease\")\ntotal_months &lt;- nrow(events_per_month)\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"gray_line\" = \"#808080\",\n        \"moving_avg\" = \"#21908C\", \n        \"trend_line\" = \"#440154\",\n        \"confidence\" = \"#440154\",\n        \"positive_change\" = \"#3B528B\",\n        \"negative_change\" = \"#5DC863\",\n        \"median_line\" = \"#FDE725\",\n        \"hist_bar\" = \"#21908CFF\", \n        \"Decrease\" = \"#21908CFF\", \n        \"Increase\" = \"#3B528B\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Volatility and Change Patterns in Mount Vesuvius Seismic Activity (2011-2023)\")\n\nsubtitle_text &lt;- str_glue(\"Analysis reveals dynamic behavior with high variability across different time scales\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 19,\n  source_text =  \"Italian Istituto Nazionale di Geofisica e Vulcanologia (INGV)\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling\n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), color  = colors$title, margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$subtitle, size = rel(0.78), margin = margin(b = 20)),\n\n    # Axis elements\n    axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n    panel.grid.major = element_line(color = \"gray80\", linewidth = 0.05),\n\n    # Legend elements\n    legend.position = \"top\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Style facet labels\n    strip.text = element_text(size = rel(0.75), face = \"bold\",\n                              color = colors$title, margin = margin(b = 8, t = 8)\n    ),\n\n    # Add spacing\n    panel.spacing = unit(1.1, \"lines\"),\n    strip.background = element_rect(fill = \"#e0e0e0\", color = NA),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |-  Plot  ----\n# P1: Monthly event counts with  trend decomposition -----\np1 &lt;- ggplot(monthly_counts, aes(x = date)) +\n  # Geoms\n  geom_hline(yintercept = seq(0, 200, by = 50), color = \"gray90\", linewidth = 0.3) +\n  geom_line(aes(y = n), color = colors$palette[\"gray_line\"], linewidth = 0.5) +\n  geom_line(aes(y = moving_avg), color = colors$palette[\"moving_avg\"], linewidth = 1.2) +\n  geom_smooth(aes(y = n),\n    method = \"loess\", span = 0.3, color = colors$palette[\"trend_line\"],\n    se = TRUE, fill = colors$palette[\"confidence\"], alpha = 0.15\n  ) +\n  # Annotate\n  annotate(\"rect\", \n    xmin = as.Date(\"2011-12-01\"), xmax = as.Date(\"2014-01-01\"), \n    ymin = 100, ymax = 210, \n    fill = \"white\", color = \"gray80\", alpha = 0.8\n    ) +\n  annotate(\"text\",\n    x = as.Date(\"2012-01-01\"), y = 190,\n    label = \"Monthly counts\", color = colors$palette[\"gray_line\"], hjust = 0, size = 3.5, fontface = \"plain\"\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2012-01-01\"), y = 155,\n    label = \"6-month average\", color = colors$palette[\"moving_avg\"], hjust = 0, size = 3.5, fontface = \"plain\"\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2012-01-01\"), y = 120,\n    label = \"Long-term trend\", color = colors$palette[\"trend_line\"], hjust = 0, size = 3.5, fontface = \"plain\"\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2023-01-01\"), y = 20,\n    label = \"Purple band shows 95% confidence interval\", color = colors$palette[\"confidence\"],\n    hjust = 0.5, size = 3, fontface = \"italic\"\n  ) +\n  # Scales\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  scale_y_continuous(breaks = seq(0, 200, by = 50)) +\n  # Labs\n  labs(\n    title = \"Long-term Patterns in Seismic Activity\",\n    subtitle = \"Monthly event counts with smoothing reveal cyclical patterns.\\nDespite short-term volatility, seismic activity follows multi-year cycles\",\n    x = NULL,\n    y = \"Number of Events\"\n  )\n\n# P2: Time-to-next events analysis -----\np2 &lt;- ggplot(events_ordered, aes(x = hours_to_next)) +\n  # Geoms\n  geom_histogram(\n    aes(y = after_stat(count)),\n    breaks = c(0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000),\n    fill = colors$palette[\"hist_bar\"], color = \"#333333\", alpha = 0.9\n  ) +\n  geom_vline(\n    xintercept = median_time,\n    linetype = \"dashed\",\n    color = colors$palette[\"median_line\"], \n    linewidth = 1\n  ) +\n  # Annotate\n  annotate(\"label\",\n    x = 200, y = 1000,\n    label = paste0(\n      \"Median: \", round(median_time, 1), \" hours\\n\",\n      \"Mean: \", round(mean_time, 1), \" hours\\n\",\n      \"Coef. of Variation: \", round(cv, 2)\n    ),\n    color = \"black\", fill = \"white\", alpha = 0.8, size = 3.5, fontface = \"plain\"\n  ) +\n  # Scales\n  scale_x_log10(\n    breaks = c(0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000),\n    labels = c(\"0.1\", \"0.2\", \"0.5\", \"1\", \"2\", \"5\", \"10\", \"20\", \"50\", \"100\", \"200\", \"500\", \"1000\"),\n    limits = c(0.05, 2000)\n  ) +\n  # Labs\n  labs(\n    title = \"Waiting Times Between Consecutive Events\",\n    subtitle = \"Distribution reveals characteristic timing between earthquakes.\\nHigh CoV indicates clustered, non-random earthquake timing\",\n    x = \"Hours to Next Event (log scale)\",\n    y = \"Frequency\"\n  )\n\n# P3: Event rate change analysis ----\np3 &lt;- ggplot(events_per_month, aes(x = date, y = pct_change, fill = change_type)) +\n  # Geoms\n  geom_hline(yintercept = 0, linetype = \"solid\", color = \"black\", linewidth = 0.7) +\n  geom_hline(yintercept = c(-50, 50, 100, -100), linetype = \"dotted\", color = \"gray70\") +\n  geom_col(width = 25) +\n\n  # Annotate \n  annotate(\"rect\",\n    xmin = as.Date(\"2022-04-01\"), xmax = as.Date(\"2022-07-01\"),\n    ymin = 175, ymax = 190,\n    fill = colors$palette[\"Increase\"], \n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2022-08-01\"), y = 180,\n    label = paste0(\"Increases: \", increase_count, \" months (\", round(increase_count / total_months * 100), \"%)\"),\n    color = \"black\", hjust = 0, size = 3.5, fontface = \"plain\"\n  ) +\n  annotate(\"rect\",\n    xmin = as.Date(\"2022-04-01\"), xmax = as.Date(\"2022-07-01\"),\n    ymin = -100, ymax = -85,\n    fill = colors$palette[\"Decrease\"]\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2022-08-01\"), y = -95,\n    label = paste0(\"Decreases: \", decrease_count, \" months (\", round(decrease_count / total_months * 100), \"%)\"),\n    color = \"black\", hjust = 0, size = 3.5, fontface = \"plain\"\n  ) +\n  annotate(\"text\",\n    x = median(events_per_month$date), y = -95,     \n    label = \"Values capped at ±200% for visualization clarity\",\n    color = \"gray30\", size = 3, fontface = \"italic\"\n ) +\n  # Scales \n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Change\"\n  ) +\n  scale_x_date(\n    date_breaks = \"2 year\",\n    date_labels = \"%Y\",\n    limits = c(min(events_per_month$date), max(events_per_month$date))\n  ) +\n  scale_y_continuous(\n    breaks = c(-200, -100, -50, 0, 50, 100, 200),\n    labels = c(\"-200%\", \"-100%\", \"-50%\", \"0%\", \"+50%\", \"+100%\", \"+200%\")\n  ) +\n  # Labs \n  labs(\n    title = \"Month-to-Month Volatility in Seismic Activity\",\n    subtitle = \"Percentage change shows high variability between consecutive months.\\nNearly balanced increases/decreases suggest a dynamic but stable volcanic system\",\n    x = NULL,\n    y = \"Percent Change\"\n  ) +\n  # Theme\n  theme(\n    plot.subtitle = element_text(lineheight = 1.2),\n    legend.position = \"none\"\n  )\n  \n# Combined Plot ----\ncombined_plot &lt;- (p2 / p3 / p1) +\n    plot_layout(\n        heights = c(0.9, 0.9, 1.3),  \n        ) \n\ncombined_plot &lt;- combined_plot +    \n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                size = rel(1.4),\n                family = fonts$title,\n                face = \"bold\",\n                color = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size = rel(0.95),\n                family = fonts$subtitle,\n                color = alpha(colors$subtitle, 0.9),\n                lineheight = 1.2,\n                margin = margin(t = 5, b = 10)\n            ),\n            plot.caption = element_markdown(\n                size = rel(0.6),\n                family = fonts$caption,\n                color = colors$caption,\n                hjust = 0.5,\n                margin = margin(t = 10)\n            )\n        )\n    )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 19, \n  width = 10,\n  height = 12\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      patchwork_1.3.0 glue_1.8.0      scales_1.3.0   \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         skimr_2.1.5       \n[17] labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0        \n[21] xml2_1.3.6         camcorder_0.1.0    repr_1.1.7         tidytuesdayR_1.1.2\n[25] withr_3.0.2        grid_4.4.0         fansi_1.0.6        colorspace_2.1-1  \n[29] gitcreds_0.1.2     cli_3.6.4          rmarkdown_2.29     crayon_1.5.3      \n[33] generics_0.1.3     rstudioapi_0.17.1  tzdb_0.5.0         commonmark_1.9.2  \n[37] splines_4.4.0      parallel_4.4.0     ggplotify_0.1.2    base64enc_0.1-3   \n[41] vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0       jsonlite_1.8.9    \n[45] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[49] magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4     \n[53] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[57] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4   \n[61] vroom_1.6.5        evaluate_1.0.1     lattice_0.22-6     markdown_1.13     \n[65] gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1     \n[69] nlme_3.1-164       svglite_2.1.3      mgcv_1.9-1         xfun_0.49         \n[73] fs_1.6.5           zoo_1.8-12         pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_19.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 19: Seismic Events at Mount Vesuvius\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_17.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_17.html",
    "title": "Topic-Speaker Bipartite Network for useR! 2025 Conference",
    "section": "",
    "text": "Figure 1: Topic-Speaker Bipartite Network for useR! 2025 Conference. The visualization shows connections between speakers (salmon-colored circles) and five topics (blue circles with labels): Visualization, Machine Learning, Data Wrangling, Package Development, and Reproducibility. The network clusters speakers around their respective topics, with some speakers positioned between multiple topics, indicating cross-disciplinary interests. The layout places topics centrally, with speakers radiating outward, creating a star-like pattern for each topic cluster.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    igraph,         # Network Analysis and Visualization\n    ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n    camcorder       # Record Your Plot History \n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 17) \n\nuser2025_raw &lt;- tt$user2025 |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(user2025_raw)\nskim(user2025_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nuser2025 &lt;- user2025_raw |&gt;\n    mutate(\n        keywords_list = str_split(keywords, \", \"),\n        co_authors = replace_na(co_authors, \"\")\n    )\n\n# Define Topic Mapping \ntopic_definitions &lt;- tribble(\n    ~pattern, ~topic,\n    \"visualization|ggplot2|shiny|dashboard|interactive\", \"Visualization\",\n    \"machine learning|deep learning|statistics|modeling|neural\", \"Machine Learning\",\n    \"data wrangling|tidyverse|data.table|cleaning|manipulation\", \"Data Wrangling\",\n    \"reproducibility|rmarkdown|workflow|version control|git\", \"Reproducibility\",\n    \"package|cran|bioconductor|github\", \"Package Development\"\n)\n\n# Expand to keyword-topic map\nkeyword_topics &lt;- map_dfr(seq_len(nrow(topic_definitions)), function(i) {\n    pattern &lt;- topic_definitions$pattern[i]\n    topic &lt;- topic_definitions$topic[i]\n    matched &lt;- unique(unlist(user2025$keywords_list))[str_detect(unique(unlist(user2025$keywords_list)), regex(pattern, ignore_case = TRUE))]\n    tibble(keyword = matched, topic = topic)\n    }) |&gt; distinct()\n\n# Create Edges ----\nspeaker_topic_edges &lt;- user2025 |&gt;\n    unnest(keywords_list) |&gt;\n    inner_join(keyword_topics, by = c(\"keywords_list\" = \"keyword\")) |&gt;\n    select(speakers, topic) |&gt;\n    distinct()\n\n# Build Graph ----\ng &lt;- graph_from_data_frame(speaker_topic_edges |&gt; rename(from = speakers, to = topic), directed = FALSE)\n\n# Set node attributes\nV(g)$type &lt;- ifelse(V(g)$name %in% speaker_topic_edges$speakers, \"speaker\", \"topic\")\nV(g)$label &lt;- ifelse(V(g)$type == \"speaker\", str_trunc(str_extract(V(g)$name, \"^[^(]+\"), 25), V(g)$name)\ndeg &lt;- degree(g)\nV(g)$size &lt;- ifelse(V(g)$type == \"speaker\", rescale(deg, to = c(3.5, 6)), 10)\nV(g)$color &lt;- ifelse(V(g)$type == \"speaker\", \"#F4978E\", \"#99C1DE\")\nV(g)$shape &lt;- 21\n\n# Compute Layout ----\nset.seed(42)\nlayout_coords &lt;- layout_with_fr(g) + matrix(rnorm(length(V(g)) * 2, sd = 0.15), ncol = 2)\n\n# Build Plot Data ----\nnodes_df &lt;- data.frame(\n    name = V(g)$name,\n    type = V(g)$type,\n    color = V(g)$color,\n    shape = V(g)$shape,\n    size = V(g)$size,\n    label = V(g)$label,\n    x = layout_coords[, 1],\n    y = layout_coords[, 2]\n)\n\nedges_df &lt;- as_data_frame(g) |&gt;\n    left_join(nodes_df |&gt; select(name, x_from = x, y_from = y), by = c(\"from\" = \"name\")) |&gt;\n    left_join(nodes_df |&gt; select(name, x_to = x, y_to = y), by = c(\"to\" = \"name\"))\n\n# Label high-degree speakers only\nhigh_deg_names &lt;- names(deg[deg &gt;= 2 & V(g)$type == \"speaker\"])\nspeaker_labels_df &lt;- nodes_df |&gt; filter(name %in% high_deg_names)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"speaker\" = \"#F4978E\", \"topic\" = \"#99C1DE\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Topic-Speaker Bipartite Network for useR! 2025 Conference\")\nsubtitle_text &lt;- str_glue(\"Connections between speakers and topics\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 17,\n    source_text =  \"Program for the useR! 2025 conference\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        \n        # Grid elements\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n         # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot() +\n    # Geoms\n    geom_segment(\n        data = edges_df, aes(x = x_from, y = y_from, xend = x_to, yend = y_to),\n        color = \"#CCCCCC\", alpha = 0.5, size = 0.3\n        ) +\n    geom_point(\n        data = nodes_df,\n        aes(x = x, y = y, fill = type, size = size),\n        shape = 21, stroke = 0.4, color = \"#333333\", show.legend = FALSE\n        ) +\n    geom_text(\n        data = nodes_df |&gt; filter(type == \"topic\"),\n        aes(x = x, y = y, label = label),\n        color = \"#1A1A1A\", size = 5, fontface = \"bold\"\n        ) +\n    geom_text_repel(\n        data = speaker_labels_df,\n        aes(x = x, y = y, label = label),\n        color = \"#333333\", size = 3.2,\n        max.overlaps = 20, point.padding = 0.3, box.padding = 0.4,\n        segment.color = \"#AAAAAA\", segment.alpha = 0.6,\n        force = 0.5, seed = 42\n        ) +\n    # Scales\n    scale_fill_manual(values = colors$palette) +\n    scale_size_identity() +\n    coord_equal(clip = \"off\") +\n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        x = NULL,\n        y = NULL,\n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.4),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.85),\n            family = fonts$subtitle,\n            color = alpha(colors$subtitle, 0.9),\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 10)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.65),\n            family = fonts$caption,\n            color = colors$caption,\n            hjust = 0.5,\n            margin = margin(t = 10)\n        )\n    )  \n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 17, \n  width = 8,\n  height = 8\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 ggrepel_0.9.6   igraph_2.1.1    here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.4         \n[29] rmarkdown_2.29     crayon_1.5.3       ragg_1.3.3         generics_0.1.3    \n[33] rstudioapi_0.17.1  tzdb_0.5.0         commonmark_1.9.2   parallel_4.4.0    \n[37] base64enc_0.1-3    vctrs_0.6.5        jsonlite_1.8.9     hms_1.1.3         \n[41] bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[45] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       munsell_0.5.1     \n[49] pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1          \n[53] httr2_1.0.6        textshaping_0.4.0  rprojroot_2.0.4    vroom_1.6.5       \n[57] evaluate_1.0.1     markdown_1.13      gridtext_0.1.5     snakecase_0.11.1  \n[61] renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3      xfun_0.49         \n[65] pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_17.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 17: useR! 2025 program\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_15.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_15.html",
    "title": "Morphological Separation in Bill Dimensions Across Penguin Species",
    "section": "",
    "text": "Figure 1: A scatterplot showing bill dimensions (length vs. depth in mm) for three penguin species with density contours. The plot clearly displays three distinct clusters: Adelie penguins (orange, n=152) with shorter, deeper bills centered around 40mm length; Chinstrap penguins (blue, n=68) with medium-length bills around 49mm and greater depth; and Gentoo penguins (green, n=124) with longer, shallower bills around 48mm length and 15mm depth. Diamond markers indicate species means.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder       # Record Your Plot History\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codepenguins &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins.csv') |&gt;\n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(penguins)\nskim(penguins)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nspecies_stats &lt;- penguins |&gt;\n    group_by(species) |&gt;\n    summarize(\n        mean_bill_len = mean(bill_len, na.rm = TRUE),\n        mean_bill_dep = mean(bill_dep, na.rm = TRUE),\n        n = n(),\n        .groups = 'drop'\n    )\n# label positions\nlabel_positions &lt;- data.frame(\n    species = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n    x_pos = c(38.5, 47, 48),  \n    y_pos = c(20.3, 19.5, 14.5),  \n    n = c(152, 68, 124)\n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"Adelie\" = \"#FF8C00\",      \n        \"Chinstrap\" = \"#4169E1\",   \n        \"Gentoo\" = \"#2E8B57\"      \n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_wrap(\"Morphological Separation in Bill Dimensions Across Penguin Species\",\n                       width = 45)\nsubtitle_text &lt;- str_glue(\"2D density contours with individual observations for the three species\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 15,\n    source_text =  \"{ basepenguins } R package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray50\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray50\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # two-row legend\n        legend.box.spacing = unit(0.4, \"cm\"),\n        legend.key.width = unit(1.5, \"cm\"),\n        legend.spacing.x = unit(0.2, \"cm\"),\n \n        legend.box = \"horizontal\",\n        legend.box.just = \"left\",\n        \n        # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(penguins, aes(x = bill_len, y = bill_dep, color = species)) +\n    # Geoms\n    geom_point(\n        alpha = 0.12, size = 1.5\n        ) +\n    geom_density_2d(\n        size = 0.8, \n        alpha = 0.9,\n        bins = 6,\n        lineend = \"round\",\n        linejoin = \"round\"\n    ) +\n    geom_point(\n        data = species_stats,\n        aes(x = mean_bill_len, y = mean_bill_dep),\n        size = 4,\n        shape = 18\n    ) +\n    geom_label(\n        data = label_positions,\n        aes(x = x_pos, y = y_pos, \n            label = paste0(species, \"\\nn = \", n),\n            color = species),\n        fill = \"white\",\n        alpha = 0.9,\n        fontface = \"bold\",\n        label.size = 0.2,  \n        label.padding = unit(0.4, \"lines\"),\n        label.r = unit(0.15, \"lines\")  \n    ) +\n    # Scales\n    scale_color_manual(values = colors$palette) +\n    scale_x_continuous(limits = c(30, 62)) +\n    scale_y_continuous(limits = c(13, 21.5)) +\n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        x = \"Bill Length (mm)\",\n        y = \"Bill Depth (mm)\"\n        ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.85),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.95),\n            family = fonts$subtitle,\n            color = alpha(colors$subtitle, 0.9),\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 10)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.65),\n            family = fonts$caption,\n            color = colors$caption,\n            hjust = 0.5,\n            margin = margin(t = 10)\n        )\n    ) \n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 15, \n  width = 8,\n  height = 8\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[21] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    farver_2.1.2      \n[17] compiler_4.4.0     munsell_0.5.1      repr_1.1.7         codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[25] pillar_1.9.0       MASS_7.3-60.2      magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      labeling_0.4.3    \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        bit64_4.5.2        timechange_0.3.0  \n[45] rmarkdown_2.29     bit_4.5.0          hms_1.1.3          evaluate_1.0.1    \n[49] knitr_1.49         markdown_1.13      gridGraphics_0.5-1 rlang_1.1.4       \n[53] isoband_0.2.7      gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[57] renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1  vroom_1.6.5       \n[61] jsonlite_1.8.9     R6_2.5.1           fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_15.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 15: Base R Penguins\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_12.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_12.html",
    "title": "Evolution of Business Priorities in Amazon’s Annual Reports",
    "section": "",
    "text": "Figure 1: Line chart showing the evolution of business priorities in Amazon’s annual reports from 2005 to 2023. Five key categories are tracked: Financial Performance (highest line, around 7,000 mentions), Cloud Services (shows dramatic growth after 2015), Customer Experience, Operations & Logistics, and Innovation & Technology (lowest line). The chart includes vertical dashed lines marking key events: AWS Launch (2006), AWS Revenue Surpasses $1B (2010), AWS Becomes Profitable (2015), Whole Foods Acquisition (2017), and COVID-19 Pandemic (2020).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n       tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    tidytext,       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n    patchwork       # The Composer of Plots\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 12) \n\nreport_words_clean &lt;- tt$report_words_clean |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(report_words_clean)\nskim(report_words_clean)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\ntext_df &lt;- report_words_clean |&gt;\n    group_by(year, word) |&gt;\n    summarize(\n        count = n(), \n        .groups = \"drop\"\n    )\n\n# Define word categories with targeted keywords\nfocus_categories &lt;- list(\n    innovation = c(\"innovation\", \"innovative\", \"invent\", \"patent\", \"technology\", \"research\", \n                   \"development\", \"ai\", \"machine\", \"learning\", \"automation\"),\n    customer = c(\"customer\", \"consumer\", \"satisfaction\", \"service\", \"experience\", \"value\", \n                 \"delivery\", \"prime\", \"shopping\", \"retail\", \"personalization\"),\n    finance = c(\"revenue\", \"profit\", \"margin\", \"earning\", \"cost\", \"expense\", \"financial\", \n                \"billion\", \"million\", \"investment\", \"growth\", \"cash\", \"flow\", \"capital\"),\n    cloud = c(\"aws\", \"cloud\", \"server\", \"compute\", \"storage\", \"database\", \"web\", \"services\",\n              \"infrastructure\", \"platform\", \"hosting\", \"data\"),\n    operations = c(\"operations\", \"logistics\", \"fulfillment\", \"warehouse\", \"distribution\", \n                   \"supply\", \"chain\", \"inventory\", \"shipping\", \"transportation\", \"facility\")\n)\n\n# Calculate category indices   \nfocus_indices &lt;- map_dfr(names(focus_categories), function(category) {\n    text_df |&gt;\n        filter(word %in% focus_categories[[category]]) |&gt;\n        group_by(year) |&gt;\n        summarize(\n            word_count = sum(count),\n            total_words = n(),\n            index = word_count / total_words * 100,\n            category = category,\n            .groups = \"drop\"\n        )\n})\n    \n# Cleaner category label mapping\ncategory_labels &lt;- c(\n    \"innovation\" = \"Innovation & Technology\",\n    \"customer\" = \"Customer Experience\",\n    \"finance\" = \"Financial Performance\",\n    \"cloud\" = \"Cloud Services (AWS)\",\n    \"operations\" = \"Operations & Logistics\"\n)\n    \n# Key events/milestones for annotation\nkey_events &lt;- tibble(\n    year = c(2006, 2010, 2015, 2017, 2020),\n    event = c(\"AWS\\nLaunched\", \"AWS Revenue\\nSurpasses $1B\", \"AWS Becomes\\nProfitable\", \"Whole Foods\\nAcquisition\", \"COVID-19\\nPandemic\"),\n    index = c(5500, 3500, 5000, 4500, 4800),\n    category = NA\n)\n\n\n5. Visualization Parameters\n\nShow codecolors &lt;- get_theme_colors(\n    palette = c(\n        \"innovation\" = \"#E69F00\",\n        \"customer\" = \"#56B4E9\", \n        \"finance\" = \"#009E73\",\n        \"cloud\" = \"#0072B2\",\n        \"operations\" = \"#D55E00\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Evolution of Business Priorities in Amazon's Annual Reports\")\nsubtitle_text &lt;- str_glue(\"Tracking the relative importance of business areas from 2005 to 2023\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 12,\n    source_text =  \"Amazon's Annual Reports\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray80\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # two-row legend\n        legend.box.spacing = unit(0.4, \"cm\"),\n        legend.key.width = unit(1.5, \"cm\"),\n        legend.spacing.x = unit(0.2, \"cm\"),\n \n        legend.box = \"horizontal\",\n        legend.box.just = \"left\",\n        \n        # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot() +\n    # Geoms\n    geom_line(\n        data = focus_indices, \n        aes(x = year, y = index, color = category),\n        linewidth = 1.2\n    ) +\n    geom_point(\n        data = focus_indices, \n        aes(x = year, y = index, color = category),\n        size = 3\n    ) +\n    geom_vline(\n        data = key_events,\n        aes(xintercept = year),\n        linetype = \"dashed\",\n        color = \"gray50\",\n        alpha = 0.7\n    ) +\n    geom_text(\n        data = key_events,\n        aes(x = year, y = index, label = event),\n        hjust = -0.1,\n        vjust = 0,\n        size = 3,\n        fontface = \"bold\",\n        color = \"gray30\"\n    ) +\n    # Annotate\n    annotate(\n        \"text\",\n        x = max(focus_indices$year) + 0.5,\n        y = filter(focus_indices, year == max(year) & category == \"cloud\")$index,\n        label = \"Cloud services\\ndominate recent\\nreporting\",\n        hjust = 0,\n        size = 3.5,\n        fontface = \"italic\",\n        color = colors$palette[4]\n    ) +\n    annotate(\n        \"text\",\n        x = max(focus_indices$year) + 0.5,\n        y = filter(focus_indices, year == max(year) & category == \"finance\")$index,\n        label = \"Financial focus\\nremains strong\",\n        hjust = 0,\n        size = 3.5,\n        fontface = \"italic\",\n        color = colors$palette[3]\n    ) +\n    # Scales\n    scale_color_manual(\n        values = colors$palette,\n        labels = category_labels,\n        name = NULL\n    ) +\n    scale_x_continuous(\n        breaks = seq(min(focus_indices$year), max(focus_indices$year), by = 2),\n        expand = expansion(mult = c(0.02, 0.15)) \n    ) +\n    scale_y_continuous(\n        labels = function(x) format(x, big.mark = \",\"),\n        expand = expansion(mult = c(0.02, 0.02))\n    ) +\n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        x = \"Year\",\n        y = \"Focus Index (mentions per 100,000 words)\"\n    ) +\n    # Legend\n    guides(\n        color = guide_legend(\n            nrow = 2,\n            byrow = TRUE,\n            override.aes = list(size = 3)\n        )\n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(2),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1),\n            family = fonts$subtitle,\n            color = alpha(colors$subtitle, 0.9),\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 30)\n        ),\n        plot.caption = element_markdown(\n            size   = rel(0.65),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n        )\n    ) \n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 12, \n  width = 10,\n  height = 8\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 tidytext_0.4.2  camcorder_0.1.0 here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] janeaustenr_1.0.0  digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   \n [9] rsvg_2.6.1         tokenizers_0.3.0   magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.4        tools_4.4.0        utf8_1.2.4         yaml_2.3.10       \n[17] knitr_1.49         labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0         \n[21] curl_6.0.0         xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2\n[25] withr_3.0.2        grid_4.4.0         fansi_1.0.6        colorspace_2.1-1  \n[29] gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29     crayon_1.5.3      \n[33] generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0         commonmark_1.9.2  \n[37] parallel_4.4.0     ggplotify_0.1.2    yulab.utils_0.1.8  base64enc_0.1-3   \n[41] vctrs_0.6.5        Matrix_1.7-0       jsonlite_1.8.9     gridGraphics_0.5-1\n[45] hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5      \n[49] gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4      gtable_0.3.6      \n[53] munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1 \n[57] R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4    vroom_1.6.5       \n[61] evaluate_1.0.1     lattice_0.22-6     markdown_1.13      SnowballC_0.7.1   \n[65] gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1     \n[69] svglite_2.1.3      xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_12.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 12: Text Data From Amazon’s Annual Reports\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_10.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_10.html",
    "title": "A Tale of Pixar’s Evolution: Duration and Reception",
    "section": "",
    "text": "Figure 1: A two-panel visualization titled ‘A Tale of Pixar’s Evolution: Duration and Reception.’ The top panel shows ‘The Evolution of Pixar Film Durations (1995-2023)’ with a scatter plot and trend line demonstrating how Pixar films have increased in length from around 80 minutes to over 150 minutes, with points color-coded by film. The bottom panel displays ‘Audience vs. Critic Reception of Pixar Films’ comparing Cinema Score (audience ratings) on the y-axis with Rotten Tomatoes (critic consensus) on the x-axis. Films are grouped into four quadrants: Universal Acclaim, Critic Favorite, Audience Favorite, and Mixed Reception, revealing patterns in how different Pixar films are received by audiences versus critics.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    patchwork,      # The Composer of Plots # The Composer of Plots # The Composer of Plots\n    ggrepel         # Position Non-Overlapping Text Labels with 'ggplot2'\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 10) \n\npixar_films &lt;- tt$pixar_films |&gt; clean_names()\npublic_response &lt;- tt$public_response |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(pixar_films)\nskim(pixar_films)\n\nglimpse(public_response)\nskim(public_response)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\n# Combine the data for easier analysis\npixar_combined &lt;- pixar_films |&gt;\n    left_join(public_response, by = \"film\")\n\n# P1. Film Duration's ----\n\n# Define eras for P1\np1_data &lt;- pixar_combined |&gt;\n    mutate(\n        era = case_when(\n            release_date &lt; as.Date(\"2001-01-01\") ~ \"Early Years (1995-2000)\",\n            release_date &lt; as.Date(\"2006-01-01\") ~ \"Finding Nemo Era (2001-2005)\",\n            release_date &lt; as.Date(\"2011-01-01\") ~ \"Golden Age (2006-2010)\",\n            release_date &lt; as.Date(\"2016-01-01\") ~ \"Brave New World (2011-2015)\",\n            TRUE ~ \"Modern Era (2016+)\"\n        )\n    ) |&gt; \n    filter(!is.na(film))\n\n# Define era boundary lines\nera_boundaries &lt;- data.frame(\n    x = as.Date(c(\"2001-01-01\", \"2006-01-01\", \"2011-01-01\", \"2016-01-01\")),\n    ymin = 70,\n    ymax = 160\n)\n\n# Era labels coordinates\nera_labels &lt;- data.frame(\n    x = as.Date(c(\"1997-06-01\", \"2003-06-01\", \"2008-06-01\", \"2013-06-01\", \"2020-06-01\")),\n    y = c(rep(160, 5)),\n    label = c(\"Early Years\", \"Finding\\nNemo Era\", \"Golden Age\", \"Brave New\\nWorld\", \"Modern Era\")\n)\n\n# P2. Audience vs. Critic Reception ----\np2_data &lt;- pixar_combined |&gt;  \n    filter(!is.na(rotten_tomatoes) & !is.na(cinema_score)) |&gt;\n    mutate(\n        # Convert Cinema Score to numeric\n        cinema_score_numeric = case_when(\n            cinema_score == \"A+\" ~ 10,\n            cinema_score == \"A\" ~ 9,\n            cinema_score == \"A-\" ~ 8.5,\n            cinema_score == \"B+\" ~ 8,\n            cinema_score == \"B\" ~ 7,\n            cinema_score == \"B-\" ~ 6.5,\n            TRUE ~ 5\n        ),\n        # Create release year groups\n        release_decade = case_when(\n            release_date &lt; as.Date(\"2000-01-01\") ~ \"1995-1999\",\n            release_date &lt; as.Date(\"2010-01-01\") ~ \"2000-2009\",\n            release_date &lt; as.Date(\"2020-01-01\") ~ \"2010-2019\",\n            TRUE ~ \"2020+\"\n        ),\n        # Create selective labeling flag\n        label_film = case_when(\n            cinema_score_numeric &gt;= 9 & rotten_tomatoes &lt; 90 ~ TRUE,\n            cinema_score_numeric &lt; 10 & rotten_tomatoes &gt;= 99 ~ TRUE,\n            rotten_tomatoes &lt; 50 ~ TRUE,\n            film %in% c(\"Toy Story\", \"Inside Out\", \"Coco\", \"Soul\") ~ TRUE,\n            TRUE ~ FALSE\n        )\n    )\n\n# Create a filtered dataframe for labels\np2_labels &lt;- p2_data |&gt; filter(label_film == TRUE)\n\n# Define reception area dividing lines\nreception_lines &lt;- data.frame(\n    type = c(\"vertical_1\",  \"horizontal\"),\n    x1 = c(90, 40),\n    y1 = c(5, 9),\n    x2 = c(90, 105),\n    y2 = c(10.5, 9)\n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Color for P1\ncolors &lt;- get_theme_colors(palette = c(\n    \"gray40\", \"gray60\", \"gray70\", \"gray80\", \"#87BBA2\")\n    )\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"A Tale of Pixar's Evolution: Duration and Reception\")\n\nsubtitle_text &lt;- str_glue(\"How Pixar films have evolved in length and how audiences vs critics perceive them.\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 10,\n    source_text =  \"pixarfilms R package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray80\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8)),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n# P1. Film Duration's ----\np1 &lt;- ggplot(p1_data, aes(x = release_date, y = run_time)) +\n  # Geoms\n  geom_vline(\n    data = era_boundaries,\n    aes(xintercept = x),\n    linetype = \"dotted\",\n    color = colors$palette[2],\n    alpha = 0.4\n  ) +\n  geom_smooth(\n    method = \"loess\", se = FALSE, color = colors$palette[1],\n    linewidth = 0.5, alpha = 0.6, linetype = \"dashed\", na.rm = TRUE\n  ) +\n  geom_text_repel(\n    aes(label = film),\n    size = 3,\n    max.overlaps = 10,\n    box.padding = 0.5,\n    colour = colors$palette[1],\n    segment.color = colors$palette[3],\n    min.segment.length = 0.2,\n    seed = 123\n  ) +\n  geom_point(size = 3, color = colors$palette[5], alpha = 0.9, na.rm = TRUE) +\n  # Annotate\n  annotate(\n    \"text\",\n    x = era_labels$x,\n    y = era_labels$y,\n    label = era_labels$label,\n    alpha = 0.8,\n    fontface = \"bold\",\n    size = 3\n  ) +\n  # Scales\n  scale_x_date(\n    date_breaks = \"5 years\",\n    date_labels = \"%Y\",\n    limits = c(as.Date(\"1994-01-01\"), NA)\n  ) +\n  scale_y_continuous(\n    breaks = seq(80, 180, by = 10),\n  ) +\n  coord_cartesian(clip = \"off\") +\n  # Labs\n  labs(\n    title = \"The Evolution of Pixar Film Durations (1995-2023)\",\n    subtitle = \"From 80-minute early films to 100+ minute modern features\",\n    x = \"Release Date\",\n    y = \"Run Time (minutes)\"\n  )\n\n# P2. Audience vs. Critic Reception ----\np2 &lt;- ggplot(p2_data, aes(x = rotten_tomatoes, y = cinema_score_numeric)) +\n  # Geoms\n  geom_segment(\n    data = reception_lines,\n    aes(x = x1, y = y1, xend = x2, yend = y2),\n    linetype = \"dotted\", color = colors$palette[1], alpha = 0.8\n  ) +\n  geom_text_repel(\n    data = p2_labels,\n    aes(label = film),\n    size = 3,\n    box.padding = 0.8,\n    point.padding = 0.5,\n    colour = colors$palette[1],\n    segment.color = colors$palette[3],\n    min.segment.length = 0.2,\n    max.overlaps = 30,\n    force = 3,\n    seed = 145\n  ) +\n  geom_point(\n    aes(size = 3),\n    color = colors$palette[5], alpha = 0.8\n  ) +\n  # Annotate\n  annotate(\n    \"text\",\n    x = 105, y = 10.8,\n    label = \"Universal Acclaim\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 105, y = 7,\n    label = \"Critic Favorite\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 75, y = 10.8,\n    label = \"Audience Favorite\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 0.5\n  ) +\n  annotate(\n    \"text\",\n    x = 75, y = 7,\n    label = \"Mixed Reception\",\n    size = 3, fontface = \"bold\", alpha = 0.7,\n    color = colors$palette[1],\n    hjust = 0.5\n  ) +\n  # Scales\n  scale_color_brewer(\n    palette = \"Set1\",\n    name = \"Film Era\"\n  ) +\n  scale_size_continuous(\n    range = c(2, 5),\n    name = \"Runtime (min)\"\n  ) +\n  scale_y_continuous(\n    breaks = c(10, 9, 8.5, 8, 7, 6.5),\n    labels = c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\"),\n    limits = c(6, 10.8),\n    minor_breaks = NULL,\n    expand = expansion(mult = c(0.02, 0.02))\n  ) +\n  scale_x_continuous(\n    breaks = seq(40, 100, by = 10),\n    limits = c(40, 105),\n    minor_breaks = NULL,\n    expand = expansion(mult = c(0.02, 0.02))\n  ) +\n  coord_cartesian(clip = \"off\") +\n  # Labs\n  labs(\n    title = \"Audience vs. Critic Reception of Pixar Films\",\n    subtitle = \"Comparing Cinema Score (audience ratings) with Rotten Tomatoes (critic consensus)\",\n    y = \"Cinema Score (audience rating)\",\n    x = \"Rotten Tomatoes Score (critic rating)\"\n  ) \n\n# Combined Plot -----\ncombined_plot &lt;- (p1 / plot_spacer() / p2) +\n  plot_layout(\n    height = c(1, 0.005, 1),\n    ncol = 1\n  )\n\ncombined_plot &lt;- combined_plot +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size = rel(1.8),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(0.85),\n        family = fonts$subtitle,\n        color = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.65),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 10, \n  width = 8,\n  height = 10\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggrepel_0.9.6   patchwork_1.3.0 camcorder_0.1.0 here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         htmlwidgets_1.6.4 \n[17] bit_4.5.0          curl_6.0.0         xml2_1.3.6         repr_1.1.7        \n[21] tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0         fansi_1.0.6       \n[25] colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   splines_4.4.0      parallel_4.4.0     ggplotify_0.1.2   \n[37] base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0      \n[41] jsonlite_1.8.9     gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2       \n[45] systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20  \n[49] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[53] rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6       \n[57] rprojroot_2.0.4    lattice_0.22-6     vroom_1.6.5        evaluate_1.0.1    \n[61] markdown_1.13      gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3        \n[65] Rcpp_1.0.13-1      nlme_3.1-164       svglite_2.1.3      mgcv_1.9-1        \n[69] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_10.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 10: Pixar Films\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_08.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_08.html",
    "title": "Racial and Ethnic Disparities in Reproductive Medicine Research (2010-2023)",
    "section": "",
    "text": "Figure 1: Three-panel charts showing racial and ethnic disparities in reproductive medicine research (2010-2023). The top left chart displays racial categories used in studies, with Black/African American (19.4%), Hispanic/Latino (18.6%), and White (17.5%) being the most common. The top right chart shows sample size distribution by racial/ethnic group, revealing reference groups have much larger sample sizes than comparison groups. The bottom chart displays effect size distributions by measure type (Hazard Ratio, Odds Ratio, Risk Ratio), with most values clustering slightly above 1.0, indicating increased risks for non-reference groups.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n   tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    patchwork       # The Composer of Plots # The Composer of Plots # The Composer of Plots\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  14,\n    height =  12,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 08) \n\narticle_dat &lt;- tt$article_dat |&gt; clean_names()\nmodel_dat &lt;- tt$model_dat |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(article_dat)\nskim(article_dat)\n\nglimpse(model_dat)\nskim(model_dat)\n\n\n4. Tidy Data\n\nShow code# P1. Racial Categories -----\nracial_categories_data &lt;- article_dat |&gt;\n    select(starts_with(\"race\")) |&gt;\n    select(matches(\"race\\\\d$\")) |&gt;  # Select only race categories, not sample sizes\n    pivot_longer(everything(), names_to = \"category\", values_to = \"race\") |&gt;\n    filter(!is.na(race)) |&gt;\n    # Standardize category names and combine similar ones\n    mutate(race = case_when(\n        str_detect(tolower(race), \"white.*non.?hispanic|non.?hispanic.*white\") ~ \"Non-Hispanic White\",\n        str_detect(tolower(race), \"black.*non.?hispanic|non.?hispanic.*black\") ~ \"Non-Hispanic Black\",\n        str_detect(tolower(race), \"white\") ~ \"White\",\n        str_detect(tolower(race), \"black|african\") ~ \"Black/African American\",\n        str_detect(tolower(race), \"hispanic|latino\") ~ \"Hispanic/Latino\",\n        str_detect(tolower(race), \"asian|pacific\") ~ \"Asian/Pacific Islander\",\n        TRUE ~ race\n    )) |&gt;\n    count(race) |&gt;\n    # Filter out very rare categories\n    filter(n &gt;= 5) |&gt;\n    # Calculate percentage\n    mutate(percentage = n/sum(n) * 100) |&gt;\n    # Sort by frequency\n    arrange(desc(n)) \n\n\n# P2. Sample Size Distribution -----\nsample_size_distribution &lt;- article_dat |&gt;\n    # Select sample size columns\n    select(matches(\"_ss$\")) |&gt;\n    # Pivot to long format\n    pivot_longer(everything(), \n                 names_to = \"group\", \n                 values_to = \"size\") |&gt;\n    # Remove missing values and unreasonable values (-99)\n    filter(!is.na(size), size &gt; 0, size != -99) |&gt;\n    # Group by racial/ethnic category\n    group_by(group) |&gt;\n    # Calculate summary statistics\n    summarise(\n        median_size = median(size),\n        mean_size = mean(size),\n        q25 = quantile(size, 0.25),\n        q75 = quantile(size, 0.75),\n        max_size = max(size),\n        count = n()\n    ) |&gt;\n    # Sort by median size for better visualization\n    arrange(desc(median_size)) |&gt;\n    # Create more readable labels\n    mutate(\n        group_label = case_when(\n            group == \"race1_ss\" ~ \"Reference group\",\n            group == \"race2_ss\" ~ \"Second reported group\",\n            group == \"race3_ss\" ~ \"Third reported group\",\n            group == \"race4_ss\" ~ \"Fourth reported group\",\n            group == \"race5_ss\" ~ \"Fifth reported group\",\n            group == \"race6_ss\" ~ \"Sixth reported group\",\n            group == \"race7_ss\" ~ \"Seventh reported group\",\n            group == \"race8_ss\" ~ \"Eighth reported group\",\n            group == \"eth1_ss\" ~ \"Reference ethnic group\",\n            group == \"eth2_ss\" ~ \"Second ethnic group\",\n            group == \"eth3_ss\" ~ \"Third ethnic group\",\n            group == \"eth4_ss\" ~ \"Fourth ethnic group\",\n            group == \"eth5_ss\" ~ \"Fifth ethnic group\",\n            group == \"eth6_ss\" ~ \"Sixth ethnic group\",\n            TRUE ~ group\n        )\n    ) |&gt;\n    # Only include groups with sufficient data\n    filter(count &gt;= 5)\n\n\n# P3. Effect Size Distribution -----\neffect_size_data &lt;- model_dat |&gt;\n    # Filter for relevant measure types and remove invalid data\n    filter(\n        measure %in% c(\"OR\", \"RR\", \"HR\"),\n        point != -99,\n        point &lt; 10,       \n        point &gt; 0.1        \n    ) |&gt;\n    # Add significance indicator\n    mutate(\n        significance = case_when(\n            lower != -99 & upper != -99 & (lower &gt; 1 | upper &lt; 1) ~ \"Significant\",\n            lower != -99 & upper != -99 ~ \"Non-significant\",\n            TRUE ~ \"CI Not Reported\"\n        ),\n        # Create a categorized effect size for potential faceting\n        effect_category = case_when(\n            point &lt; 0.5 ~ \"Strong Negative\",\n            point &lt; 0.8 ~ \"Moderate Negative\",\n            point &lt; 1.0 ~ \"Weak Negative\",\n            point == 1.0 ~ \"No Effect\",\n            point &lt;= 1.25 ~ \"Weak Positive\",\n            point &lt;= 2.0 ~ \"Moderate Positive\",\n            TRUE ~ \"Strong Positive\"\n        ),\n        # Rename measure types \n        measure = case_when(\n            measure == \"OR\" ~ \"Odds Ratio\",\n            measure == \"RR\" ~ \"Risk Ratio\",\n            measure == \"HR\" ~ \"Hazard Ratio\",\n            TRUE ~ measure\n        )\n    ) \n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"#4A6FE3\",\n        \"#D8E1F3\",\n        \"Odds Ratio\" = \"#4A6FE3\",   \n        \"Risk Ratio\" = \"#29A2C6\",   \n        \"Hazard Ratio\" = \"#5D7CBA\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Racial and Ethnic Disparities in Reproductive Medicine Research (2010-2023)\")\n\nsubtitle_text &lt;- str_glue(\n    \"Analysis of 318 studies from high-impact journals examining disparities in reproductive health\\n\\n\",\n    \"This visualization reveals critical patterns in how disparities are studied: inconsistent racial categorization unequal sample sizes across groups,\\n \",\n    \"and effect sizes clustering slightly above 1.0, suggesting systematic disadvantages for non-reference groups. These methodological choices \\n\",\n    \"impact our understanding of disparities.\"\n)\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 08,\n    source_text =  \"Racial and ethnic disparities in reproductive medicine in the United States: a narrative review of contemporary high-quality evidence\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Remove axes\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank(),\n        \n        # Plot margins \n        plot.margin = margin(10, 10, 10, 10),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Map  ----\n# P1. Racial Categories -----\np1 &lt;- ggplot(data = racial_categories_data,\n             aes(x = reorder(race, n), y = n)) +\n    # Geoms\n    geom_bar(stat = \"identity\", \n             fill =  colors$palette[1],     \n             alpha = 0.8) +\n    geom_text(aes(label = sprintf(\"%.1f%%\", percentage)),\n              hjust = -0.2,\n              size = 3.5) +\n    # Scales\n    scale_y_continuous(\n        expand = expansion(mult = c(0, 0.15)), \n        breaks = pretty_breaks()\n    ) +\n    coord_flip() +\n    # Labs\n    labs(title = \"Racial Categories Used in Reproductive Medicine Studies\",\n         subtitle = \"Percentage of studies using each racial category (2010-2023)\",\n         x = NULL,\n         y = \"Number of Studies\") +\n    # Theme\n    theme_minimal() +\n    theme(\n        plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 11, color = \"gray40\"),\n        axis.text = element_text(size = 10),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = margin(20, 40, 20, 20)\n    ) \n\n\n# P2. Sample Size Distribution -----\np2 &lt;- ggplot(data = sample_size_distribution, \n             aes(x = reorder(group_label, median_size), y = median_size)) +\n    # Geoms\n    geom_pointrange(\n        aes(ymin = q25, ymax = q75),\n        size = 0.7,\n        color = colors$palette[1],\n        fill =  colors$palette[2],\n        shape = 21,\n        stroke = 1.2\n    ) +\n    annotate(\n        \"text\", \n        x = 10.8, \n        y = 35, \n        label = \"Reference groups have\\nmuch larger sample sizes\",\n        lineheight = 0.9,\n        hjust = 0,\n        vjust = 1,\n        size = 3.5,\n        color = \"gray30\",  \n        fontface = \"italic\"\n    ) +\n    # Scales\n    coord_flip() +\n    scale_y_log10(\n        labels = label_comma(),\n        breaks = c(10, 100, 1000, 10000, 100000)\n    ) +\n    # Labs\n    labs(\n        title = \"Sample Size Distribution by Racial/Ethnic Group\",\n        subtitle = \"Median sample size with interquartile range (log scale)\",\n        x = NULL,\n        y = \"Sample Size (log scale)\"\n    ) +\n    # Theme\n    theme_minimal() +\n    theme(\n        plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 11, color = \"gray40\"),\n        axis.text = element_text(size = 10),\n        axis.title.x = element_text(margin = margin(t = 10)),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        plot.margin = margin(20, 20, 20, 20)\n    )\n\n\n# P3. Effect Size Distribution -----\np3 &lt;- ggplot(data = effect_size_data,\n             aes(x = point, fill = measure)) +\n    # Geoms\n    geom_density(alpha = 0.6, adjust = 1.5) +\n    geom_vline(                 # Vertical reference line at 1 (no effect)\n        xintercept = 1, \n        linetype = \"dashed\", \n        color = \"gray30\",\n        size = 0.7\n    ) +\n    annotate(\n        \"text\", \n        x = 0.7, \n        y = 1.2, \n        label = \"Decreased risk/odds\",\n        hjust = 1,\n        size = 3.5,\n        fontface = \"italic\",\n        color = \"gray30\"\n    ) +\n    annotate(\n        \"text\", \n        x = 1.7, \n        y = 1.2, \n        label = \"Increased risk/odds\",\n        hjust = 0,\n        size = 3.5,\n        fontface = \"italic\",\n        color = \"gray30\"\n    ) +\n    # Scales\n    scale_fill_manual(\n        values =  colors$palette\n    ) +\n    scale_x_log10(\n        breaks = c(0.2, 0.5, 1, 2, 5),\n        labels = c(\"0.2\", \"0.5\", \"1.0\", \"2.0\", \"5.0\")\n    ) +\n    # Labs\n    labs(\n        title = \"Distribution of Effect Sizes in Racial/Ethnic Disparity Studies\",\n        subtitle = \"By measure type, showing patterns of reported disparities\",\n        x = \"Effect Size (log scale)\",\n        y = \"Density\",\n        fill = \"Measure Type\"\n    ) +\n    # Theme\n    theme_minimal() +\n    theme(\n        plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 11, color = \"gray40\"),\n        axis.title = element_text(size = 10),\n        legend.position = \"bottom\",\n        legend.title = element_text(face = \"bold\"),\n        panel.grid.minor = element_blank(),\n        plot.margin = margin(20, 20, 20, 20)\n    )\n\n# Combined Plot -----\ncombined_plot &lt;- (p1 + p2) / p3 +\n    plot_layout(heights = c(1, 1)) +\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                size   = rel(2.1),\n                family = fonts$title,\n                face   = \"bold\",\n                color  = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size   = rel(0.9),\n                family = fonts$subtitle,\n                color  = colors$subtitle,\n                lineheight = 1.2,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.caption = element_markdown(\n                size   = rel(0.75),\n                family = fonts$caption,\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 10)\n            ),\n            plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n        )\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 8, \n  width = 14,\n  height = 12\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 camcorder_0.1.0 here_1.0.1      glue_1.8.0     \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3         \n[29] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[33] tzdb_0.4.0         commonmark_1.9.2   parallel_4.4.0     ggplotify_0.1.2   \n[37] base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8  jsonlite_1.8.9    \n[41] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[45] magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4     \n[49] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[53] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4   \n[57] vroom_1.6.5        evaluate_1.0.1     markdown_1.13      gridtext_0.1.5    \n[61] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[65] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_08.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 08]: Academic Literature on Racial and Ethnic Disparities in Reproductive Medicine in the US\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_06.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_06.html",
    "title": "CDC Dataset Purge: A Timeline of Public Health Data Removal",
    "section": "",
    "text": "Figure 1: A two-panel visualization of CDC dataset archival patterns. Top panel: Bar chart showing distribution of 1,257 datasets by access level - majority are either Unspecified (51.5%) or Public Access (47.9%). Bottom panel: Area chart showing cumulative growth of archived datasets from 2016 to 2025, with a notable increase in archival activity starting 2020, marked by a vertical dashed line.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    patchwork,      # The Composer of Plots\n    camcorder       # Record Your Plot History \n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 06) \n\ncdc &lt;- tt$cdc_datasets |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(cdc)\nskim(cdc)\n\n\n4. Tidy Data\n\nShow code# P1. Distribution plot  \ndistribution &lt;- cdc |&gt;\n  mutate(\n    access_category = case_when(\n      public_access_level %in% c(\"public\", \"public domain\") ~ \"Public Access\",\n      public_access_level == \"restricted public\" ~ \"Restricted Access\",\n      public_access_level == \"non-public\" ~ \"No Public Access\",\n      TRUE ~ \"Unspecified\"\n    )\n  ) |&gt;\n  count(access_category) |&gt;\n  mutate(\n    pct = n / sum(n) * 100,\n    label = sprintf(\"%.1f%%\\n(n=%d)\", pct, n),\n    # Conditional hjust and color based on count\n    hjust = ifelse(n &gt; 200, 1.2, -0.2),\n    label_color = ifelse(n &gt; 200, \"white\", \"gray30\")\n  )\n\n# P2. Timeline plot\ntimeline_data &lt;- cdc |&gt;\n  mutate(\n    access_category = case_when(\n      public_access_level %in% c(\"public\", \"public domain\") ~ \"Public Access\",\n      public_access_level == \"restricted public\" ~ \"Restricted Access\",\n      public_access_level == \"non-public\" ~ \"No Public Access\",\n      TRUE ~ \"Unspecified\"\n    ),\n    issued = as.Date(issued)\n  ) |&gt;\n  filter(!is.na(issued)) |&gt;\n  arrange(issued) |&gt;\n  group_by(access_category) |&gt;\n  mutate(cumulative = row_number()) |&gt;\n  ungroup()\n\n# Find the inflection point around 2020\ninflection_date &lt;- as.Date(\"2020-04-01\")\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"Public Access\"     = \"#3498DB\",      \n        \"Restricted Access\" = \"#E67E22\",   \n        \"No Public Access\"  = \"#C0392B\",    \n        \"Unspecified\"       = \"#7F8C8D\" \n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"CDC Dataset Purge: A Timeline of Public Health Data Removal\")\nsubtitle_text &lt;- str_glue(\"Analysis of CDC datasets backed up on archive.org during the Trump administration's data purge\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 06,\n    source_text = \"archive.org/details/20250128-cdc-datasets\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Axis elements\n        axis.title = element_text(color = colors$text, size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey80\", linewidth = 0.1),\n        \n        # Legend elements\n        legend.position = \"right\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8)),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\n\n# P1. Distribution plot \np1 &lt;- ggplot(distribution,\n             aes(x = reorder(access_category, n), \n                 y = n, \n                 fill = access_category)\n) +\n    \n    # Geoms\n    geom_col() +\n    geom_text(\n        aes(label = label,\n            hjust = hjust,\n            color = label_color),\n        size = 3.5,\n        fontface = \"bold\",\n        family = fonts$text\n    ) +\n    coord_flip() +\n    \n    # Scales\n    scale_fill_manual(values = colors$palette) +\n    scale_color_identity() +  \n    scale_x_discrete() +\n    scale_y_continuous(\n        expand = expansion(mult = c(0, 0.25)) \n    ) +\n    \n    # Labs\n    labs(\n        title = \"Distribution of Dataset Access Levels\",\n        x = NULL,\n        y = \"Number of Datasets\"\n    ) +\n    \n    # Theme\n    theme(\n        legend.position = \"none\",\n        panel.grid.major.y = element_blank(),\n        \n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        )\n    )\n\n# P2. Timeline plot with enhancements\np2 &lt;- ggplot(timeline_data,\n             aes(x = issued, \n                 y = cumulative, \n                 fill = access_category)\n) +\n    # Rectangle\n    annotate(\n        \"rect\",\n        xmin = inflection_date,\n        xmax = max(timeline_data$issued),\n        ymin = 0,\n        ymax = max(timeline_data$cumulative),\n        fill = \"gray85\",\n        alpha = 0.3\n    ) +\n    \n    # Geoms\n    geom_area(alpha = 0.8) +\n    geom_line(color = \"white\", linewidth = 0.5) +\n    geom_vline(\n        xintercept = inflection_date, \n        linetype = \"dashed\", \n        color = colors$caption,\n        alpha = 0.7\n    ) +\n    # Note\n    annotate(\n        \"text\", \n        x = inflection_date,\n        y = max(timeline_data$cumulative) * 0.9,\n        label = \"Notable increase in\\narchival activity\",\n        hjust = -0.1,\n        size = 3.5,\n        color = colors$caption,\n        family = fonts$caption\n    ) +\n    \n    # Scales\n    scale_fill_manual(values = colors$palette) +\n    scale_x_date(\n        date_breaks = \"1 year\",\n        date_labels = \"%Y\",\n    ) +\n    scale_y_continuous(\n        expand = expansion(mult = c(0, 0.1)),\n        breaks = function(x) seq(0, max(x), by = 50)\n    ) +\n    \n    # Labs\n    labs(\n        title = \"Cumulative Growth of Archived Datasets\",\n        subtitle = sprintf(\"Note: Only %d out of %d datasets (%.1f%%) have valid dates\",\n                           sum(!is.na(cdc$issued)),\n                           nrow(cdc),\n                           100 * sum(!is.na(cdc$issued)) / nrow(cdc)),\n        x = \"Year\",\n        y = \"Number of Datasets\"\n    ) +\n    \n    # Theme\n    theme(\n        legend.position = \"top\",\n        legend.title = element_blank(),\n        legend.spacing.x = unit(0.2, \"cm\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        \n        plot.title = element_text(\n            size = rel(1.3),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.9),\n            family = fonts$caption,\n            color = colors$caption,\n            margin = margin(b = 10)\n        ),\n        axis.title = element_text(\n            size = rel(0.9),\n            family = fonts$caption,\n            color = colors$caption\n        ),\n    )\n\n# Combine plots \ncombined_plot &lt;- (p1 / p2) +\n    plot_layout(heights = c(0.8, 1.2)) \n\ncombined_plot &lt;- combined_plot +\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text, \n        theme = theme(\n            plot.title = element_text(\n                size   = rel(1.75),\n                family = fonts$title,\n                face   = \"bold\",\n                color  = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),   \n            plot.subtitle = element_text(\n                size   = rel(0.9),\n                family = fonts$subtitle,\n                color  = colors$subtitle,\n                lineheight = 1.2,\n                margin = margin(t = 5, b = 5)\n            ), \n            plot.caption = element_markdown(\n                size   = rel(0.6),\n                family = fonts$caption,\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 10)\n            ),\n            plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n        )\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 6, \n  width = 10,\n  height = 10\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 patchwork_1.3.0 here_1.0.1      glue_1.8.0     \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3         \n[29] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[33] tzdb_0.4.0         commonmark_1.9.2   parallel_4.4.0     ggplotify_0.1.2   \n[37] base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8  jsonlite_1.8.9    \n[41] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[45] magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4     \n[49] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[53] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4   \n[57] vroom_1.6.5        evaluate_1.0.1     markdown_1.13      gridtext_0.1.5    \n[61] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[65] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_06.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 06: CDC Datasets\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_04.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_04.html",
    "title": "Nearly Half of U.S. Counties Face Increased Water Insecurity",
    "section": "",
    "text": "Figure 1: Bar chart showing changes in U.S. county-level water insecurity from 2022 to 2023. The chart reveals that 46% of counties saw increased water insecurity, with 35.5% experiencing a major increase (&gt;50%). 27.6% saw a major decrease, while 16.4% had a moderate decrease, and 10.4% experienced a moderate increase. 10.1% of counties had stable conditions. Annotations highlight that 44% fewer counties were affected by major decreases and 46% more counties became vulnerable to water insecurity.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here            # A Simpler Way to Find Your Files\n    )\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 04) \n\nwater_insecurity_2022 &lt;- tt$water_insecurity_2022 |&gt; clean_names()\nwater_insecurity_2023 &lt;- tt$water_insecurity_2023 |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(water_insecurity_2022)\nskim(water_insecurity_2022)\n\nglimpse(water_insecurity_2023)\nskim(water_insecurity_2023)\n\n\n4. Tidy Data\n\nShow codewater_change_clean &lt;- water_insecurity_2022 |&gt;\n    # Join both datasets\n    inner_join(water_insecurity_2023, by = \"geoid\", suffix = c(\"_2022\", \"_2023\")) |&gt;\n    \n    # Remove rows with NA in plumbing for 2022 or 2023 \n    filter(!is.na(plumbing_2022), !is.na(plumbing_2023)) |&gt;\n    \n    # Perform calculations and categorization in a single mutate\n    mutate(\n        # Calculate pct_change based on the percent_lacking_plumbing for 2022 and 2023\n        pct_change = case_when(\n            percent_lacking_plumbing_2022 == 0 & percent_lacking_plumbing_2023 &gt; 0 ~ 100,\n            percent_lacking_plumbing_2022 == 0 & percent_lacking_plumbing_2023 == 0 ~ 0,\n            TRUE ~ ((percent_lacking_plumbing_2023 - percent_lacking_plumbing_2022) / \n                        percent_lacking_plumbing_2022) * 100\n        ),\n        \n        # Replace any NA values in pct_change with 0\n        pct_change = replace_na(pct_change, 0),\n        \n        # Categorize the pct_change into different categories \n        change_category = factor(case_when(\n            pct_change &lt; -50 ~ \"Major Decrease (&gt;50%)\",\n            pct_change &lt; -10 ~ \"Moderate Decrease (10-50%)\",\n            pct_change &gt;= -10 & pct_change &lt;= 10 ~ \"Stable (±10%)\",\n            pct_change &gt; 10 & pct_change &lt;= 50 ~ \"Moderate Increase (10-50%)\",\n            pct_change &gt; 50 ~ \"Major Increase (&gt;50%)\"\n        ), levels = c(\n            \"Major Increase (&gt;50%)\",\n            \"Moderate Increase (10-50%)\", \n            \"Stable (±10%)\",\n            \"Moderate Decrease (10-50%)\",\n            \"Major Decrease (&gt;50%)\"\n        )),\n        \n        # Add the 'impact' category in the same mutate call\n        impact = case_when(\n            str_detect(change_category, \"Increase\") ~ \"Worsening\",\n            str_detect(change_category, \"Decrease\") ~ \"Improving\",\n            TRUE ~ \"No Change\"\n        )\n    )\n\n# Housekeeping\nrm(water_insecurity_2022, water_insecurity_2023)\n\n### |-  plot data ----\ndata_plot &lt;- water_change_clean |&gt;\n    count(change_category) |&gt;\n    mutate(\n        pct = n / sum(n) * 100,\n        category_label = recode(change_category,\n                                \"Major Increase (&gt;50%)\" = \"Major Increase\\n(&gt;50%)\",\n                                \"Moderate Increase (10-50%)\" = \"Moderate Increase\\n(10-50%)\",\n                                \"Stable (±10%)\" = \"Stable\\n(±10%)\",\n                                \"Moderate Decrease (10-50%)\" = \"Moderate Decrease\\n(10-50%)\",\n                                \"Major Decrease (&gt;50%)\" = \"Major Decrease\\n(&gt;50%)\"\n        ),\n        impact = case_when(\n            str_detect(change_category, \"Increase\") ~ \"Worsening\",\n            str_detect(change_category, \"Decrease\") ~ \"Improving\",\n            TRUE ~ \"No Change\"\n        )\n    ) \n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n    \"Improving\" = \"#4575b4\",   # Blue for improving\n    \"No Change\" = \"#808080\",   # Gray for no change\n    \"Worsening\" = \"#d73027\"    # Red for worsening\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Nearly Half of U.S. Counties Face Increased Water Insecurity\")\n\nsubtitle_text &lt;- str_glue(\"46% of counties reported more households without basic plumbing,\\naffecting over 800 counties (2022-2023)\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 04,\n    source_text = \"US Census Data from tidycensus\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis formatting\n        axis.title = element_text(color = colors$text, size = 10),\n        axis.text = element_text(color = colors$text, size = 9),\n        \n        # Grid customization\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        \n        # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- data_plot |&gt; \n    ggplot(aes(x = category_label, y = pct, fill = impact)) +\n    \n    # Geoms\n    geom_col(width = 0.85) +\n    geom_text(aes(label = sprintf(\"%.1f%%\\n(n=%d)\", pct, n)), hjust = -0.1, color = colors$text) +\n    # Worsening bracket annotation\n    annotate(\"segment\", x = 1, xend = 2, y = 42, yend = 42, linewidth = 0.5, color = colors$palette[3]) +\n    annotate(\"segment\", x = 1, xend = 1, y = 35, yend = 42, linewidth = 0.5, color = colors$palette[3]) +\n    annotate(\"segment\", x = 2, xend = 2, y = 35, yend = 42, linewidth = 0.5, color = colors$palette[3]) +\n    annotate(\"text\", x = 1.5, y = 48, label = \"46%\\nMore Vulnerable\", fontface = \"bold\", color = colors$palette[3]) +\n    # Improving bracket annotation\n    annotate(\"segment\", x = 4, xend = 5, y = 42, yend = 42, linewidth = 0.5, color = colors$palette[1]) +\n    annotate(\"segment\", x = 4, xend = 4, y = 35, yend = 42, linewidth = 0.5, color = colors$palette[1]) +\n    annotate(\"segment\", x = 5, xend = 5, y = 35, yend = 42, linewidth = 0.5, color = colors$palette[1]) +\n    annotate(\"text\", x = 4.5, y = 48, label = \"44%\\nFewer Affected\", fontface = \"bold\", color = colors$palette[1]) +\n    \n    # Scales\n    scale_x_discrete() +\n    scale_y_continuous(limits = c(0, 50)) +\n    scale_fill_manual(values = colors$palette) +    \n    coord_flip(clip = 'off') +\n    \n    # Labs\n    labs(\n        x = NULL,\n        y = \"Percent of Counties\",\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text,\n    ) + \n    \n    # Theme\n   theme(\n       plot.title = element_text(\n            size   = rel(1.5),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size   = rel(1.1),\n            family = fonts$subtitle,\n            color  = colors$subtitle,\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size   = rel(0.6),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n        )\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(p, type = \"tidytuesday\", \n          year = 2025, week = 04, width = 8, height = 8)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    skimr_2.1.5    \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.4.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         fansi_1.0.6       \n[13] pkgconfig_2.0.3    lifecycle_1.0.4    farver_2.1.2       compiler_4.4.0    \n[17] textshaping_0.4.0  munsell_0.5.1      repr_1.1.7         codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[25] pillar_1.9.0       magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1  \n[29] digest_0.6.37      stringi_1.8.4      labeling_0.4.3     rprojroot_2.0.4   \n[33] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.3         \n[37] magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4         withr_3.0.2       \n[41] rappdirs_0.3.3     bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29    \n[45] tidytuesdayR_1.1.2 gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3        \n[49] hms_1.1.3          evaluate_1.0.1     knitr_1.49         markdown_1.13     \n[53] rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[57] renv_1.0.3         rstudioapi_0.17.1  vroom_1.6.5        jsonlite_1.8.9    \n[61] R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_04.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 04: Water Insecurity\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_02.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_02.html",
    "title": "Track Connections at posit::conf (2023-2024)",
    "section": "",
    "text": "Figure 1: A Kamada-Kawai network visualization of posit::conf tracks (2023-2024), where tracks are nodes connected by gray edges. Thicker edges indicate more shared words between track titles, and larger blue nodes show tracks with more connections. The network reveals clusters of related topics and central tracks that bridge different conference themes.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    tidytext,       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools \n    ggraph,         # An Implementation of Grammar of Graphics for Graphs and Networks \n    igraph,         # Network Analysis and Visualization \n    tidygraph       # A Tidy API for Graph Manipulation\n    #withr           # Run Code 'With' Temporarily Modified Global State\n)\n\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 02) \n\nconf2023 &lt;- tt$conf2023 |&gt; clean_names()\nconf2024 &lt;- tt$conf2024 |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(conf2023)\nskim(conf2023)\n\nglimpse(conf2024)\nskim(conf2024)\n\n\n4. Tidy Data\n\nShow code# Prepare 2023 data\nconf2023_clean &lt;- conf2023 |&gt;\n    select(\n        speaker_name,\n        title = session_title,\n        description = session_abstract,\n        track = block_track_title,\n        session_type,\n        speaker_affiliation,\n        session_date,\n        session_start,\n        session_length\n    ) |&gt;\n    mutate(\n        year = 2023,\n        has_video = FALSE\n    )\n\n# Prepare 2024 data\nconf2024_clean &lt;- conf2024 |&gt;\n    select(\n        speaker_name,\n        title = talk_title,\n        description,\n        track,\n        yt_url\n    ) |&gt;\n    mutate(\n        year = 2024,\n        has_video = TRUE,\n        session_type = case_when(\n            str_to_lower(track) == \"keynote\" ~ \"keynote\",\n            TRUE ~ \"regular\"\n        ),\n        speaker_affiliation = NA_character_,\n        session_date = NA,\n        session_start = NA,\n        session_length = NA\n    )\n\n# Combine datasets\nconf_combined &lt;- bind_rows(conf2023_clean, conf2024_clean) \n\n### |-  plot data ----\n\n# Create topic similarity network\ntitle_similarity &lt;- conf_combined |&gt;\n    # Split titles into individual words\n    unnest_tokens(word, title) |&gt;\n    \n    # Remove common stop words (e.g., \"the\", \"and\", \"in\")\n    anti_join(stop_words) |&gt;\n    \n    # Clean up words:\n    # Remove numbers and single-letter words\n    filter(!str_detect(word, \"^[0-9]+$\"),\n           str_length(word) &gt; 1) |&gt;\n    \n    # Count word occurrences per track\n    count(track, word) |&gt;\n    \n    # Focus on meaningful patterns:\n    group_by(track) |&gt;\n    # Keep words that appear at least twice\n    filter(n &gt;= 2) |&gt;\n    # Take top 8 most frequent words per track\n    slice_max(n, n = 8) |&gt;\n    ungroup()\n\n# Create network edges by finding pairs of tracks that share common words\nedges &lt;- title_similarity |&gt;\n    # Group by each unique word\n    group_by(word) |&gt;\n    \n    # Keep only words that appear in more than one track\n    filter(n() &gt; 1) |&gt;\n    \n    # For each word group, create pairs of tracks that share the word\n    summarize(\n        combinations = list(data.frame(\n            # First track in each pair (taking first row of combinations)\n            X1 = combn(track, 2)[1,],\n            # Second track in each pair (taking second row of combinations) \n            X2 = combn(track, 2)[2,]\n        ))\n    ) |&gt;\n    \n    # Convert the list of combinations into rows\n    unnest(combinations) |&gt;\n    \n    # Count how many words each pair of tracks have in common\n    # This creates the 'weight' of the connection between tracks\n    count(X1, X2, name = \"weight\")\n\n# Create network nodes\nnodes &lt;- tibble(\n    name = unique(c(edges$X1, edges$X2)),\n    type = \"track\"\n)\n\n# Create network graph using tidygraph\ngraph &lt;- tbl_graph(\n    nodes = nodes,\n    edges = edges,\n    directed = FALSE\n) |&gt;\n    # Add degree centrality using mutate\n    mutate(\n        degree = centrality_degree()\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"gray50\", \"#297ACC\"))\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Track Connections at posit::conf (2023-2024)\")\n\nsubtitle_text &lt;- str_glue(\n    \"__Kamada–Kawai__ Forced-Directed Network analysis showing how conference tracks are related&lt;br&gt;\n    through shared words in talk titles.&lt;br&gt;&lt;br&gt;\n    __Node size__ corresponds to __node degree__ (the number of connections to other tracks),&lt;br&gt;\n    __edge thickness__ shows the number of shared words between tracks.\"\n)\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 02,\n    source_text = \"posit::conf attendee portal 2023-2024\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Weekly-specific modifications\n        legend.box = \"vertical\",          # Stack legends vertically\n        # legend.position = \"top\",\n        legend.position      = c(0.95, 1.28),    # x=1, y=1 puts it in the upper-right\n        legend.justification = c(1, 1),          # Anchor the legend’s top-right corner\n        legend.box.margin  = margin(b = 15),\n        legend.spacing     = unit(0.2, \"cm\"),\n        legend.box.spacing = unit(0.2, \"cm\"),\n        legend.key.size    = unit(0.8, \"lines\"),\n        legend.text        = element_text(size = 9),\n        legend.title       = element_text(size = 10, face = \"bold\"),\n        panel.grid.major   = element_blank(),\n        panel.grid.minor   = element_blank()\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\n\n# Set seed for reproducibility\nset.seed(123)  \n\n# Create layout using tidygraph functions\ngraph_laid_out &lt;- graph |&gt;\n    activate(nodes) |&gt;\n    create_layout(layout = \"kk\")\n\n# ggraph call\np &lt;- ggraph(graph_laid_out) +\n    # Geom\n    geom_edge_link(\n        aes(edge_alpha = weight, \n            edge_width = weight),\n        edge_color = colors$palette[1],\n        show.legend = TRUE,\n        edge_linetype = \"solid\",\n        alpha = 0.5,    \n        lineend = \"round\"\n    ) +\n    geom_node_point(\n        aes(size = degree),\n        color = colors$palette[2],\n        alpha = 0.8\n    ) +\n    geom_node_label(\n        aes(label = str_wrap(name, 20)),\n        repel        = TRUE,\n        fill = alpha(\"white\", 0.8),  \n        label.size   = 0,     # remove border\n        label.padding = unit(0.15, \"lines\"),\n        size         = 3.0,\n        family       = fonts$text,\n        fontface     = \"bold\",\n        color        = colors$text,\n        # Additional ggrepel arguments:\n        box.padding  = 0.4,        # Increase if labels overlap too much\n        point.padding = 0.3,       # Space between node and label\n        force        = 1.0,        # Higher = stronger repel\n        force_pull   = 0.1,        # Pull label toward or away from point\n        max.overlaps = Inf\n    ) +\n    # Scales\n    scale_edge_width(range = c(0.5, 2.5)) +\n    scale_size(range = c(3, 8)) +\n    scale_edge_alpha(range = c(0.2, 0.8)) +\n    \n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        edge_alpha = \"Shared Words\",   \n        edge_width = \"Connection Strength\",   \n        size = \"Node Degree\" \n    ) +\n    # Combine similar legends\n    guides(\n        edge_alpha = guide_legend(\n            title = \"Connection Strength\",\n            override.aes = list(alpha = 0.6)\n        ),\n        edge_width = \"none\",  # Hide duplicate legend\n        size = guide_legend(\n            title = \"Node Degree\",\n            override.aes = list(alpha = 0.8)\n        ) \n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size   = rel(2.6),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_markdown(\n            size   = rel(1.1),\n            family = fonts$subtitle,\n            color  = colors$subtitle,\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size   = rel(0.65),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n        )\n    )  \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(p, type = \"tidytuesday\", \n          year = 2025, week = 02, width = 14, height = 10)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] tidygraph_1.3.1 igraph_2.1.1    ggraph_2.2.1    tidytext_0.4.2 \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    skimr_2.1.5    \n [9] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n[13] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[17] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[21] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       viridis_0.6.5     \n [5] fastmap_1.2.0      gh_1.4.1           tweenr_2.0.3       janeaustenr_1.0.0 \n [9] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    tokenizers_0.3.0  \n[13] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[17] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[21] graphlayouts_1.2.0 htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0        \n[25] xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2       \n[29] grid_4.4.0         polyclip_1.10-7    fansi_1.0.6        colorspace_2.1-1  \n[33] gitcreds_0.1.2     MASS_7.3-60.2      cli_3.6.3          crayon_1.5.3      \n[37] rmarkdown_2.29     ragg_1.3.3         generics_0.1.3     rstudioapi_0.17.1 \n[41] tzdb_0.4.0         commonmark_1.9.2   cachem_1.1.0       ggforce_0.4.2     \n[45] parallel_4.4.0     base64enc_0.1-3    vctrs_0.6.5        Matrix_1.7-0      \n[49] jsonlite_1.8.9     hms_1.1.3          bit64_4.5.2        ggrepel_0.9.6     \n[53] magick_2.8.5       systemfonts_1.1.0  codetools_0.2-20   stringi_1.8.4     \n[57] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[61] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        textshaping_0.4.0 \n[65] rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1     lattice_0.22-6    \n[69] markdown_1.13      SnowballC_0.7.1    gridtext_0.1.5     memoise_2.0.1     \n[73] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      gridExtra_2.3     \n[77] xfun_0.49          pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_02.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 02: posit::conf talks\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_52.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_52.html",
    "title": "More Holidays Associated with Lower Air Traffic Volatility in Larger Markets",
    "section": "",
    "text": "Figure 1: Scatter plot panels show the relationship between average monthly holidays and air traffic volatility (CV) across different market sizes (Small, Medium, Large, Very Large). Larger markets show lower volatility (CV) with more holidays. Data points are sized by annual passenger traffic, with industry median volatility and trend lines highlighted. Source: WorldPop Hub.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here            # A Simpler Way to Find Your Files\n)\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# tt &lt;- tidytuesdayR::tt_load(2024, week = 50)\n#\n# parfumo_data_raw  &lt;- tt$parfumo_data |&gt; clean_names()\n#\n# tidytuesdayR::readme(tt)\n# rm(tt)\n\n# Option 2: Read directly from GitHub\nglobal_holidays_raw &lt;- readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-24/global_holidays.csv') |&gt; \n    clean_names()\n\nmonthly_passengers_raw &lt;- readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-24/monthly_passengers.csv') |&gt; \n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(global_holidays_raw)\nskim(global_holidays_raw)\n\nglimpse(monthly_passengers_raw)\nskim(monthly_passengers_raw)\n\n\n4. Tidy Data\n\nShow code### |- tidy data ----\n\n## Clean and join the datasets ----\nmonthly_passengers_clean &lt;- monthly_passengers_raw |&gt;\n    mutate(\n        date = ymd(paste(year, month, \"01\", sep = \"-\")),\n        total_passengers = coalesce(total, total_os)     # Use total_os when total is NA\n    )\n\nmonthly_holidays_clean &lt;- global_holidays_raw |&gt;\n    mutate(\n        year = year(date),\n        month = month(date)\n    ) |&gt;\n    group_by(iso3, year, month) |&gt;\n    summarise(\n        holiday_count = n(),\n        public_holidays = sum(type == \"Public holiday\"),\n        .groups = \"drop\"\n    )\n\ncombined_data &lt;- monthly_passengers_clean |&gt;\n    left_join(monthly_holidays_clean, by = c(\"iso3\", \"year\", \"month\"))\n\n# Housekeeping\nrm(global_holidays_raw, monthly_passengers_raw, monthly_holidays_clean, monthly_passengers_clean)\n\n\n## data plot ---\nvolatility_df &lt;- combined_data |&gt;\n    # Calculate summary statistics by country\n    group_by(iso3) |&gt;\n    summarise(\n        mean_traffic = mean(total_passengers, na.rm = TRUE),\n        sd_traffic = sd(total_passengers, na.rm = TRUE),\n        cv = sd_traffic / mean_traffic,\n        avg_holidays = mean(holiday_count, na.rm = TRUE),\n        total_observations = n(),\n        traffic_size = sum(total_passengers, na.rm = TRUE),\n        .groups = \"drop\"\n    ) |&gt;\n    # Remove NA, infinite, or outlier values\n    filter(\n        complete.cases(cv, avg_holidays),\n        total_observations &gt;= 12,              # At least one year of data\n        cv &gt;= 0,                               # Ensure no negative coefficients of variation\n        cv &lt;= quantile(cv, 0.95, na.rm = TRUE) # Remove extreme outliers\n    ) |&gt;\n    # Add size categories for visualization\n    mutate(\n        size_category = cut(\n            traffic_size,\n            breaks = quantile(traffic_size, probs = seq(0, 1, 0.25), na.rm = TRUE),\n            labels = c(\"Small\", \"Medium\", \"Large\", \"Very Large\"),\n            include.lowest = TRUE\n        )\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"#4B79B7\", \"#F8F9FA\", \"#2C3E50\", \"#34495E\", \"#7F8C8D\"))\n\n### |-  titles and caption ----\ntitle_text    &lt;- str_glue(\"More Holidays Associated with Lower Air Traffic Volatility\\nin Larger Markets\")\nsubtitle_text &lt;- str_glue(\"Higher holiday frequency correlates with reduced traffic volatility, especially in larger markets&lt;br&gt;\n                          Lower CV values indicate more stable traffic patterns&lt;br&gt;&lt;br&gt;\n                          **Coefficient of Variation in Traffic**\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2024,\n    tt_week = 52,\n    source_text = \"WorldPop Hub\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Weekly-specific modifications\n        axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n        \n        panel.spacing.x       = unit(2, 'lines'),\n        panel.spacing.y       = unit(1, 'lines'),\n        panel.grid.major.x    = element_blank(),\n        panel.grid.major.y    = element_line(color = alpha(colors$palette[5], 0.2), linewidth = 0.2),\n        panel.grid.minor      = element_blank(),\n        \n        strip.text            = element_textbox(\n            size              = rel(0.9),\n            face              = 'bold',\n            color             = colors$palette[3],\n            fill              = alpha(colors$palette[1], 0.1),\n            box.color         = alpha(colors$palette[1], 0.5),\n            halign            = 0.5,\n            linetype          = 1,\n            r                 = unit(3, \"pt\"),\n            width             = unit(1, \"npc\"),\n            padding           = margin(5, 10, 5, 10),\n            margin            = margin(b = 10)\n        ),\n        \n        legend.margin         = margin(-25, 5, 0, 0), # align the legend with the y-axis label\n        legend.position       = \"top\",\n        legend.title          = element_text(size = rel(0.7)),\n        legend.text           = element_text(size = rel(0.6)),\n        legend.justification.top = \"right\",\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(volatility_df, aes(x = avg_holidays, y = cv)) +\n    # Add reference line for overall median\n    geom_hline(\n        yintercept = median(volatility_df$cv),\n        linetype = \"dashed\",\n        color = \"gray50\",\n        alpha = 0.3\n    ) +\n    # Add points\n    geom_point(\n        aes(\n            size = traffic_size,\n            alpha = cv  # Vary transparency by CV\n        ),\n        color = colors$palette[1]\n    ) +\n    # Add trend line\n    geom_smooth(\n        color = colors$palette[3],\n        method = \"loess\",\n        linewidth = 1,\n        se = TRUE\n    ) +\n    # Add labels for extreme points (cv)\n    ggrepel::geom_text_repel(\n        data = volatility_df |&gt; \n            group_by(size_category) |&gt;  \n            filter(cv == max(cv) | cv == min(cv)),\n        aes(label = iso3),\n        size = 3,\n        color = colors$palette[4],\n        max.overlaps = 2,\n        box.padding = 0.5,\n        segment.color = colors$palette[5],\n        segment.alpha = 0.5\n    ) +\n    # Add single annotation for the median line\n    geom_text(\n        data = volatility_df |&gt; filter(size_category == \"Small\"),\n        x = 9,  \n        y = median(volatility_df$cv) + 0.02, \n        label = \"Industry median volatility\",\n        size = 3,\n        color = \"gray50\",\n        hjust = 1,\n        vjust = -0.5\n    ) +\n    # Add correlation annotation in each facet\n    geom_text(\n        data = volatility_df |&gt;  \n            group_by(size_category) |&gt;\n            summarise(\n                cor = cor(avg_holidays, cv),\n                .groups = \"drop\"\n            ),\n        aes(x = 8, y = 0.65, \n            label = sprintf(\"r = %.2f\", cor)),\n        size = 3,\n        hjust = 1\n    ) +\n    \n    # Scales\n    scale_y_continuous(\n        breaks = seq(0, 1, by = .25),\n        limits = c(-.25, .75),\n        labels = percent_format()\n    ) +\n    scale_x_continuous(\n        breaks = seq(2, 8, by = 2),\n        limits = c(1, 9),\n        expand = expansion(mult = c(0.02, 0.08))          \n    ) +\n    scale_size_continuous(\n        range = c(2, 8),\n        labels = scales::label_number(scale = 1e-6, suffix = \"M\")\n    ) +\n    scale_alpha_continuous(\n        range = c(0.4, 0.8),\n        guide = \"none\"\n    ) +\n    # Labs\n    labs(\n        x = \"Average Number of Holidays per Month\",\n        y = NULL,\n        size  = \"Annual Passenger Traffic (M)\",\n        color = \"Market Size\",\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text\n    ) +\n    # Facets\n    facet_wrap(\n        ~size_category,\n        labeller = as_labeller(function(x) paste(x, \"Market\")),\n        scales = \"fixed\"\n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size   = rel(2),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_markdown(\n            size   = rel(1),\n            family = fonts$subtitle,\n            color  = colors$subtitle,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.caption = element_markdown(\n            family = fonts$caption,\n            size   = rel(0.65),\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n        )\n    )   \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(p, type = \"tidytuesday\", \n          year = 2024, week = 52, width = 10, height = 10)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] gghighlight_0.4.1 marquee_0.1.0     patchwork_1.3.0   camcorder_0.1.0  \n [5] here_1.0.1        glue_1.8.0        scales_1.3.0      skimr_2.1.5      \n [9] janitor_2.2.0     showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9   \n[13] ggtext_0.1.2      lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n[17] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n[21] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pacman_0.5.1       pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4   \n[17] compiler_4.4.0     farver_2.1.2       textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        bit64_4.5.2        timechange_0.3.0  \n[45] rmarkdown_2.29     bit_4.5.0          hms_1.1.3          evaluate_1.0.1    \n[49] knitr_1.49         markdown_1.13      gridGraphics_0.5-1 rlang_1.1.4       \n[53] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[57] vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[61] R6_2.5.1           fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2024_52.qmd.\nFor the full repository, click here.\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_50.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_50.html",
    "title": "Top 20 Perfume Brands Ranked by Average Rating and Portfolio Size",
    "section": "",
    "text": "Figure 1: Mekko chart displaying the top 20 perfume brands ranked by average rating and portfolio size. The length of each bar represents the brand’s average rating, and the height represents the number of fragrances. Notable brands include Ensar Oud, Guerlain, and Sunnamusk, with annotations highlighting their portfolio sizes.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n    pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here            # A Simpler Way to Find Your Files\n    )   \n})\n\nsuppressMessages(source(here::here(\"_setup.R\")))\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  16,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n\n2. Read in the Data\n\nShow code# tt &lt;- tidytuesdayR::tt_load(2024, week = 50)\n#\n# parfumo_data_raw  &lt;- tt$parfumo_data |&gt; clean_names()\n#\n# tidytuesdayR::readme(tt)\n# rm(tt)\n\n# Option 2: Read directly from GitHub\nparfumo_data_raw &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-10/parfumo_data_clean.csv\")\nparfumo_data_raw &lt;- parfumo_data_raw |&gt; clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(parfumo_data_raw)\nskim(parfumo_data_raw)\n\n\n4. Tidy Data\n\nShow code### |- tidy data ----\n\nparfumo_brand_stats &lt;- parfumo_data_raw |&gt;\n    group_by(brand) |&gt;\n    summarise(\n        n_fragrances = n(),\n        avg_rating = mean(rating_value, na.rm = TRUE),\n        .groups = \"drop\"\n    ) |&gt;\n    filter(n_fragrances &gt;= 50) |&gt; # Filter for brands with at least 50 fragrances\n    arrange(desc(avg_rating)) |&gt;\n    head(20) |&gt; # Select the top 20 brands based on average rating\n    # Create y-coordinates for rectangles\n    mutate(\n        ymax = cumsum(n_fragrances),\n        ymin = lag(ymax, default = 0),\n        font_size = ifelse(n_fragrances &gt; 200, 7.5, 4.5), # Larger bars get a bigger font size\n        brand = case_when(\n            brand == \"Abdul Samad Al Qurashi / عبدالصمد القرشي\" ~ \"Abdul Samad Al Qurashi\", # Arabic characters were not rendering properly\n            brand == \"Teone Reinthal Natural Perfume\" ~ \"Teone Reinthal\\nNatural Perfume\",\n            TRUE ~ as.character(brand)\n        )\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"\ntitle_col    &lt;- \"gray20\"\nsubtitle_col &lt;- \"gray20\"\ncaption_col  &lt;- \"gray30\"\ntext_col     &lt;- \"gray30\"\nnote_col     &lt;- \"gray40\" \nbar_col      &lt;- \"#1B2B48\"\n\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 50 } &bull; Source: Parfumo Fragrance Dataset&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Top 20 Perfume Brands Ranked by Average Rating&lt;br&gt;\n                          and Portfolio Size\")\nsubtitle_text &lt;- str_glue(\"This chart displays the leading perfume brands based on their average&lt;br&gt;\n                          customer ratings. The length of each bar represents the brand\\\\'s average&lt;br&gt;\n                          rating, while the height indicates the number of fragrances in their portfolio.\")\ncaption_text &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nsetup_fonts()\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))\n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"plot\",\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1),\n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y.right    = element_text(margin = margin(0, 20, 0, 10), size = rel(1.1),\n                                         color = text_col, family = \"text\", face = \"bold\",\n                                         angle = 0, vjust = 1.0, hjust = 1),\n    axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n    axis.title            = element_text(size = rel(0.93), face = \"bold\", color = text_col),\n    axis.text             = element_text(size = rel(0.79), color = text_col),\n    legend.title          = element_blank(),\n    legend.text           = element_text(size = rel(0.71), color = text_col),\n    panel.grid.major.x    = element_blank(),\n    panel.grid.major.y    = element_line(color = \"gray90\", linewidth = 0.2),\n    panel.grid.minor      = element_blank()\n)\n\n\n6. Plot\n\nShow code### |-  initial plot ----\n\np &lt;- ggplot(parfumo_brand_stats) +\n    # Horizontal bar chart with variable width\n    geom_rect(\n        aes(\n            xmin = 0,\n            xmax = avg_rating,\n            ymin = ymin,\n            ymax = ymax\n        ),\n        color = \"#e0e0e0\",\n        fill = bar_col,\n        linewidth = ifelse(parfumo_brand_stats$n_fragrances &gt; 200, 1, 0.3)\n    ) +\n    # Add brand names to bars\n    geom_text(\n        aes(\n            x = 0.2,\n            y = ymin + ((ymax - ymin) / 2),\n            label = ifelse(n_fragrances &gt;= 80, brand, \"\"),\n        ),\n        color = ifelse(parfumo_brand_stats$n_fragrances &lt; 200, \"#e0e0e0\", \"white\"),\n        hjust = 0,\n        size = parfumo_brand_stats$font_size\n    ) +\n    # Add ratings to bars\n    geom_text(\n        aes(\n            x = avg_rating - 0.3,\n            y = ymin + ((ymax - ymin) / 2),\n            label = ifelse(n_fragrances &gt;= 80,\n                           paste(sprintf(\"(%.1f)\", avg_rating)),\n                           \"\"\n            ),\n        ),\n        color = ifelse(parfumo_brand_stats$n_fragrances &lt; 200, \"#e0e0e0\", \"white\"),\n        hjust = 1,\n        size = 3.2\n    ) +\n    # Scales\n    scale_x_continuous(\n        limits = c(0, 11),\n        breaks = seq(0, 11, 2),\n        expand = c(0, 0, 0.05, 0)\n    ) +\n    scale_y_continuous(\n        expand = c(0, 0, 0.01, 0),\n        position = \"right\",\n        labels = scales::comma,\n        breaks = seq(0, max(parfumo_brand_stats$ymax), 1000)\n    ) +\n    # Labs\n    labs(\n        x = \"Average Rating\",\n        y = \"Number of\\nFragrances\",\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text\n    ) +\n    # Theme\n    theme(\n        plot.title      = element_markdown(\n            size        = rel(1.8),\n            family      = \"title\",\n            face        = \"bold\",\n            color       = title_col,\n            lineheight  = 1.1,\n            margin      = margin(t = 5, b = 5)\n        ),\n        plot.subtitle   = element_markdown(\n            size        = rel(1.06),\n            family      = \"subtitle\",\n            color       = text_col,\n            lineheight  = 1.1,\n            margin      = margin(t = 5, b = 20)\n        ),\n        plot.caption    = element_markdown(\n            size        = rel(.65),\n            family      = \"caption\",\n            color       = caption_col,\n            lineheight  = 0.65,\n            hjust       = 0.5,\n            halign      = 0.5,\n            margin      = margin(t = 10, b = 5)\n        ),\n    )\n\nannotation_data &lt;- tibble(\n    x = c(9, 9, 9),\n    y = c(parfumo_brand_stats$ymin[3] + ((parfumo_brand_stats$ymax[3] - parfumo_brand_stats$ymin[3]) / 2),\n          parfumo_brand_stats$ymin[18] + ((parfumo_brand_stats$ymax[18] - parfumo_brand_stats$ymin[18]) / 2),\n          parfumo_brand_stats$ymin[8] + ((parfumo_brand_stats$ymax[8] - parfumo_brand_stats$ymin[8]) / 2)),\n    xend = c(parfumo_brand_stats$avg_rating[3], parfumo_brand_stats$avg_rating[18], parfumo_brand_stats$avg_rating[8]),\n    yend = c((parfumo_brand_stats$ymin[3] + parfumo_brand_stats$ymax[3]) / 2,\n             (parfumo_brand_stats$ymin[18] + parfumo_brand_stats$ymax[18]) / 2,\n             (parfumo_brand_stats$ymin[8] + parfumo_brand_stats$ymax[8]) / 2),\n    label = c(\"Ensar Oud / Oriscent has\\n534 fragrances in its portfolio\",\n              \"Guerlain has 586 fragrances\\nin its portfolio\",\n              \"Sunnamusk has 57 fragrances\\nin its portfolio\")\n)\n\np &lt;- p +\n    # Add annotation outside the grid\n    coord_cartesian(\n        expand = FALSE,\n        clip = \"off\",\n        xlim = c(0, 11)\n    ) +\n    \n    # Add labels and curves programmatically\n    geom_label(\n        data = annotation_data,\n        aes(\n            x = x + 0.2,\n            y = y,\n            label = label\n        ),\n        size = 4,\n        color = note_col,\n        hjust = 0,\n        lineheight = 1,\n        label.size = NA,\n        label.padding = unit(0, \"lines\"),\n        fill = \"transparent\"\n    ) +\n    geom_curve(\n        data = annotation_data,\n        aes(\n            x = x,\n            y = y,\n            xend = xend,\n            yend = yend\n        ),\n        curvature = 0,\n        color = note_col,\n        arrow = arrow(type = \"closed\", length = unit(0.1, \"inches\"))\n    )  \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot(p, type = \"tidytuesday\", year = 2024, week = 50, height = 16, width = 8)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    skimr_2.1.5    \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      camcorder_0.1.0   magick_2.8.5      commonmark_1.9.2 \n[29] tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4     rsvg_2.6.1       \n[33] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[37] cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[41] withr_3.0.2       bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29   \n[45] bit_4.5.0         ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[49] knitr_1.49        markdown_1.13     rlang_1.1.4       gridtext_0.1.5   \n[53] Rcpp_1.0.13-1     xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[57] rstudioapi_0.17.1 vroom_1.6.5       jsonlite_1.8.9    R6_2.5.1         \n[61] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2024_50.qmd.\nFor the full repository, click here.\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_48.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_48.html",
    "title": "Border Encounters by Demographic and Authority Type",
    "section": "",
    "text": "Figure 1: A four-panel visualization of U.S. Border Encounters (2020-2024). The top left shows increasing trends in encounters across demographic groups, with Single Adults being the highest. The top right displays a U.S. map highlighting border states with Texas in orange. The bottom left compares Title 8 vs Title 42 processing by demographic group. The bottom right shows seasonal patterns of encounters by country, with Mexico showing consistently higher numbers.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    scales,            # Scale Functions for Visualization\n    glue,              # Interpreted String Literals\n    here,              # A Simpler Way to Find Your Files\n    patchwork,         # The Composer of Plots\n    usmap              # US Maps Including Alaska and Hawaii\n  )   \n})\n\nsuppressMessages(source(here::here(\"_setup.R\")))\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  16,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2024, week = 48) \n\ncbp_resp  &lt;- tt$cbp_resp |&gt; clean_names()\ncbp_state &lt;- tt$cbp_state |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(cbp_resp)\nglimpse(cbp_state)\n\n\n4. Tidy Data\n\nShow code### |- tidy data ----\n\n# 1. Demographic Evolution Data\ndemographic_trends_df &lt;- cbp_resp |&gt;\n    group_by(fiscal_year, demographic) |&gt;\n    summarise(total_encounters = sum(encounter_count), .groups = 'drop') |&gt;\n    arrange(fiscal_year, demographic)\n\n# Get end points for direct labeling\nlabel_data &lt;- demographic_trends_df |&gt;\n    filter(fiscal_year == max(fiscal_year))\n\n\n# 2. State Map Data\nstate_map_df &lt;- cbp_state |&gt;\n    group_by(state) |&gt;\n    summarise(encounter_count = sum(encounter_count), .groups = 'drop')\n\n# 3. Demographic Authority Data\ndemographic_authority_df &lt;- cbp_resp |&gt;\n    group_by(demographic, title_of_authority) |&gt;\n    summarise(total_encounters = sum(encounter_count), .groups = 'drop') |&gt;\n    pivot_wider(\n        names_from = title_of_authority,\n        values_from = total_encounters\n    ) |&gt;\n    mutate(\n        demographic = fct_reorder(demographic, `Title 8`),  \n        `Title 8` = `Title 8` / 1e6,\n        `Title 42` = `Title 42` / 1e6\n    )\n\n# 4. Seasonal Citizenship Data\n# Get correct month order (Fiscal Year)\nmonth_order &lt;- c(\"OCT\", \"NOV\", \"DEC\", \"JAN\", \"FEB\", \"MAR\", \n                 \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\")\n\ntop_10_citizenship &lt;- cbp_resp |&gt;\n    group_by(citizenship) |&gt;\n    summarise(total_encounters = sum(encounter_count), .groups = 'drop') |&gt;\n    arrange(desc(total_encounters)) |&gt;\n    slice_head(n = 10) |&gt;\n    pull(citizenship)\n\n# Get top 5 countries instead of 10 to reduce visual complexity\ntop_5_citizenship_df &lt;- head(top_10_citizenship, 5)\n\nseasonal_citizenship_df &lt;- cbp_resp |&gt;\n    filter(citizenship %in% top_10_citizenship) |&gt;\n    group_by(month_abbv, citizenship) |&gt;\n    summarise(avg_encounters = mean(encounter_count), .groups = 'drop') |&gt;\n    mutate(\n        month_abbv = factor(month_abbv, levels = month_order),\n        citizenship = factor(citizenship, levels = top_10_citizenship)\n    )\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray30\"  \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 48 } &bull; Source: U.S. Customs and Border Protection (CBP)&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"U.S. Border Encounters Analysis (FY2020-2024)\")\n\nsubtitle_text &lt;- \"Evolution, Geographic Distribution, Processing Types, and Seasonal Patterns\"\n\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nsetup_fonts()\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))     \n\ntheme_update(\n    plot.background    = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background   = element_rect(fill = bkg_col, color = bkg_col),\n    legend.position    = \"bottom\",\n    plot.margin        = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x       = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1),\n                                      color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y       = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1),\n                                      color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.line.x        = element_line(color = \"#252525\", linewidth = .2),\n    plot.title         = element_text(size = rel(1.14), face = \"bold\", hjust = 0.5, color = title_col),\n    plot.subtitle      = element_text(size = rel(0.86), hjust = 0.5, color = subtitle_col),\n    axis.title         = element_text(size = rel(0.93), face = \"bold\", color = text_col),\n    axis.text          = element_text(size = rel(0.79), color = text_col),\n    legend.title       = element_blank(),\n    legend.text        = element_text(size = rel(0.71), color = text_col),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.2),\n    panel.grid.minor   = element_blank()\n)\n\n\n6. Plot\n\nShow code### |-  plot 1 ----\ndemographic_evolution &lt;- demographic_trends_df |&gt;\n  ggplot(aes(x = fiscal_year, y = total_encounters, color = demographic)) +\n\n  # Geoms\n  geom_line(size = 1.2) +\n  geom_point(size = 3) +\n\n  # Scales\n  scale_color_manual(\n    values = c(\n      \"#E64B35\", \"#4DBBD5\", \"#91D1C2\", \"#8491B4\", \"#F39B7F\"\n    )\n  ) +\n  scale_y_continuous(\n    labels = label_number(scale = 1e-6, suffix = \"M\"),\n    breaks = seq(0, 2000000, by = 500000),\n    expand = expansion(mult = c(0.02, 0.1))\n  ) +\n  scale_x_continuous(\n    breaks = 2020:2024,\n    limits = c(2020, 2024)\n  ) +\n\n  # Labs\n  labs(\n    title = \"Evolution of Border Encounters by Demographic Group\",\n    subtitle = \"Trends in total encounters from FY2020 to FY2024\",\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n\n  # Theme\n  theme(\n    legend.position = \"top\",\n    plot.margin = margin(t = 20, r = 20, b = 20, l = 20)\n  )\n\n\n### |-  plot 2 ----\nstate_encounters_map &lt;- plot_usmap(\n  data = state_map_df,\n  values = \"encounter_count\",\n  color = \"#d9d9d9\",\n  size = 0.25\n) +\n\n  # Scales\n  coord_sf(clip = \"off\") +\n  scale_fill_gradientn(\n    colors = c(\n      \"#f7f7f7\",\n      \"#67a9cf\",\n      \"#2166ac\",\n      \"#feb24c\"\n    ),\n    breaks = c(500000, 1000000, 2000000),\n    labels = c(\"500K\", \"1M\", \"2M\"),\n    guide = guide_colorbar(\n      title = \"Encounter Count\",\n      title.position = \"top\",\n      title.hjust = 0.5,\n      barwidth = 12,\n      barheight = 1,\n      direction = \"horizontal\",\n      ticks = FALSE,\n      margin = margin(t = 10, b = 10)\n    )\n  ) +\n\n  # Labs\n  labs(\n    title = \"Geographic Distribution of Border Encounters\",\n    subtitle = \"Total encounters by state, FY2020-2024\",\n    x = NULL,\n    y = NULL\n  ) +\n\n  # Theme\n  theme(\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    axis.line.x = element_blank(),\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n    legend.background = element_rect(fill = bkg_col, color = NA),\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5, color = title_col),\n    plot.subtitle = element_text(size = 12, hjust = 0.5, color = subtitle_col)\n  )\n\n\n### |-  plot 3 ----\n\ntitle_42_color &lt;- \"#E64B35\"  \ntitle_8_color &lt;- \"#4DBBD5\"  \n\ndemographic_authority_plot &lt;- ggplot(demographic_authority_df) +\n \n  # Geoms\n  geom_vline(\n    xintercept = seq(0, 6, by = 2),\n    color = \"gray90\",\n    linewidth = 0.2\n  ) +\n  geom_segment(\n    aes(\n      y = demographic,\n      x = `Title 42`,\n      xend = `Title 8`,\n      yend = demographic\n    ),\n    color = \"gray80\",\n    linewidth = 0.5\n  ) +\n  geom_point(\n    aes(x = `Title 42`, y = demographic),\n    color = title_42_color,\n    size = 3\n  ) +\n  geom_point(\n    aes(x = `Title 8`, y = demographic),\n    color = title_8_color,\n    size = 3\n  ) +\n  geom_text(\n    aes(\n      x = `Title 42`, y = demographic,\n      label = sprintf(\"%.2fM\", `Title 42`)\n    ),\n    color = title_42_color,\n    vjust = 2,\n    hjust = 1.2,\n    size = 4,\n    family = \"mono\",\n    fontface = \"bold\"\n  ) +\n  geom_text(\n    aes(\n      x = `Title 8`, y = demographic,\n      label = sprintf(\"%.2fM\", `Title 8`)\n    ),\n    color = title_8_color,\n    vjust = 2,\n    hjust = -0.2,\n    size = 4,\n    family = \"mono\",\n    fontface = \"bold\"\n  ) +\n  annotate(\n    \"text\",\n    x = 3,\n    y = max(as.numeric(demographic_authority_df$demographic)) + 0.2,\n    label = \"Title 42\",\n    color = title_42_color,\n    hjust = 1,\n    vjust = 0,\n    size = 5,\n    fontface = \"bold\"\n  ) +\n  annotate(\n    \"text\",\n    x = 4.8,\n    y = max(as.numeric(demographic_authority_df$demographic)) + 0.2,\n    label = \"Title 8\",\n    color = title_8_color,\n    hjust = 0,\n    vjust = 0,\n    size = 5,\n    fontface = \"bold\"\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    breaks = seq(0, 6, by = 2),\n    labels = function(x) paste0(x, \"M\"),\n    limits = c(0, 6),\n    expand = c(0.15, 0.1)\n  ) +\n  scale_y_discrete() +\n\n  # Labs\n  labs(\n    title = \"Border Encounters by Demographic and Authority Type\",\n    subtitle = \"Comparison of Title 8 vs Title 42 processing (in millions)\",\n    x = NULL,\n    y = NULL\n  ) +\n\n  # Theme\n  theme(\n    panel.grid = element_blank(),\n    axis.title.y = element_blank(),\n    plot.margin = margin(t = 30, r = 20, b = 20, l = 20),\n    axis.text.y = element_text(size = 11)\n  )\n\n\n### |-  plot 4 ----\nseasonal_citizenship_plot &lt;- seasonal_citizenship_df |&gt;\n  filter(citizenship %in% top_5_citizenship_df) |&gt;\n  mutate(\n    month_abbv = factor(month_abbv, levels = month_order),\n    citizenship = fct_reorder(citizenship, -avg_encounters, sum)\n  ) |&gt;\n  ggplot(aes(x = month_abbv, y = avg_encounters, color = citizenship, group = citizenship)) +\n\n  # Geoms\n  geom_line(alpha = 0.15, linewidth = 0.7) +\n  geom_point(size = 3.5) +\n\n  # Scales\n  scale_color_manual(\n    values = c(\n      \"#E64B35\", \"#4DBBD5\", \"#91D1C2\", \"#8491B4\", \"#F39B7F\"\n    )\n  ) +\n  scale_y_continuous(\n    labels = label_number(scale = 1, suffix = \"K\"),\n    breaks = seq(0, 600, by = 200),\n    expand = expansion(mult = c(0.02, 0.1))\n  ) +\n\n  # Labs\n  labs(\n    title = \"Seasonal Patterns of Border Encounters by Citizenship\",\n    subtitle = \"Monthly average encounters for top 5 countries (Fiscal Year: October to September)\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    # Legend refinements\n    legend.position = \"top\",\n    legend.direction = \"horizontal\",\n    legend.spacing.x = unit(0.5, \"cm\"),\n    legend.margin = margin(t = 5, b = 15),\n    legend.title = element_blank(),\n    legend.text = element_text(size = 9.5),\n    panel.grid.major.x = element_blank()\n  )\n\n\n### |-  combined plots ----\ncombined_plot &lt;- (\n  demographic_evolution + state_encounters_map +\n    plot_layout(widths = c(1, 1))\n  ) / (\n  demographic_authority_plot + seasonal_citizenship_plot\n  )\n\ncombined_plot &lt;- combined_plot +\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                family = \"title\", \n                size = rel(2.5), \n                face = \"bold\",\n                hjust = 0.5,\n                color = title_col,\n                margin = margin(b = 10)\n            ),\n            plot.subtitle = element_text(\n                family = \"text\",\n                size = rel(1.3),\n                hjust = 0.5,\n                color = subtitle_col,\n                margin = margin(b = 20)\n            ),\n            plot.caption = element_markdown(\n                family = \"caption\",\n                size = rel(0.75),\n                color = caption_col,\n                hjust = 0.5,\n                margin = margin(t = 20)\n            ),\n            plot.margin = margin(10, 10, 10, 10)\n        )\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(combined_plot, type = \"tidytuesday\", year = 2024, week = 48, height = 10, width = 16)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggplotify_0.1.2 usmap_0.7.1     patchwork_1.3.0 here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    sf_1.0-19         \n [9] rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4       \n[13] tools_4.4.0        utf8_1.2.4         yaml_2.3.10        knitr_1.49        \n[17] htmlwidgets_1.6.4  bit_4.5.0          classInt_0.4-10    curl_6.0.0        \n[21] xml2_1.3.6         camcorder_0.1.0    KernSmooth_2.23-22 tidytuesdayR_1.1.2\n[25] withr_3.0.2        grid_4.4.0         fansi_1.0.6        e1071_1.7-16      \n[29] colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29    \n[33] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[37] commonmark_1.9.2   DBI_1.2.3          proxy_0.4-27       parallel_4.4.0    \n[41] yulab.utils_0.1.8  vctrs_0.6.5        jsonlite_1.8.9     gridGraphics_0.5-1\n[45] hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5      \n[49] usmapdata_0.3.0    units_0.8-5        gifski_1.32.0-1    codetools_0.2-20  \n[53] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[57] rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6       \n[61] rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1     markdown_1.13     \n[65] gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3         class_7.3-22      \n[69] Rcpp_1.0.13-1      svglite_2.1.3      xfun_0.49          fs_1.6.5          \n[73] pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2024_48.qmd.\nFor the full repository, click here.\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_46.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_46.html",
    "title": "The Architecture of Global Country Codes",
    "section": "",
    "text": "Figure 1: A visualization titled ‘The Architecture of Global Country Codes’ showing an analysis of 249 ISO country codes by first letter and numeric value. Ridge plots in purple to orange show the distribution of country codes, with early alphabet countries having lower numeric codes and later alphabet countries having higher codes. A waffle chart in the top right indicates which countries maintain complete sets of Alpha-2, Alpha-3, and Numeric codes.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse, # Easily Install and Load the 'Tidyverse'\n  ggtext, # Improved Text Rendering Support for 'ggplot2'\n  showtext, # Using Fonts More Easily in R Graphs\n  janitor, # Simple Tools for Examining and Cleaning Dirty Data\n  scales, # Scale Functions for Visualization\n  glue, # Interpreted String Literals\n  here, # A Simpler Way to Find Your Files\n  ggridges, # Ridgeline Plots in 'ggplot2'\n  waffle, # Create Waffle Chart Visualizations\n  patchwork # The Composer of Plots\n)\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  12,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2024, week = 46)\n\ncountries            &lt;- tt$countries |&gt; clean_names()\ncountry_subdivisions &lt;- tt$country_subdivisions |&gt; clean_names()\nformer_countries     &lt;- tt$former_countries |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(countries)\nglimpse(country_subdivisions)\nglimpse(former_countries)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- tidy data ----\n\n### |- ridge data ----\nridge_data &lt;- countries |&gt;\n  mutate(\n    first_letter = substr(alpha_2, 1, 1),\n    first_letter = factor(first_letter, levels = rev(sort(unique(first_letter))))\n  )\n\n### |- waffle data ----\nwaffle_data &lt;- countries |&gt;\n  summarise(\n    `Complete System` = sum(!is.na(alpha_2) & !is.na(alpha_3) & !is.na(numeric)),\n    `Partial System` = n() - sum(!is.na(alpha_2) & !is.na(alpha_3) & !is.na(numeric))\n  ) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"key\",\n    values_to = \"value\"\n  ) |&gt;\n  mutate(\n    value = value / 10,\n    key = factor(key, levels = c(\"Complete System\", \"Partial System\"))\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"\ntitle_col    &lt;- \"gray20\"\nsubtitle_col &lt;- \"gray20\"\ncaption_col  &lt;- \"gray30\"\ntext_col     &lt;- \"gray30\"\ncol_palette  &lt;- viridis::rocket(5)\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 46 } &bull; Source: ISOcodes R Package&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ncaption_text &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Source Sans Pro\", family = \"text\")\nfont_add_google(\"Roboto Mono\", family = \"numbers\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"plot\",\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 5, r = 15, b = 5, l = 15),\n    panel.spacing         = unit(1, \"lines\"),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), \n                                         size = rel(1),\n                                         color = text_col,\n                                         family = \"text\",\n                                         face = \"bold\"),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0),\n                                         size = rel(1),\n                                         color = text_col,\n                                         family = \"text\",\n                                         face = \"bold\"),\n    axis.text             = element_text(size = rel(0.8),\n                                         color = text_col,\n                                         family = \"text\"),\n    panel.grid.minor      = element_blank(),\n    panel.grid.major      = element_line(color = \"gray95\", linewidth = 0.2),\n    panel.grid.major.y    = element_blank()\n)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |- ridge plot ----\nridge_plot &lt;- ridge_data |&gt;\n  ggplot(aes(x = numeric, y = first_letter, fill = after_stat(x))) +\n\n  # Geoms\n  # add reference lines\n  geom_vline(\n    xintercept = seq(0, 1000, 200),\n    color = \"gray90\",\n    linetype = \"dashed\"\n  ) +\n  # ridges\n  geom_density_ridges_gradient(\n    alpha = 0.8,\n    scale = 0.95,\n    rel_min_height = 0.005,\n    bandwidth = 25,\n    color = text_col,\n    show.legend = TRUE\n  ) +\n  # country positions\n  geom_point(\n    data = ridge_data,\n    aes(x = numeric, y = first_letter),\n    size = 0.8,\n    alpha = 0.3,\n    color = text_col\n  ) +\n  # annotations\n  annotate(\n    \"text\",\n    x = 10,\n    y = \"E\",\n    label = \"Early alphabet countries\\noften have lower codes\",\n    size = 3.0,\n    family = \"text\",\n    color = \"gray25\",\n    lineheight = 0.9,\n    hjust = 0.4\n  ) +\n  annotate(\n    \"text\",\n    x = 850,\n    y = \"W\",\n    label = \"Higher codes cluster in\\nlater alphabet regions\",\n    size = 3.0,\n    family = \"text\",\n    color = \"gray25\",\n    lineheight = 0.9,\n    vjust = 0.5\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    breaks = seq(0, 1000, 200),\n    expand = c(0.02, 0)\n  ) +\n  scale_y_discrete() +\n  scale_fill_gradientn(\n    colors = col_palette,\n    name = \"Numeric Code Range\",\n    guide = guide_colorbar(\n      title.position = \"top\",\n      barwidth = unit(15, \"lines\"),\n      barheight = unit(0.5, \"lines\")\n    )\n  ) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Numeric Country Code (0-999)\",\n    y = \"First Letter of Alpha-2 Code\"\n  ) +\n\n  # Theme\n  theme(\n    legend.position = \"top\",\n    legend.justification = \"right\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(size = rel(0.8)),\n    legend.text = element_text(size = rel(0.7)),\n    legend.key.width = unit(2.2, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    legend.spacing.x = unit(0.2, \"cm\"),\n    plot.margin = margin(-5, 30, 5, 30),\n    panel.spacing = unit(2, \"lines\")\n  )\n\n### |- waffle plot ----\nwaffle_plot &lt;- waffle_data |&gt;\n  ggplot(aes(fill = key, values = value)) +\n\n  # Geom\n  geom_waffle(\n    n_rows = 5,\n    size = 0.5,\n    colour = \"white\",\n    flip = TRUE,\n    radius = unit(2, \"pt\")\n  ) +\n  # Scales\n  scale_fill_manual(values = col_palette[c(1, 5)]) +\n  coord_equal(ratio = 1) +\n\n  # Theme\n  theme_void() +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    legend.text = element_text(size = rel(1)),\n    plot.margin = margin(10, 5, 0, 5),\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n  )\n\n### |- title plot ----\n\n# Add total count annotation\nn_countries &lt;- nrow(countries)\n\ntitle_plot &lt;- ggplot() +\n  # Geoms\n  annotate(\n    \"text\",\n    x = 0, y = 0.85,\n    label = \"The Architecture of\\nGlobal Country Codes\",\n    hjust = 0,\n    size = 10,\n    lineheight = 1,\n    fontface = \"bold\",\n    family = \"title\",\n    color = title_col\n  ) +\n  annotate(\n    \"text\",\n    x = 0, y = 0.5,\n    label = str_wrap(\n      \"Analysis of ISO country codes reveals geographic and alphabetic patterns\n      in international standardization. Most nations maintain three distinct identifiers.\",\n      width = 65\n    ),\n    hjust = 0,\n    size = 3.5,\n    color = title_col,\n    family = \"text\"\n  ) +\n  annotate(\n    \"text\",\n    x = 0, y = 0.3,\n    label = glue(\"Analysis of {n_countries} country codes\"),\n    hjust = 0,\n    size = 3.5,\n    family = \"text\",\n    color = title_col\n  ) +\n  annotate(\"text\",\n    x = 0, y = 0.1,\n    label = \"Example:\\nUS (Alpha-2)\\nUSA (Alpha-3)\\n840 (Numeric)\",\n    hjust = 0,\n    size = 2.8,\n    color = title_col,\n    family = \"text\",\n    lineheight = 1.2\n  ) +\n\n  # Scales\n  scale_x_continuous(limits = c(0, 1)) +\n  scale_y_continuous(limits = c(0, 1)) +\n\n  # Them\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin = margin(5, 10, 0, 10)\n  )\n\n### |- explanatory text plot for the waffle chart ----\nwaffle_explanation &lt;- ggplot() +\n\n  # Geoms\n  annotate(\"text\",\n    x = 0, y = 0.85,\n    label = \"Country Code Systems\\n\",\n    hjust = 0, size = 3.5, fontface = \"bold\", family = \"text\"\n  ) +\n  annotate(\"text\",\n    x = 0, y = 0.55,\n    label = str_wrap(\"Each square represents 10 countries. A complete system means a country has\n                     all three standardized codes shown in the ridge plot below: Alpha-2 (e.g., US),\n                     Alpha-3 (USA), and Numeric (840).\", 55),\n    hjust = 0, size = 2.8, color = title_col, family = \"text\"\n  ) +\n\n  # Scales\n  scale_x_continuous(limits = c(0, 1)) +\n  scale_y_continuous(limits = c(0, 1)) +\n\n  # Theme\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin = margin(5, 10, 0, 10)\n  )\n\n### |- combined plot ----\n\n# define layout design\ndesign &lt;- c(\n  area(1, 1, 2, 4), # title_plot\n  area(1, 5, 1, 6), # waffle_plot\n  area(2, 5, 2, 6), # waffle_explanation\n  area(3, 1, 5, 6) # ridge_plot\n)\n\ncombined_plot &lt;- title_plot + waffle_plot + waffle_explanation + ridge_plot +\n  plot_layout(\n    design = design,\n    heights = c(1.2, 1, 2, 1, 1), # Simplified heights\n    widths = c(1, 1, -0.4, 1, 0.9, 0.9) # Slightly wider right side\n  ) +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n      plot.background  = element_rect(fill = bkg_col, color = bkg_col),\n      panel.background = element_rect(fill = bkg_col, color = bkg_col),\n      plot.margin  = margin(10, 10, 10, 10),\n      plot.caption = element_markdown(\n        size       = rel(0.60),\n        family     = \"caption\",\n        color      = alpha(caption_col, 0.9),\n        lineheight = 0.65,\n        hjust      = 0.5,\n        margin     = margin(t = 10, b = 5)\n      )\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----\n\nlibrary(ggplotify)\nlibrary(grid)\n\n# Convert patchwork plot to grob\n# There was some issues between patchwork and ggsave\nplot_grob &lt;- as.grob(combined_plot)\n\n# Activate showtext manually\nshowtext_begin()\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n# Save the plot as PNG\ninvisible({\n  png(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_46.png\"),\n    width = 10, height = 12, units = \"in\", res = 320\n  )\n  grid.draw(plot_grob)\n  dev.off()\n})\n\n# Deactivate showtext\nshowtext_end()\n\n### |-  plot thumbnail----\nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_46.png\")) |&gt;\n  magick::image_resize(geometry = \"400\") |&gt;\n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_46.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggplotify_0.1.2 patchwork_1.3.0 waffle_1.0.2    ggridges_0.5.6 \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       viridis_0.6.5     \n [5] fastmap_1.2.0      gh_1.4.1           digest_0.6.37      timechange_0.3.0  \n [9] lifecycle_1.0.4    rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.6        tools_4.4.0        utf8_1.2.4         yaml_2.3.10       \n[17] knitr_1.49         labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0         \n[21] curl_6.0.0         plyr_1.8.9         xml2_1.3.6         camcorder_0.1.0   \n[25] RColorBrewer_1.1-3 tidytuesdayR_1.1.2 withr_3.0.2        fansi_1.0.6       \n[29] colorspace_2.1-1   extrafontdb_1.0    gitcreds_0.1.2     cli_3.6.4         \n[33] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[37] tzdb_0.5.0         commonmark_1.9.2   parallel_4.4.0     yulab.utils_0.1.8 \n[41] vctrs_0.6.5        jsonlite_1.8.9     gridGraphics_0.5-1 hms_1.1.3         \n[45] bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[49] codetools_0.2-20   DT_0.33            stringi_1.8.4      gtable_0.3.6      \n[53] extrafont_0.19     munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[57] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4   \n[61] vroom_1.6.5        evaluate_1.0.1     markdown_1.13      gridtext_0.1.5    \n[65] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[69] gridExtra_2.3      Rttf2pt1_1.3.12    xfun_0.49          fs_1.6.5          \n[73] pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_44.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_44.html",
    "title": "Monster Movies by Decade and Title Type",
    "section": "",
    "text": "Figure 1: Bar mosaic chart showing the distribution of ‘monster’ movies by decade and title type (Movie, TV Movie, Video) from 1960 to 2020. Movies dominate in recent decades, while TV Movies and Videos were more prominent in earlier years.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    scales,            # Scale Functions for Visualization\n    glue,              # Interpreted String Literals\n    here,              # A Simpler Way to Find Your Files\n    ggmosaic           # Mosaic Plots in the 'ggplot2' Framework # Mosaic Plots in the 'ggplot2' Framework\n)   \n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 44) \n\nmonster_movie_genres &lt;- tt$monster_movie_genres |&gt; clean_names() \nmonster_movies       &lt;- tt$monster_movies|&gt; clean_names() \n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(monster_movie_genres)\nglimpse(monster_movies)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- tidy data ----\nplot_data &lt;- monster_movies |&gt;\n    mutate(title_type = str_to_title(title_type)) |&gt; \n    mutate(decade = (year %/% 10) * 10) |&gt; \n    filter(decade &gt;= 1960) |&gt; \n    drop_na(title_type, decade) |&gt;\n    count(title_type, decade) \n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"rcartocolor::TealRose\")[c(1,3,6)] \n# show_col(col_palette)\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 44 } &bull; Source: IMDb non-commercial datasets&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Monster Movies by Decade and Title Type\")\nsubtitle_text &lt;- str_glue(\"An exploration of 'monster' movies from 1960 onwards, categorized by type.\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nfont_add_google(\"Shadows Into Light\", regular.wt = 400, family = \"anotation\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"plot\",\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    panel.grid.minor      = element_blank(),\n    panel.grid.major      = element_blank()\n)  \n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |- initial plot ----\n\n# Mekko Chart\n\np &lt;- plot_data |&gt;\n    ggplot() +\n    \n    # Geoms\n    geom_mosaic(aes(weight = n, x = product(decade), fill = title_type)) +\n    \n    # Scales\n    scale_y_continuous() +\n    scale_fill_manual(values = col_palette) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        x = \"Decade\", \n        y = \"Proportion\",\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n        ) +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(2.2),\n            family = \"title\",\n            face = \"bold\",\n            color = title_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1),\n            family = \"subtitle\",\n            color = subtitle_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.75),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 1.1,\n            hjust = 0.5,\n            halign = 1,\n            margin = margin(t = 15, b = 5)\n        )\n    )\n\n### |- annotated plot ----\np &lt;- p +\n    annotate(\n        \"text\",\n        x = .55, y = .5, label = \"Movie\",\n        color = \"#fafafa\", size = 7, vjust = 1, hjust = 0,\n        fontface = \"bold\", family = \"text\"\n    ) +\n    annotate(\n        \"text\",\n        x = .55, y = .8, label = \"TV Movie\",\n        color = \"gray40\", size = 7, vjust = 1, hjust = 0,\n        fontface = \"bold\", family = \"text\"\n    ) +\n    annotate(\n        \"text\",\n        x = .55, y = .95, label = \"Video\",\n        color = \"#fafafa\", size = 7, vjust = 1, hjust = 0,\n        fontface = \"bold\", family = \"text\"\n    )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \n\n# Save the plot as PNG\nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_44.png\"), \n  plot = p,\n  width = 10, height = 8, units = \"in\", dpi = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_44.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_44.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggmosaic_0.3.3  here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   viridisLite_0.4.2  farver_2.1.2       fastmap_1.2.0     \n [5] lazyeval_0.2.2     gh_1.4.1           digest_0.6.37      timechange_0.3.0  \n [9] lifecycle_1.0.4    rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.6        tools_4.4.0        utf8_1.2.4         yaml_2.3.10       \n[17] data.table_1.16.2  knitr_1.49         labeling_0.4.3     htmlwidgets_1.6.4 \n[21] bit_4.5.0          curl_6.0.0         plyr_1.8.9         xml2_1.3.6        \n[25] camcorder_0.1.0    tidytuesdayR_1.1.2 withr_3.0.2        productplots_0.1.1\n[29] grid_4.4.0         fansi_1.0.6        colorspace_2.1-1   paletteer_1.6.0   \n[33] gitcreds_0.1.2     cli_3.6.4          rmarkdown_2.29     crayon_1.5.3      \n[37] ragg_1.3.3         generics_0.1.3     rstudioapi_0.17.1  httr_1.4.7        \n[41] tzdb_0.5.0         commonmark_1.9.2   parallel_4.4.0     vctrs_0.6.5       \n[45] jsonlite_1.8.9     hms_1.1.3          bit64_4.5.2        ggrepel_0.9.6     \n[49] systemfonts_1.1.0  magick_2.8.5       plotly_4.10.4      gifski_1.32.0-1   \n[53] rematch2_2.1.2     codetools_0.2-20   stringi_1.8.4      gtable_0.3.6      \n[57] prismatic_1.1.2    munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[61] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        textshaping_0.4.0 \n[65] rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1     markdown_1.13     \n[69] gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1     \n[73] svglite_2.1.3      xfun_0.49          pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_42.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_42.html",
    "title": "Orca Encounter Observations: Leading Vessels",
    "section": "",
    "text": "Static\n\n\n\n\n\nFigure 1: A bar chart displaying the number of orca encounters in the Salish Sea region, along with a map showing the locations of the encounters. Orcinus and Mike 1 are the vessels with the highest number of encounters, each exceeding 200.\n\n\nNOTE: We used runtime: shiny to make the interactive features of our visualizations work smoothly, especially the interactive orca map. This let us add dynamic, user-driven exploration that wasn’t possible with the usual Quarto options (I needed help figuring it out!).\nWhile it means the final result looks more like markdown and less like a sleek Quarto document, it was the best way to ensure the interactivity worked well.\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    lubridate,         # Make Dealing with Dates a Little Easier\n    glue,              # Interpreted String Literals\n    patchwork,         # The Composer of Plots\n    here,              # A Simpler Way to Find Your Files\n    sf,                # Simple Features for R\n    ggiraph,           # Make 'ggplot2' Graphics Interactive\n    htmltools,         # Tools for HTML\n    rnaturalearth,     # World Map Data from Natural Earth \n    rnaturalearthhires # High Resolution World Vector Map Data from Natural Earth used inrnaturalearth\n)  \n\n# Note: disabled { camcorder }. Issues with plot rendering (ggiraph)\n\n# ### |- figure size ---- \n# camcorder::gg_record(\n#     dir    = here::here(\"temp_plots\"),\n#     device = \"png\",\n#     width  =  10,\n#     height =  10,\n#     units  = \"in\",\n#     dpi    = 320\n# )\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 42) \n\norcas_data &lt;- tt$orcas |&gt; clean_names() \n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(orcas_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- tidy data ----\norcas_data_clean &lt;- orcas_data |&gt;\n    filter(!is.na(vessel)) |&gt;\n    # Standardize 'ids_encountered' to be comma-separated\n    mutate(\n        ids_encountered = str_replace_all(ids_encountered, \"and\", \",\"),\n        ids_encountered = str_replace_all(ids_encountered, \",[[:space:]]*\", \", \"),\n        ids_encountered = str_trim(ids_encountered)\n    ) |&gt;  \n    # Extract numeric duration from the 'duration' column and convert to minutes\n    mutate(\n        duration_minutes = str_extract(duration, \"[[:digit:]]+\") |&gt; as.numeric() / 60,\n        duration_minutes = ifelse(duration_minutes &lt; 0, NA, duration_minutes)\n    ) |&gt;\n    # Convert 'date' to proper Date class and create month column\n    mutate(\n        date = as.Date(date),\n        month = month(date, label = TRUE, abbr = FALSE)\n    ) |&gt;\n    # Handle missing values\n    filter(!is.na(encounter_number), !is.na(begin_latitude), !is.na(begin_longitude))\n\n\n# ### |- data for bar plot ----\n\n# Number of Encounters per Vessel\nbar_plot_data &lt;- orcas_data_clean |&gt;\n    filter(!is.na(vessel)) |&gt;\n    count(vessel, sort = TRUE) |&gt;\n    filter(n &gt; 1) |&gt;\n    mutate(\n        vessel = str_wrap(vessel, width = 20),\n        vessel = fct_reorder(vessel, -n)\n    )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"lisa::OdilonRedon\")[c(1,2)] \n# show_col(col_palette)\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 42 } &bull; Source: Center for Whale Research&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Orca Encounter Observations: Leading Vessels\")\nsubtitle_text &lt;- str_glue(\"Highlighting vessels with more than one recorded orca encounter in the Salish Sea region.\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\n# font_add(\"fa6-brands\", \"personal-website/fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    \n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 10, b = 5, l = 10),\n    \n    panel.grid.minor      = element_blank(),\n    panel.grid.major.y    = element_blank(),\n    panel.grid.major.x    = element_line(linetype = \"dotted\", linewidth = 0.2, color = 'gray'),\n    \n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(0.85), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(0.85), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    \n    axis.text.y           = element_text(color = text_col, family = \"text\", size = rel(0.65)),\n    axis.text.x           = element_text(color = text_col, family = \"text\", size = rel(0.65)),\n    \n    axis.ticks.x          = element_line(color = text_col),  \n    axis.line.x           = element_line(color = \"#252525\", linewidth = .2)\n)\n```\n\n\n6. Plot (Interactive)\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |- world map for background ----\nworld &lt;- st_as_sf(rnaturalearth::ne_countries(scale = 'large', returnclass = 'sf'))\n\n### |- Base map ----\n\n# Focus on the Salish Sea region\nmap &lt;- ggplot() +\n    \n    # Geoms\n    geom_sf(data = world, fill = \"lightgrey\", color = \"white\") +\n    geom_sf_interactive(\n        data = st_as_sf(orcas_data_clean, coords = c(\"begin_longitude\", \"begin_latitude\"), crs = 4326),\n        aes(tooltip = paste(\"Date:\", date, \"&lt;br&gt;Location:\", location), data_id = vessel), \n        color = col_palette[1],\n        alpha = 0.5,\n        shape = 1,\n        size = 1\n    ) +\n    \n    # Scales\n    coord_sf(xlim = c(-127, -121), ylim = c(47, 51), expand = FALSE) +          # Focus on the Salish Sea region\n    \n    # Labs \n    labs(\n        title = \"\",\n        x = \"Longitude\",\n        y = \"Latitude\"\n    ) +\n    \n    # Theme\n    ggthemes::theme_map() \n\n\n### |- Bar plot plot ----\n\n# Number of Encounters per Vessel\nbar &lt;- ggplot(bar_plot_data, aes(x = vessel, -n, y = n)) +\n    \n    # Geom\n    geom_bar_interactive(\n        aes(\n            tooltip = paste(\"Vessel:\", vessel, \"&lt;br&gt;Encounters:\", n), \n            data_id = vessel), \n        stat = \"identity\", \n        fill = col_palette[1]\n    ) +\n    \n    # Scale\n    scale_x_discrete() +\n    scale_y_continuous() +    \n    coord_flip() +\n    \n    # Labs\n    labs(\n        x = \"Vessel\",\n        y = \"Number of Encounters\",\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n    )  +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.3),\n            family = \"title\",\n            face = \"bold\",\n            color = title_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.65),\n            family = \"subtitle\",\n            color = subtitle_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.caption = element_markdown(    \n            size = rel(0.40),\n            family = \"caption\", \n            color = caption_col,\n            lineheight = 1.1,\n            hjust = 0.5,\n            halign = 1,\n            margin = margin(t = 5, b = 5)\n        )\n    )\n\n### |- inset element ----\n\n# Insert the map into the upper right corner of the bar plot \ncombined_plot &lt;- bar + \n    inset_element(map, left = 0, bottom = 0.2, right = 1.3, top = 1.05)\n```\n\n\n\nShow code```{r}\n#| label: interactive\n#| eval: true\n#| include: true\n#| fig.width: 8\n#| fig.height: 6\n#| warning: false\n\n### |-  interactive plots ----\n\n# Create the interactive plot with ggiraph\ninteractive_plot &lt;- girafe(\n  ggobj = combined_plot,\n  bg = bkg_col,\n  options = list(\n    opts_tooltip(\n      opacity = 0.8, use_fill = TRUE,\n      use_stroke = FALSE,\n      css = \"padding:5pt;font-family: 'Open Sans', sans-serif;font-size:1.2rem;color:white\"),\n    opts_selection(type = \"single\", css = \"fill:yellow;stroke:black;stroke-width:2px;\"),\n    opts_sizing(rescale = TRUE),\n    opts_toolbar(saveaspng = TRUE),\n    opts_hover_inv(css = \"opacity:0.4\"),\n    opts_hover(\n      css = girafe_css(\n        css = glue(\"fill:{col_palette[2]};\"),\n        text = \"stroke:none;fill:white;fill-opacity:1;\")\n    )\n  )\n)\n\n# Use tagList to render it properly in Quarto\nhtmltools::tagList(interactive_plot)\n```\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_40.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_40.html",
    "title": "White and Black Chess Ratings: A Distribution Analysis",
    "section": "",
    "text": "Figure 1: The image displays two overlapping kernel density plots representing the distribution of chess player ratings for “White” and “Black” players. Both distributions peak around 1500 on the x-axis and range from 500 to 3000. The graph title is “White and Black Chess Ratings: A Distribution Analysis.”\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nCode```{r}\n#| label: load\n\n## 1. LOAD PACKAGES & SETUP ----\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  lubridate,         # Make Dealing with Dates a Little Easier\n  glue,              # Interpreted String Literals\n  ggfx               # Pixel Filters for 'ggplot2' and 'grid' # Pixel Filters for 'ggplot2' and 'grid' \n )  \n\n### |- figure size ---- \ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  7.5,\n  height =  5,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nCode```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 40) \n\nchess &lt;- tt$chess |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examing the Data\n\nCode```{r}\n#| label: examine\n\nglimpse(chess)\nskim(chess)\n```\n\n\n4. Tidy Data\n\nCode```{r}\n#| label: tidy\n\n# Tidy\nchess_data &lt;- chess |&gt;  \n    select(white_rating, black_rating) |&gt;\n    pivot_longer(\n        cols = c(white_rating, black_rating), \n        names_to = \"player\", \n        values_to = \"rating\") |&gt;\n    mutate(player = ifelse(player == \"white_rating\", \"White\", \"Black\"))\n\n# Labels \nlabels &lt;- tibble(\n    label = c(\"White\", \"Black\"),\n    player = c(\"White\", \"Black\"),\n    x = c(1600, 1600), \n    y = c(0.0001, 0.0001) \n)\n```\n\n\n5. Visualization Parameters\n\nCode```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"peRReo::don\")[c(5,9)]\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 40 } &bull; Source: Chess Game Dataset (Lichess)&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"White and Black Chess Ratings: A Distribution Analysis\")\nsubtitle_text &lt;- str_glue(\"How ratings vary between White and Black players across competitive chess matches\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_blank(),  \n    axis.text.y           = element_blank(),\n    axis.text.x           = element_text(color = text_col, family = \"text\", size = rel(0.9)),\n    axis.ticks.x          = element_line(color = text_col),  # Show x-axis ticks\n    panel.grid            = element_blank(),\n    strip.text            = element_blank() # Remove strip text \n)\n```\n\n\n6. Plot\n\nCode```{r}\n#| label: plot\n\n### |-  final plot ----\np &lt;- ggplot(chess_data, aes(x = rating)) +\n\n  # Geoms\n  # Reference text layer\n  as_reference(\n    geom_text(\n      data = labels, aes(x = x, y = y, label = label),\n      family = \"title\", colour = \"gray10\", size = rel(35), hjust = 0.5, vjust = 0\n    ),\n    id = \"text\"\n  ) +\n\n  # Blending the text with the density plot\n  with_inner_glow(\n    with_blend(\n      geom_density(aes(fill = player, color = player),\n        alpha = 1, show.legend = FALSE,\n        bw = 25,\n        kernel = \"epanechnikov\"\n      ),\n      bg_layer = \"text\", blend_type = \"xor\"\n    ),\n    color = \"gray10\", sigma = 15\n  ) +\n\n  # Labs\n  labs(\n    x = \"Player Rating\",\n    y = NULL,\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n\n  # Scales\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_fill_manual(values = col_palette) +\n  scale_color_manual(values = col_palette) +\n  coord_cartesian(clip = \"off\") +\n\n  # Facet\n  facet_wrap(~player, ncol = 1) +\n\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.55),\n      family = \"title\",\n      face = \"bold\",\n      color = title_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = \"subtitle\",\n      color = subtitle_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.50),\n      family = \"caption\",\n      color = caption_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 1,\n      margin = margin(t = 5, b = 5)\n    )\n  )\n```\n\n\n7. Save\n\nCode```{r}\n#| label: save\n\n### |-  plot image ----  \n\n# Save the plot again\nggsave(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_40.png\"),\n    plot = p,\n    width  = 7.5,\n    height = 5,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_40.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_40.png\"))\n```\n\n\n8. Session Info\n\nCode```{r, eval=TRUE}\ninfo &lt;- capture.output(sessioninfo::session_info())\n# Remove lines that contain \"[1]\" and \"[2]\" (the file paths)\nfiltered_info &lt;- grep(\"\\\\[1\\\\]|\\\\[2\\\\]\", info, value = TRUE, invert = TRUE)\ncat(filtered_info, sep = \"\\n\")\n```\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 11 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/New_York\n date     2025-05-22\n pandoc   3.4 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      1.0.1   2024-10-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P htmlwidgets   1.6.4   2023-12-06 [?] CRAN (R 4.4.0)\n P jsonlite      1.8.9   2024-09-20 [?] RSPM (R 4.4.0)\n P knitr         1.49    2024-11-08 [?] RSPM (R 4.4.0)\n P rmarkdown     2.29    2024-11-04 [?] RSPM (R 4.4.0)\n P rstudioapi    0.17.1  2024-10-22 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P xfun          0.49    2024-10-31 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_38.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_38.html",
    "title": "Character Interaction Networks in Shakespeare’s Plays",
    "section": "",
    "text": "Figure 1: A visualization of character interaction networks in Shakespeare’s plays Hamlet, Macbeth, and Romeo and Juliet. The network plots display characters as nodes, with lines (edges) connecting characters who interact in the same scenes. Each plot has the title of the play centered above it. In Hamlet, nodes are blue; in Macbeth, they are brown; and in Romeo and Juliet, they are green.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  lubridate,         # Make Dealing with Dates a Little Easier\n  MetBrewer,         # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  MoMAColors,        # Color Palettes Inspired by Artwork at the Museum of Modern Art in New York City\n  glue,              # Interpreted String Literals\n  igraph,            # Network Analysis and Visualization # Network Analysis and Visualization # Network Analysis and Visualization # Network Analysis and Visualization\n  ggraph,            # An Implementation of Grammar of Graphics for Graphs and Networks # An Implementation of Grammar of Graphics for Graphs and Networks # An Implementation of Grammar of Graphics for Graphs and Networks\n  patchwork,         # The Composer of Plots\n  NatParksPalettes   # Color Palettes Inspired by National Parks\n )  \n\n# ### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 38) \n\nhamlet &lt;- tt$hamlet |&gt; clean_names() |&gt; glimpse()\nmacbeth &lt;- tt$macbeth |&gt; clean_names() |&gt; glimpse()\nromeo_juliet &lt;- tt$romeo_juliet |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(hamlet)\nglimpse(macbeth)\nglimpse(romeo_juliet)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Preprocess data for character interactions\ncombined_plays &lt;- bind_rows(\n    hamlet |&gt; mutate(play = \"Hamlet\"),\n    macbeth |&gt; mutate(play = \"Macbeth\"),\n    romeo_juliet |&gt; mutate(play = \"Romeo and Juliet\")\n)\n\n# Filter out stage directions\ndialogue_data &lt;- combined_plays |&gt;\n    filter(character != \"[stage direction]\") |&gt;\n    group_by(play, act, scene, character) |&gt;\n    summarize(dialogue = n(), .groups = 'drop')\n\n# Filter out scenes with fewer than 2 characters\nfiltered_dialogue_data &lt;- dialogue_data |&gt;\n    group_by(play, act, scene) |&gt;\n    filter(n() &gt; 1) |&gt; \n    ungroup()\n\n# Create edges: character exchanges within the same scene\nedges &lt;- filtered_dialogue_data |&gt;\n    group_by(play, act, scene) |&gt;\n    summarise(pairs = list(combn(character, 2, simplify = FALSE)), .groups = 'drop') |&gt;\n    unnest(pairs) |&gt;\n    unnest_wider(pairs, names_sep = \"_\") |&gt;\n    rename(from = pairs_1, to = pairs_2) |&gt;\n    count(play, from, to) |&gt; \n    rename(from_char = from, to_char = to)  # Rename columns to prevent conflicts\n\n# Filter the data by each play and create separate graphs\nhamlet_edges &lt;- edges |&gt; filter(play == \"Hamlet\")\nmacbeth_edges &lt;- edges |&gt; filter(play == \"Macbeth\")\nromeo_juliet_edges &lt;- edges |&gt; filter(play == \"Romeo and Juliet\")\n\n# Create separate igraph objects for each play\ng_hamlet &lt;- graph_from_data_frame(hamlet_edges, directed = FALSE)\ng_macbeth &lt;- graph_from_data_frame(macbeth_edges, directed = FALSE)\ng_romeo_juliet &lt;- graph_from_data_frame(romeo_juliet_edges, directed = FALSE)\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- NatParksPalettes::natparks.pals(name = 'CraterLake', n = 3, type = \"discrete\")\ncol_palette  &lt;- colorspace::lighten(col_palette, 0.1) \n\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 38 } &bull; Source: shakespeare.mit.edu (via github.com/nrennie/shakespeare&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Character Interaction Networks in Shakespeare's Plays\")\nsubtitle_text &lt;- str_glue(\"Visualizing character exchanges across different scenes and acts\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_void(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    strip.text            = element_textbox(size     = rel(1),\n                                            face     = 'bold',\n                                            color    = text_col,\n                                            hjust    = 0.5,\n                                            halign   = 0.5,\n                                            r        = unit(3, \"pt\"),\n                                            width    = unit(6, \"npc\"),\n                                            padding  = margin(2, 0, 2, 0),\n                                            margin   = margin(3, 3, 3, 3),\n                                            fill     = \"transparent\"),\n    panel.spacing         = unit(1, 'lines')\n)  \n\n### |-  plot function ----\nplot_character_network &lt;- function(play_name, edges_data, node_color, edge_color) {\n    \n    # Create igraph object for the play\n    g_play &lt;- graph_from_data_frame(edges_data, directed = FALSE)\n    \n    # Network plot\n    plot &lt;- ggraph(g_play, layout = 'fr') +\n        geom_edge_link(aes(edge_alpha = n, edge_width = n), color = edge_color, show.legend = FALSE) +  # Set edge color with alpha and width\n        geom_node_point(size = 5, color = node_color) +  # Set node color\n        geom_node_text(aes(label = name), color = text_col, repel = TRUE, check_overlap = TRUE) +\n        scale_edge_width(range = c(0.5, 2.5)) +\n        theme_void() +\n        ggtitle(play_name) +  # Add top-center title for the play\n        theme(\n            plot.title = element_text(size = rel(1.5), face = \"bold\", hjust = 0.5)  # Centered title with bold font\n        )\n    \n    return(plot)\n} \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  individual plots ----\nhamlet_plot       &lt;- plot_character_network(\"Hamlet\", hamlet_edges, node_color = col_palette[1], edge_color = \"gray60\")\nmacbeth_plot      &lt;- plot_character_network(\"Macbeth\", macbeth_edges, node_color = col_palette[2], edge_color = \"gray60\")\nromeo_juliet_plot &lt;- plot_character_network(\"Romeo and Juliet\", romeo_juliet_edges, col_palette[3], edge_color = \"gray60\")\n\n### |-  Combine plots using patchwork ----\ncombined_plot &lt;- hamlet_plot + macbeth_plot + romeo_juliet_plot + \n    patchwork::plot_layout(ncol = 3)\n\n### |-  final plot ----  \nfinal_plot &lt;- combined_plot + \n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        \n        # Theme\n        theme = theme(\n            plot.title        = element_markdown(\n                size          = rel(1.9),   \n                hjust         = 0.5,\n                family        = \"title\",\n                face          = \"bold\",\n                color         = title_col,\n                lineheight    = 1.1,\n                margin        = margin(t = 5, b = 5)\n            ),\n            plot.subtitle     = element_markdown(\n                size          = rel(1.1), \n                hjust         = 0.5,\n                family        = 'subtitle',\n                color         = subtitle_col,\n                lineheight    = 1.1, \n                margin        = margin(t = 5, b = 15)\n            ),\n            plot.caption      = element_markdown(\n                size          = rel(.50),\n                family        = \"caption\",\n                color         = caption_col,\n                lineheight    = 1.1,\n                hjust         = 0.5,\n                halign        = 0.5,\n                margin        = margin(t = 5, b = 5)\n            ),\n        )\n    )\n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \n\nlibrary(ggplotify)\n# Convert patchwork plot to grob \n# There was some issues between patchwork and ggsave\nplot_grob &lt;- as.grob(final_plot)\n\n# Save the plot again\nggsave(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_38.png\"),\n    plot = plot_grob,\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_38.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_38.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_36.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_36.html",
    "title": "Top 20 Responses to Key Questions in the 2024 Stack Overflow Survey",
    "section": "",
    "text": "Figure 1: The Sankey diagram illustrates the top 20 responses to key questions in the 2024 Stack Overflow survey, tracking the flow of responses about AI tool usage and work situations in selected countries. The responses are divided into categories like “Yes,” “No Plan,” “Plan Soon,” “Hybrid,” “In-person,” and “Remote,” and the paths are color-coded to show different questions and responses from each country.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,         # Compact and Flexible Summaries of Data\n  scales,        # Scale Functions for Visualization\n  lubridate,     # Make Dealing with Dates a Little Easier\n  MetBrewer,     # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  MoMAColors,    # Color Palettes Inspired by Artwork at the Museum of Modern Art in New York City\n  glue,          # Interpreted String Literals\n  ggalluvial,    # Alluvial Plots in 'ggplot2' # Alluvial Plots in 'ggplot2' # Alluvial Plots in 'ggplot2'\n  ggrepel,       # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  magick         # Advanced Graphics and Image-Processing in R \n )  \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;- tidytuesdayR::tt_load(2024, week = 36) \n\nresponse_crosswalk &lt;- tt$qname_levels_single_response_crosswalk |&gt; clean_names() |&gt; glimpse()\nsurvey_questions   &lt;- tt$stackoverflow_survey_questions |&gt; clean_names() |&gt; glimpse()\nsingle_response    &lt;- tt$stackoverflow_survey_single_response |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(response_crosswalk)\nglimpse(survey_questions)\nglimpse(single_response)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Tidyy\ntidy_data &lt;- single_response |&gt;\n    pivot_longer(cols = -c(response_id, country, currency, comp_total, converted_comp_yearly), \n                 names_to = \"qname\", \n                 values_to = \"response_code\") |&gt;\n    left_join(response_crosswalk, by = c(\"qname\", \"response_code\" = \"level\")) |&gt;\n    left_join(survey_questions, by = \"qname\") |&gt; \n    mutate(\n        country = case_when(\n            country == \"United Kingdom of Great Britain and Northern Ireland\" ~ \"UK\",\n            country == \"United States of America\" ~ \"USA\",\n            TRUE ~ as.factor(country)\n        )\n    ) |&gt; \n    drop_na(country) \n\n# Prepare data for Alluvial plot\nalluvial_data &lt;- tidy_data |&gt;\n    filter(qname %in% c(\"remote_work\", \"ai_select\")) |&gt; \n    count(question, country, label) |&gt;\n    arrange(desc(n)) |&gt;\n    slice_head(n = 20) |&gt; \n    mutate(\n        question = str_remove(question, \"\\\\s*\\\\*\"),                             # Removing the '*' from questions\n        question = case_when(\n            question == \"Do you currently use AI tools in your development process?\" ~ \"AI Tool Usage\",\n            question == \"Which best describes your current work situation?\" ~ \"Work Situation\",\n            TRUE ~ question\n        ),\n        label = case_when(\n            label == \"No, and I don't plan to\" ~ \"No Plan\",\n            label == \"No, but I plan to soon\" ~ \"Plan Soon\",\n            label == \"Hybrid (some remote, some in-person)\" ~ \"Hybrid\",\n            TRUE ~ label\n        ),\n        ) |&gt; \n    filter(!is.na(label))\n\n# Plot data\nplot_data &lt;- alluvial_data |&gt; \n    filter(!is.na(question))\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- MoMAColors::moma.colors(palette_name = \"Koons\", n = 2, type = 'discrete')\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 36 } &bull; Source: Stack Overflow Annual Developer Survey 2024&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Top 20 Responses to Key Questions in the 2024 Stack Overflow Survey\")\nsubtitle_text &lt;- str_glue(\"Analysis of AI Tool Usage and Work Situation Across Countries\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'top',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 20, r = 20, b = 20, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = .15),\n    panel.grid.minor.y    = element_blank(),\n    panel.grid.major.y    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray'),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_blank(),\n)  \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  final plot ----  \np &lt;- ggplot(plot_data, aes(axis1 = question, axis2 = country, axis3 = label, y = n)) +\n    \n    # Geoms\n    geom_alluvium(aes(fill = question), width = 1/12) +\n    geom_stratum(aes(fill = question), width = 1/8, alpha = 0.4) +\n    geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), size = 3.5, hjust = 0, nudge_x = 0.08) +\n    \n    # Labs\n    labs(\n        y = \"Number of Responses\",\n        x = \"\",\n        fill = \"Question: \",\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text\n    ) +\n    \n    # Scales\n    scale_x_discrete(limits = c(\"Question\", \"Country\", \"Response\"), expand = c(0.15, 0.05)) +\n    scale_y_continuous(labels = scales::number_format(scale = 1/1000, suffix = \" K\")) +\n    scale_fill_manual(values = col_palette, na.translate = FALSE) +    \n    coord_cartesian(clip = 'off') +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.3),\n            family = \"title\",\n            color = title_col,\n            face = \"bold\",\n            lineheight = 0.85,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1),\n            family = \"subtitle\",\n            color = title_col,\n            lineheight = 1,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size = rel(.5),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 0.6,\n            hjust = 0,\n            halign = 0,\n            margin = margin(t = 0, b = 0)\n        )\n    )\n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_36.png\"),\n  plot = p,\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_36.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_36.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_34.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_34.html",
    "title": "Age at Marriage of Kings and Consorts",
    "section": "",
    "text": "Figure 1: The Dumbell chart compares monarchs’ ages and consorts’ ages at the time of marriage. The x-axis shows ages from 0 to 80 years, with green dots representing consorts’ ages and brown dots representing kings’ ages. Dotted lines connect each pair, indicating the age difference. The chart is organized by consorts’ ages, from the youngest at the bottom to the oldest at the top.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,         # Compact and Flexible Summaries of Data\n  scales,        # Scale Functions for Visualization\n  lubridate,     # Make Dealing with Dates a Little Easier\n  MetBrewer,     # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  ggalt          # Extra Coordinate Systems, 'Geoms', Statistical Transformations, Scales and Fonts for 'ggplot2'\n )   \n\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  12,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 34) \n\nmonarchs_marriages &lt;- tt$english_monarchs_marriages_df |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(monarchs_marriages)\nskim(monarchs_marriages)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Tidy\ncleaned_monarchs_marriages &lt;- monarchs_marriages |&gt;\n    mutate(\n        across(everything(), ~na_if(., \"-\")),\n        across(everything(), ~na_if(., \"NA\")),\n        across(everything(), ~na_if(., \"?\")),\n        across(everything(), ~na_if(., \"–\")),\n        across(where(is.character), str_trim),\n        across(c(king_age, consort_age, year_of_marriage), ~str_replace_all(., \"\\\\(\\\\?\\\\)\", \"\")),\n        across(c(king_age, consort_age, year_of_marriage), as.numeric),\n        pair_name = paste(king_name, \"-\", consort_name)\n    )\n\n# Filter out rows with NA values in king_age or consort_age, and calculate the age gap\nfiltered_monarchs_marriages &lt;- cleaned_monarchs_marriages |&gt;\n    filter(!is.na(king_age) & !is.na(consort_age)) |&gt;\n    mutate(\n        age_gap = abs(king_age - consort_age),\n        pair_name = paste(king_name, \"-\", consort_name),\n        pair_name = fct_reorder(pair_name, -consort_age, .desc = TRUE)\n    ) \n\n# Subset for kings labels\nkings_data &lt;- filtered_monarchs_marriages |&gt;\n    select(pair_name, king_name,king_age, consort_age) |&gt;\n    mutate(hjust = case_when(\n        king_age &lt; consort_age ~ 1,  \n        king_age &gt; consort_age ~ -0.5,  \n        TRUE ~ -1                  \n    ))\n\n# Subset for consorts labels\nconsorts_data &lt;- filtered_monarchs_marriages|&gt;\n    select(pair_name, consort_name, consort_age, king_age) |&gt;\n    mutate(hjust = case_when(\n        consort_age &lt; king_age ~ 1,\n        consort_age &gt; king_age ~ -0.4,\n        TRUE ~ 1\n    ))\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- col_palette  &lt;- MetBrewer::met.brewer(\"Degas\")[c(6, 2)]  \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 34 } &bull; Source: List of Monarchs by marriage (.ianvisits.co.uk)&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Age at Marriage of Kings and Consorts\")\nsubtitle_text &lt;- str_glue(\"A comparison of ages at marriage among monarchs and their consorts across history.\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 12, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"top\",\n    \n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 20, r = 25, b = 20, l = 25),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.2), color = text_col,\n                                         family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_blank(),                                                                # Hide y-axis title\n    axis.text.y           = element_blank(),                                                                # Hide y-axis labels\n    axis.text.x           = element_text(size = rel(0.95), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = 0.12),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_blank(),\n    panel.grid.major.y    = element_blank(),  \n    panel.grid.minor.y    = element_blank(),\n    \n    axis.text.x.top       = ggtext::element_markdown(),\n)   \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  final plot ----  \np &lt;- ggplot() +\n    geom_dumbbell(\n        data = filtered_monarchs_marriages,\n        aes(x = king_age, xend = consort_age, y = pair_name),\n        size = 0.25, \n        color = 'gray50', \n        size_x = 3, \n        size_xend = 3, \n        dot_guide = FALSE\n    ) +\n    \n    # Plot kings' data\n    geom_point(\n        data = kings_data,\n        aes(x = king_age, y = pair_name, color = \"King's Age\"), \n        size = 3\n    ) +\n    geom_text(\n        data = kings_data,\n        aes(x = king_age, y = pair_name, label = king_name, hjust = hjust),\n        size = 2.8,\n        color = col_palette[2],                \n        fontface = 'bold',\n        nudge_x = -2  \n    ) +\n    \n    # Plot consorts' data\n    geom_point(\n        data = consorts_data,\n        aes(x = consort_age, y = pair_name, color = \"Consort's Age\"), \n        size = 3\n    ) +\n    geom_text(\n        data = consorts_data,\n        aes(x = consort_age, y = pair_name, label = consort_name, hjust = hjust),\n        size = 2.8,\n        color = col_palette[1],               \n        fontface = 'bold',\n        nudge_x = -2  \n    ) +\n    \n    # Scales\n    scale_x_continuous(\n        limits = c(-15,80),\n        labels = scales::label_number(suffix = \" yrs\"),\n        position = \"top\"\n    ) +\n    scale_y_discrete() +\n    scale_color_manual(\n        name = \"Legend:\",\n        values = col_palette                \n    ) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        x = element_blank(),\n        y = element_blank(),\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n    ) +\n    \n    # Theme\n    theme(\n        plot.title = element_markdown(\n            size = rel(2),\n            family = \"title\",\n            color = title_col,\n            face = \"bold\",\n            lineheight = 0.85,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_markdown(\n            size = rel(1.1),\n            family = \"subtitle\",\n            color = title_col,\n            lineheight = 1,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size = rel(.65),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 0.6,\n            hjust = 0,\n            halign = 0,\n            margin = margin(t = 10, b = 0)\n        )\n    ) \n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_34.png\"),\n  plot = p,\n  width  =  8,\n  height =  12,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_34.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_34.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_32.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_32.html",
    "title": "Judo’s Elite: Medal Achievements of the Top 10 Nations at the Summer Olympics Games, 1964 - 2016",
    "section": "",
    "text": "Figure 1: This heatmap illustrates the medal achievements of the top 10 nations in Olympic judo competitions from 1962 to 2016. The x-axis represents Olympic years, while the y-axis lists countries. The heatmap is divided into two sections: one for men and another for women. The colors on the heatmap range from light teal to dark orange, representing the number of medals won, from zero to seven, respectively.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,         # Compact and Flexible Summaries of Data\n  scales,        # Scale Functions for Visualization\n  lubridate,     # Make Dealing with Dates a Little Easier\n  MetBrewer      # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n )  \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 32) \n\nolympics &lt;- tt$olympics |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(olympics)\nskim(olympics)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Judo df\njudo &lt;- olympics |&gt; \n    filter(sport == \"Judo\") |&gt; \n    mutate(\n        gender = case_when(\n            str_detect(event, \"Men's\")   ~ \"Men\",\n            str_detect(event, \"Women's\") ~ \"Women\",\n            TRUE ~ \"Unspecified\"  \n        ),\n        weight_class = str_replace_all(event, c(\"Men's \" = \"\", \"Women's \" = \"\")),\n        weight_class = str_replace_all(weight_class, c(\"Judo \" = \"\")),\n        weight_class = factor(weight_class, \n                              levels = c(\"Extra-Lightweight\", \"Half-Lightweight\", \"Lightweight\", \n                                         \"Half-Middleweight\", \"Middleweight\" , \"Half-Heavyweight\", \n                                         \"Heavyweight\", \"Open Class\"))\n        )  \n\n# Judo medals\njudo_medals &lt;- judo |&gt;\n    filter(medal %in% c(\"Gold\", \"Silver\", \"Bronze\")) |&gt;\n    count(country = team, year, gender, medal)\n\n# Count medals for top countries\ntop_countries_medals &lt;- judo_medals |&gt;\n    group_by(country) |&gt;\n    summarize(total_medals = sum(n)) |&gt;\n    slice_max(total_medals, n = 10) |&gt;\n    pull(country)\n\n# Filter for the top 10 countries and calculate medals count\nfiltered_judo_medals &lt;- judo |&gt;\n    filter(team %in% top_countries_medals) |&gt;\n    group_by(country = team, year, gender) |&gt;\n    summarise(\n        medal_count = sum(medal %in% c(\"Gold\", \"Silver\", \"Bronze\")), \n        .groups = \"drop\"\n        ) |&gt;\n    arrange(country, year, gender)\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"#3d3d3d\"           \nsubtitle_col &lt;- \"#3d3d3d\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- colorspace::darken(\"#8e8a7b\" , 0.2)   \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 32 } &bull; Source: Kaggle Olypmic history data &lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Judo’s Elite: Medal Achievements of the Top 10 Nations at the&lt;br&gt;\n                          Summer Olympics Games, 1964 - 2016\")\nsubtitle_text &lt;- str_glue(\"Overview of Olympic medal counts by gender across decades,&lt;br&gt;\n                          highlighting judo's leading nations.\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nfont_add_google(\"Shadows Into Light\", regular.wt = 400, family = \"anotation\")\nshowtext_auto(enable = TRUE)\n\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'top',\n    legend.justification  = \"right\",\n    legend.title.position = \"top\",\n    legend.title.align    = 1,  \n    legend.box.just       = \"right\",  \n    \n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 20, r = 25, b = 20, l = 25),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.2), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.2), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = .15),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray'),\n    panel.grid.minor.y    = element_blank(),\n    panel.grid.major.y    = element_blank(),\n    \n    strip.text            = element_textbox(size     = rel(1.1),\n                                            face     = 'bold',\n                                            color    = text_col,\n                                            hjust    = 0.5,\n                                            halign   = 0.5,\n                                            r        = unit(5, \"pt\"),\n                                            width    = unit(5.5, \"npc\"),\n                                            padding  = margin(3, 0, 3, 0),\n                                            margin   = margin(3, 3, 3, 3),\n                                            fill     = \"transparent\"),\n    \n    panel.spacing       = unit(3, 'lines'),\n)  \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  initial plot ----  \np &lt;- filtered_judo_medals |&gt;\n    ggplot(aes(x = year, y = fct_reorder(country, medal_count, .fun = sum), fill = medal_count)) +\n    \n  # Geoms\n  geom_tile(color = \"white\", linewidth = 0.15) +\n  geom_text(data = filtered_judo_medals |&gt; filter(gender == \"Men\"),\n            aes(label = \"Country\", x = 1962, y = \"Japan\"),\n            size = 6.5, color = text_col, family = \"text\", fontface = \"bold\", \n            hjust = 1.4, vjust = -1.5) +\n\n  # Scales\n  scale_x_continuous(breaks = seq(\n      min(filtered_judo_medals$year), \n      max(filtered_judo_medals$year), \n      by = 4), \n      labels = function(x) paste0(\"'\", substr(x, 3, 4))) +\n  scale_y_discrete() +\n  coord_cartesian(clip = \"off\") +\n  scale_fill_stepsn(\n    colors = c('#DFEDEB', \"#A1FCDF\", \"#7FD8BE\", \"#FCD29F\", \"#FCAB64\"),\n    limits = c(0, 7), \n    breaks = 0:7,\n    labels = as.character(0:7),\n    guide = guide_colorsteps(\n        direction = \"horizontal\",\n        barwidth = unit(10, \"cm\"),\n        barheight = unit(0.5, \"cm\"),\n        frame.colour = NA,\n        title.position = \"top\",\n        title.hjust = 1\n        )\n    ) +\n\n  # Labs\n  labs(\n    title    = title_text,\n    subtitle = subtitle_text,\n    caption  = caption_text,\n    x = \"Year\",\n    y = \"\",\n    fill = \"Medal Count\"\n    ) +\n\n  # Facet\n  facet_wrap(vars(gender), nrow = 2, axes = \"all\") +\n\n  # Theme\n  theme(\n      plot.title      = element_markdown(\n          size        = rel(1.5),\n          family      = \"title\",\n          color       = title_col,\n          face        = \"bold\",\n          lineheight  = 0.85,\n          margin      = margin(t = 5, b = 10)\n      ),\n      plot.subtitle   = element_markdown(\n          size        = rel(1.1),\n          family      = \"subtitle\",\n          color       = title_col,\n          lineheight  = 1,\n          margin      = margin(t = 5, b = 10)\n      ),\n      plot.caption    = element_markdown(\n          size        = rel(.6),\n          family      = \"caption\",\n          color       = caption_col,\n          lineheight  = 0.6,\n          hjust       = 0,\n          halign      = 0,\n          margin      = margin(t = 10, b = 5)\n      ),\n  )  \n    \n### |-  annotated plot ----  \n\nmen_text &lt;- str_glue(\"Judo made its first Olympic appearance in 1964,\\nbut was not included on the program of\\nthe 1968 Olympic Games.\")\n\nwomen_text &lt;- str_glue(\"Women's judo made its first appearance at the\\n1988 Olympic Games, as a demonstration sport.\\nWomen's Judo became an official part of the\\nOlympic games from the 1992 Barcelona games\")\n\n### |-  final plot ----  \np &lt;- p + \n    \n    # Men's Judo History Note\n    geom_text(data = filtered_judo_medals |&gt; filter(gender == \"Men\"),\n              aes(x = 1964, y = Inf, label = men_text),\n              hjust = .6, vjust = -1.2, \n              size = 3.5, color = text_col,  family = \"anotation\", \n              lineheight = 0.9) +\n    \n    # Curved Arrow for Men's Note\n    geom_curve(data = filtered_judo_medals |&gt; filter(gender == \"Men\"),\n               aes(x = 1968, y = \"Japan\", xend = 1968, yend = \"South Korea\"), \n               curvature = 0, arrow = arrow(type = \"closed\", length = unit(0.08, \"inches\")),\n               linewidth = .5,  \n               color = text_col, size = 0.7) +\n    \n    # Women's Judo History Note\n    geom_text(data = filtered_judo_medals %&gt;% filter(gender == \"Women\"),\n              aes(label = women_text, x = 1962, y = \"Japan\"),\n              hjust = 0, vjust = 1, size = 3.5, color = text_col, family = \"anotation\", \n              lineheight = 0.9) \n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_32.png\"),\n  plot = p,\n  width  =  8,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_32.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_32.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_03.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_03.html",
    "title": "Youth Vaping Crisis: Policy Intervention Failure",
    "section": "",
    "text": "Figure 1: Data visualization showing youth vaping rates from 2012-2023 across 37 countries. The top graph reveals rates increasing from 0.3% to 13.9% despite two policy interventions in 2016 and 2018. The bottom chart quantifies policy failure through three metrics: high annual growth rate (+38.5%), a significant gap between youth and adult usage (7.5 percentage points), and current rates far exceeding target levels (+8.9 percentage points above 5% target).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow codeif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  patchwork,         # The Composer of Plots\n  camcorder          # Record Your Plot History\n) \n\n### |- figure size ---- \ngg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 10,\n  height = 12,\n  units  = \"in\",\n  dpi    = 320)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codevaping_raw &lt;- read_csv(\n  here::here(\"data/OECD_use_of_vaping_products.csv\")\n  ) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(vaping_raw)\nskim(vaping_raw)\n\n\n4. Tidy Data\n\nShow codevaping_clean &lt;- vaping_raw |&gt;\n  # Select only the relevant columns\n  select(\n    country = reference_area,\n    year = time_period,\n    age_group = age_2,\n    sex = sex_2,\n    vaping_percentage = obs_value,\n    data_status = observation_status\n  ) |&gt;\n  # Filter for valid data\n  filter(!is.na(vaping_percentage)) |&gt;\n  mutate(\n    year = as.numeric(year),\n    # Clean up the age group labels for better visualization\n    age_group = case_when(\n      age_group == \"15 years or over\" ~ \"Adults (15+)\",\n      age_group == \"15-24 years\" ~ \"From 15 to 24 years\",\n      TRUE ~ age_group\n    ),\n    # Clean up sex labels\n    sex = case_when(\n      sex == \"_T\" ~ \"Total\",\n      sex == \"M\" ~ \"Male\",\n      sex == \"F\" ~ \"Female\",\n      TRUE ~ sex\n    )\n  )\n\n# Get main trend data for youth vaping\nyouth_trend &lt;- vaping_clean |&gt;\n  filter(\n    age_group == \"From 15 to 24 years\",\n    sex == \"Total\"\n  ) |&gt;\n  group_by(year) |&gt;\n  summarize(\n    avg_vaping = mean(vaping_percentage, na.rm = TRUE), \n    .groups = \"drop\")\n\n# Define policies and their implementation dates\npolicy_years &lt;- c(2016, 2018)\npolicy_labels &lt;- c(\"Flavor\\nRestrictions\", \"Age\\nVerification\")\n\npolicy_data &lt;- tibble(\n  year = policy_years,\n  policy = policy_labels,\n  y_pos = c(2, 2)                        \n)\n\n# Calculate key metrics from the data for annotations\nannotations &lt;- youth_trend |&gt;\n  # Calculate year-over-year change\n  arrange(year) |&gt;\n  mutate(\n    prev_value = lag(avg_vaping),\n    pct_change = (avg_vaping - prev_value) / prev_value * 100\n  ) |&gt;\n  # Select key years for annotations \n  filter(year %in% c(2013, 2016, 2019, 2022)) |&gt;\n  mutate(\n    # Create annotation text with proper placement coordinates\n    label = case_when(\n      year == 2013 ~ \"Initial\\nadoption rate\",  \n      year == 2016 ~ \"\", \n      year == 2019 ~ \"Temporary decline\\nafter restrictions\",  \n      year == 2022 ~ \"Significant growth\\ndespite interventions\",  \n      TRUE ~ \"\"\n    ),\n    # Adjust label positions \n    x_pos = case_when(\n      year == 2013 ~ year + 1.2,\n      year == 2019 ~ year + 1.4,\n      year == 2022 ~ year - 1.7,\n      TRUE ~ year\n    ),\n    y_pos = case_when(\n      year == 2013 ~ avg_vaping,\n      year == 2019 ~ avg_vaping,\n      year == 2022 ~ avg_vaping,\n      TRUE ~ avg_vaping\n    ),\n    # Calculate growth since policy implementation\n    growth_since_policy = if_else(\n      year == 2022, \n      (avg_vaping / youth_trend$avg_vaping[youth_trend$year == 2016] - 1) * 100,\n      NA_real_\n    )\n  )\n\n# Calculate the growth percentage for 2022 annotation\ngrowth_pct &lt;- round(annotations$growth_since_policy[annotations$year == 2022], 0)\n\n# Calculate growth rates by period\nperiod_growth &lt;- youth_trend |&gt;\n  mutate(\n    period = case_when(\n      year &lt;= 2016 ~ \"Pre-Policy (2012-2016)\",\n      year &gt; 2016 & year &lt;= 2018 ~ \"Initial Response (2016-2018)\",\n      year &gt; 2018 ~ \"Post-Implementation (2018-2022)\",\n      TRUE ~ \"Other\"\n    )\n  ) |&gt;\n  group_by(period) |&gt;\n  summarize(\n    start_year = min(year),\n    end_year = max(year),\n    start_value = first(avg_vaping),\n    end_value = last(avg_vaping),\n    # Calculate annualized growth rate for fair comparison\n    years_elapsed = end_year - start_year,\n    total_growth = (end_value / start_value - 1) * 100,\n    annual_growth = (((end_value / start_value)^(1/years_elapsed)) - 1) * 100,\n    .groups = \"drop\"\n  ) |&gt;\n  # Filter out any incomplete periods\n  filter(years_elapsed &gt; 0) |&gt;\n  # Add a period order for plotting\n  mutate(period_order = case_when(\n    period == \"Pre-Policy (2012-2016)\" ~ 1,\n    period == \"Initial Response (2016-2018)\" ~ 2,\n    period == \"Post-Implementation (2018-2022)\" ~ 3,\n    TRUE ~ 4\n  )) |&gt;\n  arrange(period_order)\n\n# Calculate age group gap over time\nage_gap_data &lt;- vaping_clean |&gt;\n  filter(sex == \"Total\") |&gt;\n  group_by(year, age_group) |&gt;\n  summarize(avg_vaping = mean(vaping_percentage, na.rm = TRUE), .groups = \"drop\") |&gt;\n  pivot_wider(names_from = age_group, values_from = avg_vaping) |&gt;\n  rename(\n    youth = `From 15 to 24 years`,\n    adults = `Adults (15+)`\n  ) |&gt;\n  mutate(\n    gap = youth - adults,\n    gap_pct = (youth / adults - 1) * 100\n  ) |&gt;\n  # Calculate the change in gap size over time\n  arrange(year) |&gt;\n  mutate(\n    period = case_when(\n      year &lt;= 2016 ~ \"Pre-Policy\",\n      year &gt; 2016 & year &lt;= 2018 ~ \"Initial Response\",\n      year &gt; 2018 ~ \"Post-Implementation\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n# Calculate policy effectiveness metrics\npolicy_effectiveness &lt;- tibble(\n  metric = c(\n    \"Annual Growth Rate After Policies\", \n    \"Youth-Adult Gap After Policies\", \n    \"Difference from Target Rate (5%)\"\n  ),\n  value = c(\n    # Annual growth rate after policy implementation (2018-2022)\n    period_growth$annual_growth[period_growth$period == \"Post-Implementation (2018-2022)\"],\n    \n    # Current youth-adult gap (latest year)\n    age_gap_data$gap[age_gap_data$year == max(age_gap_data$year)],\n    \n    # Difference from a hypothetical target rate of 5% (latest year data)\n    youth_trend$avg_vaping[youth_trend$year == max(youth_trend$year)] - 5\n  ),\n  description = c(\n    \"Average annual increase in youth vaping\\nafter both policies were implemented\",\n    \"Percentage point difference between\\nyouth and adult rates in latest data\",\n    \"Amount by which current youth vaping rates\\nexceed a hypothetical 5% target\"\n  )\n)\n\npolicy_effectiveness &lt;- policy_effectiveness |&gt;  \n  mutate(\n    # Reorder factors for display\n    metric = factor(metric, levels = rev(metric)),\n    # Category labels\n    metric_label = case_when(\n      metric == \"Annual Growth Rate After Policies\" ~ \"Annual Growth Rate\\nAfter Policies\",\n      metric == \"Youth-Adult Gap After Policies\" ~ \"Youth-Adult Gap\\nAfter Policies\",\n      metric == \"Difference from Target Rate (5%)\" ~ \"Difference from\\nTarget Rate (5%)\",\n      TRUE ~ as.character(metric)\n    ),\n    # Format value labels \n    value_label = case_when(\n      metric == \"Annual Growth Rate After Policies\" ~ paste0(\"+\", round(value, 1), \"% annually\"),\n      metric == \"Youth-Adult Gap After Policies\" ~ paste0(round(value, 1), \" percentage points\"),\n      metric == \"Difference from Target Rate (5%)\" ~ paste0(\"+\", round(value, 1), \" percentage points\"),\n      TRUE ~ as.character(round(value, 1))\n    )\n  )\n\n# Create separate data frames for the description texts\ndesc_data1 &lt;- policy_effectiveness |&gt;\n  filter(metric != \"Annual Growth Rate After Policies\")\n\ndesc_data2 &lt;- policy_effectiveness |&gt;\n  filter(metric == \"Annual Growth Rate After Policies\")\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"#FF4B4B\", \"#555555\", \"#333333\"\n  ))\n\n### |-  titles and caption ----\ntitle_text   &lt;- str_glue(\"Youth Vaping Crisis: Policy Intervention Failure\") \nsubtitle_text &lt;- str_glue(\"ODCE Data from 37 countries shows vaping rates accelerated despite regulatory efforts (2012-2023)\")\n\n# Create caption\ncaption_text &lt;- create_swd_caption(\n    year = 2025,\n    month = \"Mar\",\n    source_text = \"Data Source: OECD (DSD_HEALTH_LVNG@DF_HEALTH_LVNG_VP) Use of vaping products\"\n  )\n\n\n# |- fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n    \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  P1. Vaping Trend Plot  ----\nvaping_tred &lt;- youth_trend |&gt;\n  ggplot(aes(x = year, y = avg_vaping)) +\n  # Geoms\n  geom_hline(yintercept = seq(0, 15, by = 5), color = 'gray90', linewidth = 0.1) +\n  geom_vline(xintercept = seq(2012, 2022, by = 2), color = 'gray90', linewidth = 0.1) +\n  \n  geom_vline(xintercept = policy_years,                                         # Policy intervention lines\n             linetype = \"dashed\", color = colors$palette[2], alpha = 0.7, size = 0.5) +\n  \n  geom_line(size = 1.2, color = colors$palette[1]) +\n  geom_point(size = 3.5, color = colors$palette[1]) +\n  geom_point(size = 2, color = \"white\") +  \n  \n  geom_text(data = policy_data,                                                 # Policy labels \n            aes(x = year, y = y_pos, label = policy),\n            color = colors$palette[2], fontface = \"bold\", size = 3.5,\n            hjust = 0, vjust = 0, nudge_x = 0.05) +\n  \n  geom_text(aes(label = paste0(format(avg_vaping, digits = 1), \"%\")),\n            vjust = -2.5, hjust = 0.8, color = colors$palette[1], fontface = \"bold\", size = 3.5) +\n  \n  # Key trend annotations \n  geom_segment(data = annotations |&gt; filter(label != \"\"),\n               aes(x = year, xend = x_pos, y = avg_vaping, yend = y_pos),\n               color = alpha(colors$palette[3], 0.5), size = 0.5, \n               arrow = arrow(length = unit(0.01, \"npc\"), type = \"closed\", ends = \"first\")) +\n  \n  geom_label(data = annotations |&gt; filter(label != \"\"),\n             aes(x = x_pos, y = y_pos, label = label),\n             color = colors$palette[3], size = 3, fontface = \"italic\",\n             fill = alpha(\"white\", 0.9), label.size = 0.5, \n             label.padding = unit(0.5, \"lines\")) +\n  \n  geom_hline(yintercept = 5, linetype = \"dashed\", color = \"darkgreen\", size = 0.3) +\n  annotate(\"text\", x = 2012.5, y = 5.3, label = \"Target rate (5%)\",             # Target reference line\n           color = \"darkgreen\", hjust = 0, size = 3, fontface = \"italic\") +\n  \n  # Scales \n  scale_x_continuous(\n    breaks = seq(2012, 2022, by = 2),\n    limits = c(2012, 2023),\n    ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, \"%\"),\n    breaks = seq(0, 15, by = 5),\n    limits = c(0, 15)\n  ) +\n  coord_cartesian(clip = 'off') +\n  \n  # Labs\n  labs(\n    title = \"Youth Vaping Crisis: Regulatory Failure\",\n    subtitle = \"Despite policy interventions, youth vaping rates have surged to unprecedented levels\",\n    x = NULL, \n    y = \"Percentage of Youth Using Vaping Products\"\n  ) \n\n\n# P2. Policy Effectiveness Plot ----\neffectiveness_plot &lt;- ggplot(policy_effectiveness, aes(x = value, y = metric_label)) +\n  # Geoms\n  geom_vline(xintercept = seq(0, 40, by = 10), color = \"gray90\", linewidth = 0.3) +\n  geom_col(fill = colors$palette[1], width = 0.7, alpha = 0.8) +\n  geom_text(aes(label = value_label), \n            hjust = -0.1, \n            color = colors$palette[3], \n            size = 3.5, \n            fontface = \"bold\") +\n  # Explanatory text \n  geom_text(data = desc_data1,\n            aes(x = 10, label = description),\n            hjust = 0,\n            vjust = 1.8,\n            color = colors$palette[2],\n            size = 2.8,\n            lineheight = 0.9) +\n  geom_text(data = desc_data2,\n            aes(x = 40, label = description),\n            hjust = 0,\n            vjust = 1.8,\n            color = colors$palette[2],\n            size = 2.8,\n            lineheight = 0.9) +\n  \n  # Scales\n  scale_x_continuous(\n    limits = c(0, max(policy_effectiveness$value) * 1.3),\n    breaks = seq(0, 40, by = 10),\n    expand = expansion(mult = c(0, 0.1))\n  ) +\n  coord_cartesian(clip = 'off') +\n  \n  # Labs\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Policy Effectiveness Metrics\",\n    subtitle = \"Three key indicators show disappointing policy outcomes\",\n    caption = \"Note: All metrics derived from OECD vaping dataset; lower values would indicate policy success\"\n  ) + \n  \n  # Theme\n  theme(\n    plot.caption = element_text(size = rel(0.5), color = colors$caption, margin = margin(t = 10))\n  )\n\n# Combined Plots ----\ncombined_plot &lt;-vaping_tred / effectiveness_plot +\n  plot_layout(heights = c(2, 1)) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size   = rel(2.2),\n        family = fonts$title,\n        face   = \"bold\",\n        color  = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),   \n      plot.subtitle = element_text(\n        size   = rel(0.9),\n        family = fonts$subtitle,\n        color  = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 5)\n      ), \n      plot.caption = element_markdown(\n        size   = rel(0.6),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(\n  combined_plot, type = 'swd', year = 2025, month = 03, \n  width = 10, height = 12\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 patchwork_1.3.0 skimr_2.1.5     janitor_2.2.0  \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      repr_1.1.7         codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[25] pillar_1.9.0       magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1  \n[29] digest_0.6.37      stringi_1.8.4      rsvg_2.6.1         rprojroot_2.0.4   \n[33] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.3         \n[37] magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4         withr_3.0.2       \n[41] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     bit_4.5.0         \n[45] hms_1.1.3          evaluate_1.0.1     knitr_1.49         markdown_1.13     \n[49] gridGraphics_0.5-1 rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1     \n[53] xml2_1.3.6         renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1 \n[57] vroom_1.6.5        jsonlite_1.8.9     R6_2.5.1           fs_1.6.5          \n[61] systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_03.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nData Sources:\n\nOECD Use of vaping products: DSD_HEALTH_LVNG@DF_HEALTH_LVNG_VP\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_02 - Ex_056.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_02 - Ex_056.html",
    "title": "Retail Department Performance Analysis: Growth and Volatility",
    "section": "",
    "text": "Update: This post has been updated based on valuable feedback from the Antti Rask. The changes include:\n\nImplemented a categorical color palette to create better visual distinction between the three highlighted departments\nApplied consistent colors across both visualizations to help readers connect departments between charts\nCreated more descriptive titles with colored department names using the ggtext package to enhance immediate comprehension\nRevised the chart subtitles to better explain the key insights from each visualization\nRemoved redundant axis titles while maintaining necessary labels for clarity\nAdded specific emphasis on Grocery’s unique position as highly volatile despite lower growth\nImproved the scatter plot to better highlight the relationship between growth rates and stability patterns\nEnhanced overall visual hierarchy by using color more purposefully throughout the visualization\n\nOriginal\nThe goal of this month’s Storytelling with Data exercise is toresist the temptation to show all the data.\n\n\n\n\n\nFigure 1: Original chart\n\n\nAdditional information can be found HERE\nMakeover\n\n\n\n\n\nFigure 2: Retail department performance visualization with two charts. Top chart shows year-over-year growth trends from Jan 2024 to Mar 2025, highlighting the three most volatile departments (Grocery, Hardware, and Toys) with Grocery showing the most dramatic fluctuations. Bottom chart plots standard deviation against mean growth rate for all departments, revealing that departments with higher volatility (like Grocery) don’t necessarily have the highest average growth rates.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow codeif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  camcorder,         # Record Your Plot History,\n  ggrepel,           # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  patchwork          # The Composer of Plots # The Composer of Plots # The Composer of Plots\n) \n\n### |- figure size ---- \ngg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 8,\n  height = 10,\n  units  = \"in\",\n  dpi    = 320)\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow coderaw_data &lt;- read_csv(\n  here::here(\"data/swdexercise056.csv\")\n  ) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(raw_data)\n\n\n4. Tidy Data\n\nShow codetidy_data &lt;- raw_data |&gt;\n  rename(month = column1, year = column2) |&gt;\n  mutate(\n    date = as.Date(paste(year, month, \"01\", sep = \"-\"), \n                   format = \"%Y-%b-%d\")\n  ) |&gt;\n  select(date, everything(), -month, -year) |&gt;\n  pivot_longer(\n    cols = -date, \n    names_to = \"department\", \n    values_to = \"growth\"\n  ) |&gt; \n  mutate(\n    year_month = format(date, \"%b %Y\"),\n    quarter = paste0(\"Q\", quarter(date)),\n    year_quarter = paste(year(date), quarter, sep = \"-\")\n  )\n\n# Compute summary statistics for each department\nsummary_stats &lt;- tidy_data |&gt;\n  group_by(department) |&gt;\n  summarise(\n    mean_growth = mean(growth, na.rm = TRUE),\n    min_growth = min(growth, na.rm = TRUE),\n    max_growth = max(growth, na.rm = TRUE),\n    sd_growth = sd(growth, na.rm = TRUE),\n    range_growth = max_growth - min_growth,\n    cv_growth = sd_growth / abs(mean_growth),  \n    .groups = 'drop'\n  ) |&gt;\n  arrange(desc(sd_growth))\n\n# Summary statistics \nstats_table &lt;- summary_stats |&gt;\n  select(department, mean_growth, sd_growth, min_growth, max_growth, range_growth) |&gt;\n  mutate(across(where(is.numeric), ~ round(., 2)))\n\n# Identify the most volatile departments (using SD as criteria)\nvolatile_departments &lt;- summary_stats |&gt; \n  slice_max(order_by = sd_growth, n = 3) |&gt; \n  pull(department)\n\n# Prepare the data for plotting\nhighlight_data &lt;- tidy_data |&gt; \n  filter(department %in% volatile_departments)\n\n\n5. Visualization Parameters\n\nShow code# Get the departments in the correct order (by volatility)\nvolatile_departments &lt;- summary_stats |&gt; \n  slice_max(order_by = sd_growth, n = 3) |&gt; \n  pull(department)\n\n# Create a categorical palette for three volatile departments\ncat_colors &lt;- c(\n  \"grocery\" = \"#0F62FE\",   \n  \"hardware\" = \"#FF7EB6\",  \n  \"toys\" = \"#6929C4\"        \n)\n\n# Get the rest of the departments\nother_departments &lt;- setdiff(unique(tidy_data$department), volatile_departments)\n\n# Create a palette for all departments (both highlighted and non-highlighted)\nall_dept_colors &lt;- c(cat_colors, \n                     setNames(rep(\"gray80\", length(other_departments)), \n                              other_departments))\n\n# Colors theme function\ncolors &lt;- get_theme_colors(\n  palette = all_dept_colors\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Retail Department Performance Analysis: Growth and Volatility\")\nsubtitle_text &lt;- str_glue(\"Understanding stability patterns and growth trajectories across retail categories\\n(Jan 2024 - Mar 2025)\")\n\n# Format the names with colors for the descriptive title\ngrocery_color &lt;- cat_colors[\"grocery\"]\nhardware_color &lt;- cat_colors[\"hardware\"]\ntoys_color &lt;- cat_colors[\"toys\"]\n\n# P1 chart title\nrich_title &lt;- glue::glue(\n  \"&lt;span style='color:{grocery_color}'&gt;Grocery&lt;/span&gt;, \",\n  \"&lt;span style='color:{hardware_color}'&gt;Hardware&lt;/span&gt;, and \",\n  \"&lt;span style='color:{toys_color}'&gt;Toys&lt;/span&gt; are the three most volatile departments\"\n)\n\n# P2 chart title\nrich_title_p2 &lt;- glue::glue(\n  \"&lt;span style='color:{grocery_color}'&gt;Grocery&lt;/span&gt; shows highest volatility despite below-average growth\"\n)\n\n# Create caption\ncaption_text &lt;- create_swd_exe_caption(\n  year = 2025,\n  month = \"Mar\",\n  source_text =  \"Let's Practice! Exercise 5.6\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, color = colors$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n    \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code# P1. Line Chart ----\np1 &lt;- ggplot() +\n  # Geoms\n  geom_hline(\n    yintercept = 0, color = \"gray30\", alpha = 0.5, linewidth = 0.5\n  ) +\n  geom_line(data = tidy_data, \n            aes(x = date, y = growth, group = department), \n            color = \"gray\", linewidth = 0.2, alpha = 0.8\n  ) +\n  geom_line(data = highlight_data,           # Highlighted volatile departments\n            aes(x = date, y = growth, color = department), \n            linewidth = 1.2\n  ) +\n  geom_point(data = highlight_data,\n             aes(x = date, y = growth, color = department),\n             size = 2\n  ) +\n  geom_text_repel(\n    data = highlight_data |&gt; \n      group_by(department) |&gt; \n      filter(date == max(date)),\n    aes(x = date, y = growth, label = str_to_title(department), color = department),\n    hjust = -0.2, size = 4, fontface = \"bold\",\n    direction = \"y\", segment.color = \"gray50\",\n    box.padding = 0.5, point.padding = 0.3\n  ) +\n  \n  # Scales\n  scale_x_date(\n    date_breaks = \"2 months\",\n    date_labels = \"%b\\n%Y\",\n    expand = expansion(mult = c(0.01, 0.1))  \n  ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, \"%\"),\n    breaks = seq(-3, 7, by = 1)\n  ) +\n  scale_color_manual(values = cat_colors) +  \n  # Labs\n  labs(\n    title = rich_title,\n    subtitle = \"Department Year-over-Year Growth Trends\",\n    y = NULL,\n    x = NULL,\n  ) +\n  # Theme\n  theme(\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    plot.title = element_markdown(\n      size = rel(1.1), \n      family = fonts$title,\n      face = \"bold\",\n      margin = margin(b = 10)\n    )\n  )\n\n# P2. Scatter Plot ----\np2 &lt;- ggplot(summary_stats,\n             aes(x = mean_growth, y = sd_growth, label = department)) +\n  # Geoms\n  geom_point(\n    aes(color = department, size = range_growth),\n    alpha = 0.8\n  ) +\n  geom_text_repel(\n    size = 3.5,\n    box.padding = 0.5,\n    max.overlaps = 15,\n    segment.color = \"gray70\"\n  ) +\n  # Scales\n  scale_color_manual(\n    values = all_dept_colors  # applies the same colors to all departments\n  ) +\n  scale_size_continuous(range = c(2, 6)) +\n  labs(\n    title = rich_title_p2,\n    subtitle = \"Department Performance: Comparing Growth and Volatility\",\n    x = \"Mean Growth Rate (%)\",\n    y = NULL   \n  ) +\n  # Theme\n  theme(\n    plot.title = element_markdown(\n      size = rel(1.1), \n      family = fonts$title,\n      face = \"bold\",\n      margin = margin(b = 10)\n    ),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey70\", linewidth = 0.1),\n  )\n\n# Combined Plot -----\ncombined_plot &lt;- (p1 / p2) +\n  plot_layout(heights = c(1, 1))   \n\ncombined_plot &lt;- combined_plot +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text( \n        size = rel(1.4),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(0.95),  \n        family = fonts$subtitle,\n        color = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.65),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    ))\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(\n  combined_plot, \n  type = 'swd', \n  year = 2025, \n  month = 03, \n  exercise = 056,\n  width = 8, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 ggrepel_0.9.6   camcorder_0.1.0 janitor_2.2.0  \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      codetools_0.2-20   snakecase_0.11.1  \n[21] htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3       pillar_1.9.0      \n[25] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[29] stringi_1.8.4      labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4   \n[33] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.3         \n[37] magrittr_2.0.3     utf8_1.2.4         withr_3.0.2        bit64_4.5.2       \n[41] timechange_0.3.0   rmarkdown_2.29     bit_4.5.0          hms_1.1.3         \n[45] evaluate_1.0.1     knitr_1.49         markdown_1.13      gridGraphics_0.5-1\n[49] rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[53] renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1  vroom_1.6.5       \n[57] jsonlite_1.8.9     R6_2.5.1           fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_02-Ex_056.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nData Sources:\n\n\nData Sources:\n\nStorytelling with Data Exercise | resist the temptation to show all the data: Download the data\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_01.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_01.html",
    "title": "From Magic to Mixed Feelings: Analyzing ‘One Hundred Years of Solitude’ Reviews",
    "section": "",
    "text": "Figure 1: Data visualization analyzing reviews of One Hundred Years of Solitude with four plots: (1) Distribution of emotional content by rating category, showing positive emotions dominating higher ratings; (2) Emotional flow through reviews, illustrating a mix of joy, trust, and sadness across the text; (3) Review complexity by rating, indicating longer sentences in positive reviews; (4) Common word pairs in reviews, highlighting frequent terms such as ‘family’, ‘buendía’, and ‘realism’.\n\n\nUpdate: This post has been updated based on feedback from the #SWDchallenge community. The changes include: - Fixed the chart legends that were inadvertently left out during one iteration.\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow codeif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  camcorder,         # Record Your Plot History\n  textcat,           # N-Gram Based Text Categorization\n  ggdist,            # Visualizations of Distributions and Uncertainty # Visualizations of Distributions and Uncertainty # Visualizations of Distributions and Uncertainty\n  tidytext,          # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n  patchwork          # The Composer of Plots # The Composer of Plots # The Composer of Plots\n) \n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codegoodreads &lt;- read_csv(\n  here::here(\"data/goodreads_reviews_full.csv\"))\n  \nlibrarything &lt;- read_csv(\n  here::here(\"data/librarything_reviews_full.csv\"))\n\n# Combine the datasets\ncombined_reviews &lt;- bind_rows(goodreads, librarything)\n\n\n3. Examine the Data\n\nShow codeglimpse(goodreads)\nglimpse(librarything)\nglimpse(combined_reviews)\n\n\n4. Tidy Data\n\nShow codecombined_reviews_clean &lt;- combined_reviews |&gt;\n  # Combine 'star_rating' and 'numeric_rating' into a single 'rating' column\n  mutate(rating = coalesce(star_rating, numeric_rating)) |&gt;\n  # Convert 'review_date' to Date format\n  mutate(review_date = lubridate::mdy(review_date)) |&gt;\n  # Standardize column names\n  rename(\n    reviewer = reviewer_name,\n    date = review_date,\n    text = review_text\n  ) |&gt;\n  # Clean up review text  \n  mutate(\n    text = str_squish(text), # Remove extra whitespace\n    text = tolower(text),    # Convert to lowercase\n    text = str_replace_all(text, \"[^a-zA-Z0-9 .,!?']\", \"\") # Remove special characters\n  ) |&gt;\n  # Select and reorder columns\n  select(reviewer, date, rating, text, source) |&gt;\n  # Remove duplicate rows\n  distinct() |&gt; \n  mutate(\n    language = textcat(text),             # Add detected language as a new column\n    word_count = str_count(text, \"\\\\S+\")  # Count words in text\n    ) |&gt;  \n  filter(language == \"english\")           # Keep only English reviews\n\n\n# Housekeeping\nrm(goodreads, librarything, combined_reviews)\n\n\n# Prepare text data for sentiment analysis\nreview_sentiments &lt;- combined_reviews_clean |&gt;\n  unnest_tokens(word, text) |&gt;\n  anti_join(stop_words) |&gt;\n  inner_join(get_sentiments(\"nrc\")) |&gt;\n  # Add rating categories for comparison\n  mutate(rating_category = case_when(\n    rating &lt;= 2 ~ \"Negative (1-2)\",\n    rating == 3 ~ \"Neutral (3)\",\n    rating &gt;= 4 ~ \"Positive (4-5)\"\n  ))\n\n# 1. Revised Complexity Analysis\ncomplexity_analysis &lt;- combined_reviews_clean |&gt;    \n  mutate(\n    sentences = str_count(text, \"[.!?]+\"),\n    words_per_sentence = word_count / sentences,\n    rating_category = factor(case_when(\n      rating &lt;= 2 ~ \"Negative (1-2)\",\n      rating == 3 ~ \"Neutral (3)\",\n      rating &gt;= 4 ~ \"Positive (4-5)\"\n    ), levels = c(\"Negative (1-2)\", \"Neutral (3)\", \"Positive (4-5)\"))\n  ) |&gt;\n  filter(is.finite(words_per_sentence))\n\n# 2. Sentiment Flow (keeping existing structure, updating colors)\nsentiment_flow &lt;- review_sentiments |&gt;\n  mutate(\n    theme = case_when(\n      sentiment %in% c(\"joy\", \"trust\", \"anticipation\") ~ \"positive\",\n      sentiment %in% c(\"anger\", \"fear\", \"disgust\") ~ \"negative\",\n      TRUE ~ \"neutral\"\n    )\n  ) |&gt;\n  count(rating_category, theme) |&gt;\n  group_by(rating_category) |&gt;\n  mutate(prop = n/sum(n)) |&gt;\n  ungroup()\n\n# 3. Temporal Pattern (keeping existing structure)\ntemporal_pattern &lt;- review_sentiments |&gt;\n  group_by(reviewer) |&gt;\n  mutate(\n    position = row_number(),\n    position_pct = position/n()\n  ) |&gt;\n  count(position_pct = round(position_pct, 2), sentiment) |&gt; \n  ungroup()\n\n# 4. Simplified Bigram Network\nbigram_graph &lt;- combined_reviews_clean |&gt;\n  unnest_tokens(bigram, text, token = \"ngrams\", n = 2) |&gt;\n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \") |&gt;\n  filter(\n    !word1 %in% stop_words$word,\n    !word2 %in% stop_words$word,\n    !is.na(word1),\n    !is.na(word2)\n  ) |&gt;\n  count(word1, word2, sort = TRUE) |&gt;\n  filter(n &gt;= 4) |&gt;  # Increased threshold\n  slice_head(n = 15)  # Take only top 15 pairs\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"negative\" = \"#E69B95\", \"neutral\"  = \"#709BB0\", \"positive\" = \"#86B8B1\"))\n\n### |-  titles and caption ----\ntitle_text   &lt;- str_glue(\"From Magic to Mixed Feelings: Analyzing 'One Hundred Years of Solitude' Reviews\") \n\nsubtitle_text &lt;- str_glue(\n  \"How readers experience the novel: A deep dive into emotional responses, writing complexity, and thematic\\n\nconnections across different rating categories\",\n  \n  \"\\n\\n**Note**: This analysis is based on a small sample of 42 reviews, collected from Goodreads and LibraryThing\\n\nas of January 3, 2025.\")\n\n# Create caption\ncaption_text &lt;- create_swd_caption(\n  year = 2025,\n  month = \"Jan\",\n  source_text = \"Source: Scrapped from goodreads & librarthing\"\n)\n\n\n# |- fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n            \n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n      plot.margin         = margin(t = 10, r = 20, b = 10, l = 20),\n      axis.title.x        = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = colors$text, family = fonts$text, face = \"bold\", hjust = 0.5),\n      axis.title.y        = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = colors$text, family = fonts$text, face = \"bold\", hjust = 0.5),\n      axis.text           = element_text(size = rel(0.8), color = colors$text),\n      axis.line.x         = element_line(color = \"#252525\", linewidth = .3),\n      axis.ticks.x        = element_line(color = colors$text),  \n      axis.title          = element_text(face = \"bold\"),\n      panel.grid.minor    = element_blank(),\n      panel.grid.major    = element_blank(),\n      panel.grid.major.y  = element_line(color = \"grey85\", linewidth = .4)\n      )\n)\n      \n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code# 1. Sentiment Flow Plot\np1 &lt;- sentiment_flow |&gt;  \n  ggplot(aes(x = rating_category, y = prop, fill = theme)) +\n  geom_col(position = \"fill\", alpha = 0.9) +\n  scale_fill_manual(values = colors$palette) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"&lt;b&gt;Distribution of Emotional Content by Rating&lt;/b&gt;\",\n    fill = \"Emotional Theme\",\n    x = \"Rating Category\",\n    y = \"Proportion of Emotions\",\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# 2. Temporal Pattern Plot\np2 &lt;- temporal_pattern |&gt; \n  ggplot(aes(x = position_pct, y = n, fill = sentiment)) +\n  geom_area(position = \"fill\", alpha = 0.7) +\n  scale_fill_brewer(palette = \"RdYlBu\") +\n  scale_x_continuous(\n    labels = scales::percent,\n    breaks = c(0, 0.25, 0.5, 0.75, 1),\n    expand = c(0, 0)\n  ) +\n  scale_y_continuous(\n    labels = scales::percent,\n    expand = c(0, 0)\n  ) +\n  labs(\n    title = \"&lt;b&gt;Emotional Flow Through Reviews&lt;/b&gt;\",\n    x = \"Relative Position in Review\",\n    y = \"Proportion of Emotions\",\n    fill = \"Emotion\"\n  ) +\n  theme_minimal() +\n  theme(\n   plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# 3. Complexity Analysis Plot\np3 &lt;- complexity_analysis |&gt; \n  ggplot(aes(x = words_per_sentence, y = rating_category, fill = rating_category)) +\n  stat_gradientinterval(\n    aes(color = after_scale(fill)), \n    point_size = 1.2,\n    alpha = 0.3,\n    point_alpha = 0.7\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Negative (1-2)\" = \"#E69B95\",\n      \"Neutral (3)\"    = \"#709BB0\",\n      \"Positive (4-5)\" = \"#86B8B1\"\n    )\n  ) +\n  labs(\n    title = \"&lt;b&gt;Review Complexity by Rating&lt;/b&gt;\",\n    x = \"Words per Sentence\",\n    y = NULL,\n    fill = \"Rating Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    panel.grid.major.y = element_blank(),\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# 4. Bigram Network Plot\np4 &lt;- bigram_graph |&gt; \n  ggplot(aes(x = word1, y = word2)) +\n  geom_point(aes(size = n), color = colors$palette[\"neutral\"], alpha = 0.7) +\n  scale_size_continuous(range = c(2, 6)) +\n  labs(\n    title = \"&lt;b&gt;Common Word Pairs in Reviews&lt;/b&gt;\",\n    size = \"Frequency\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = rel(1)),\n    legend.position = \"right\",\n    axis.text.x = element_text(hjust = 1),\n    panel.grid = element_line(color = \"grey90\"),\n    plot.margin = margin(t = 10, r = 10, b = 20, l = 10)\n  )\n\n# Combine plots \ncombined_plots &lt;- (p1 + p2) /\n  (p3 + p4) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_markdown(\n        family = \"title\",\n        face = \"bold\", \n        size = rel(1.7),\n        color = colors$title,\n        margin = margin(b = 10)\n      ),\n      plot.subtitle = element_markdown(\n        family = \"subtitle\",\n        size = rel(1.1),\n        color = colors$subtitle, \n        margin = margin(b = 20),\n        lineheight = 1.1\n      ),\n      plot.caption = element_markdown(\n        family = \"caption\",\n        size = 10, \n        color = colors$caption,\n        margin = margin(t = 20),\n        hjust = 0.5,\n        lineheight = 1.2\n      )\n    )\n  ) &\n  theme(plot.background = element_rect(fill =colors$background, color = NA))\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(combined_plots, type = 'swd', year = 2025, month = 01, \n                    width = 12, height = 12)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/La_Paz\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 tidytext_0.4.2  ggdist_3.3.2    textcat_1.0-9  \n [5] camcorder_0.1.0 skimr_2.1.5     janitor_2.2.0   here_1.0.1     \n [9] glue_1.8.0      scales_1.3.0    showtext_0.9-7  showtextdb_3.0 \n[13] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[17] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[21] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[25] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     farver_2.1.2         fastmap_1.2.0       \n [4] janeaustenr_1.0.0    digest_0.6.37        timechange_0.3.0    \n [7] lifecycle_1.0.4      rsvg_2.6.1           tokenizers_0.3.0    \n[10] magrittr_2.0.3       compiler_4.4.0       rlang_1.1.4         \n[13] tools_4.4.0          utf8_1.2.4           yaml_2.3.10         \n[16] knitr_1.49           labeling_0.4.3       htmlwidgets_1.6.4   \n[19] curl_6.0.0           bit_4.5.0            RColorBrewer_1.1-3  \n[22] xml2_1.3.6           repr_1.1.7           withr_3.0.2         \n[25] grid_4.4.0           fansi_1.0.6          colorspace_2.1-1    \n[28] cli_3.6.3            rmarkdown_2.29       crayon_1.5.3        \n[31] generics_0.1.3       rstudioapi_0.17.1    textdata_0.4.5      \n[34] tzdb_0.4.0           commonmark_1.9.2     parallel_4.4.0      \n[37] ggplotify_0.1.2      yulab.utils_0.1.8    base64enc_0.1-3     \n[40] vctrs_0.6.5          Matrix_1.7-0         jsonlite_1.8.9      \n[43] slam_0.1-55          gridGraphics_0.5-1   hms_1.1.3           \n[46] bit64_4.5.2          systemfonts_1.1.0    magick_2.8.5        \n[49] gifski_1.32.0-1      codetools_0.2-20     distributional_0.5.0\n[52] stringi_1.8.4        gtable_0.3.6         munsell_0.5.1       \n[55] pillar_1.9.0         rappdirs_0.3.3       htmltools_0.5.8.1   \n[58] R6_2.5.1             rprojroot_2.0.4      vroom_1.6.5         \n[61] evaluate_1.0.1       lattice_0.22-6       markdown_1.13       \n[64] SnowballC_0.7.1      gridtext_0.1.5       tau_0.0-26          \n[67] snakecase_0.11.1     renv_1.0.3           Rcpp_1.0.13-1       \n[70] svglite_2.1.3        xfun_0.49            fs_1.6.5            \n[73] pkgconfig_2.0.3     \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_01.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nThe web scraping scripts used to collect the review data: - Goodreads: goodreads_web_scraping.R - LibraryThing: librarything_web_scraping.R\nData Sources: - Goodreads: One Hundred Years of Solitude Reviews - LibraryThing: One Hundred Years of Solitude Reviews\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2024/swd_2024_12.html",
    "href": "data_visualizations/SWD Challenge/2024/swd_2024_12.html",
    "title": "Progress in Reducing Working Poverty Rates in Africa (2000-2019)",
    "section": "",
    "text": "Figure 1: Line chart showing progress in reducing working poverty rates in Africa’s lower-middle-income countries from 2000 to 2019. The chart compares trends among women and men and the overall total across three age groups: Age 15 and older, youth age 15-24, and adults age 25 and older. Poverty rates declined for both men and women, with notable differences between adults and youth.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  pacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  paletteer,         # Comprehensive Collection of Color Palettes\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  camcorder          # Record Your Plot History\n)  \n})\n\nsuppressMessages(source(here::here(\"_setup.R\")))\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  08,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n\n2. Read in the Data\n\nShow code## Data:      International Labour Organization \n##            Africa: Lower-middle income - Annual\n## Link:      https://rshiny.ilo.org/dataexplorer5/?lang=en&id=X08_A\n\n## Citation:\n#' International Labour Organization. Africa: Lower-middle income - Annual\n#' [ILOSTAT explorer. Africa: Lower-middle income - Annual (1990 - 2024)]. \n#' Accessed [2024-12-02].\n\npoverty_rate_data_raw &lt;- read_csv(\n here::here(\"data/ILO_X08_A-full-2024-12-02.csv\")) |&gt;\n filter(\n    indicator.label == \"SDG indicator 1.1.1 - Working poverty rate (percentage of employed living below US$2.15 PPP) (%)\"\n  ) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(poverty_rate_data_raw)\nskim(poverty_rate_data_raw)\n\n\n4. Tidy Data\n\nShow code### |- tidy data ----\n\npoverty_rate_clean &lt;- poverty_rate_data_raw |&gt; \n  select(-obs_status_label, -note_classif_label, -note_indicator_label, -note_source_label, -classif2_label) |&gt; \n  rename(\n    year = time,\n    pct = obs_value\n  ) |&gt; \n  mutate(\n    sex_label = str_remove(sex_label, pattern = \"Sex: \"),\n    pct = pct / 100,\n    age_bin = case_when(\n      classif1_label == \"Age (Youth, adults): 15+\" ~ \"Ages 15 and Older\",\n      classif1_label == \"Age (Youth, adults): 15-24\" ~ \"Youth: Ages 15-24\",\n      classif1_label == \"Age (Youth, adults): 25+\" ~ \"Adults: Ages 25 and Older\",\n      TRUE ~ classif1_label\n    ),\n    age_bin = factor(age_bin, levels = c(\"Ages 15 and Older\", \"Youth: Ages 15-24\", \"Adults: Ages 25 and Older\"))\n  ) |&gt; \n  filter(year &lt;= 2019) |&gt; \n  pivot_wider(names_from = sex_label, values_from = pct)\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"nbapalettes::mavericks_retro\")\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#SWDchallenge: Dec 2024 &bull; Source: Source: Source: ILOSTAT&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\nwomen  &lt;- str_glue(\"&lt;span style='font-size:16pt; color:{ col_palette[1] }'&gt;**Women**&lt;/span&gt;\")\nmen    &lt;- str_glue(\"&lt;span style='font-size:16pt; color:{ col_palette[2] }'&gt;**Men**&lt;/span&gt;\")\ntotal  &lt;- str_glue(\"&lt;span style='font-size:16pt; color:{ col_palette[3] }'&gt;**Total**&lt;/span&gt;\")\n\ntitle_text   &lt;- str_glue(\"Progress in Reducing Working Poverty Rates in Africa (2000-2019)\") \n\nsubtitle_text &lt;- str_glue(\"Poverty rates for both {women} and {men} have steadily declined across all age groups in Africa\\\\'s&lt;br&gt;\n                           lower-middle-income countries. Adults and youth have shown different paces of reduction in poverty,&lt;br&gt;\n                           with all populations living below $2.15/day PPP. The dashed line represents the { total } (combined average)&lt;br&gt;&lt;br&gt;\n                          &lt;span style='font-size:15.4pt;'&gt;&lt;strong&gt;Percentage of Workers in Poverty&lt;/strong&gt;&lt;/span&gt;\")\n\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nsetup_fonts()\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = \"plot\",\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n  axis.line.x           = element_line(color = \"#252525\", linewidth = .3),\n  axis.ticks.x          = element_line(color = text_col),  \n  axis.title            = element_text(face = \"bold\"),\n  panel.grid.minor      = element_blank(),\n  panel.grid.major      = element_blank(),\n  panel.grid.major.y    = element_line(color = \"grey85\", linewidth = .4),\n  strip.background      = element_rect(fill = \"#f0f0f0\", color = NA),\n  strip.text            = element_textbox(size = rel(1),  \n                                          face = 'bold',\n                                          color = text_col,\n                                          hjust = 0.5,\n                                          halign = 0.5,\n                                          r = unit(5, \"pt\"),\n                                          width = unit(5.5, \"npc\"),\n                                          padding = margin(3, 0, 3, 0),\n                                          margin = margin(3, 3, 3, 3),\n                                          fill = \"transparent\"\n  ),\n  panel.spacing         = unit(1.5, 'lines'),\n)   \n\n\n6. Plot\n\nShow code### |-  plot ----\np &lt;- poverty_rate_clean |&gt;\n  ggplot(aes(x = year)) +\n  # Fill the gap between Male and Female\n  geom_ribbon(aes(ymin = Male, ymax = Female), fill = \"gray75\", alpha = 0.3) +\n  # Geoms for Male and Female\n  geom_line(aes(y = Female, color = \"Female\"), linewidth = 1) +\n  geom_line(aes(y = Male, color = \"Male\"), linewidth = 1) +\n  # Geom for Total (dashed line)\n  geom_line(aes(y = Total, linetype = \"Total\"), color = col_palette[3], linewidth = 0.55, alpha = 0.6) +\n  \n  # Scales\n  scale_x_continuous(\n    breaks = seq(2000, 2020, by = 10),\n    limits = c(2000, 2020)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, .5, by = .1),\n    limits = c(.1, .50),\n    label = percent_format()\n  ) +\n  coord_cartesian(clip = \"off\") +\n  scale_color_manual(values = col_palette) +\n  scale_linetype_manual(values = c(\"dashed\")) +\n  \n  # Labs\n  labs(\n    x = \"Year\",\n    y = NULL,\n    color = \"Gender\",\n    linetype = \"Total\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n  ) +\n  \n  # Facet\n  facet_wrap(~ age_bin, nrow = 1) +\n  \n  # Theme\n  theme(\n    plot.title = element_markdown(\n      size = rel(1.7),\n      family = \"title\",\n      face = \"bold\",\n      color = title_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.95),\n      family = \"subtitle\",\n      color = caption_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = \"caption\",\n      color = caption_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 15, b = 5)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot(p, type = 'swd', year = 2024, month = 12, width = 10, height = 08)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggplotify_0.1.2   gghighlight_0.4.1 paletteer_1.6.0   patchwork_1.3.0  \n [5] here_1.0.1        glue_1.8.0        scales_1.3.0      skimr_2.1.5      \n [9] janitor_2.2.0     showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9   \n[13] ggtext_0.1.2      lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n[17] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n[21] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      pacman_0.5.1      \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] camcorder_0.1.0    repr_1.1.7         withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   splines_4.4.0      parallel_4.4.0     base64enc_0.1-3   \n[37] vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0       jsonlite_1.8.9    \n[41] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[45] magick_2.8.5       gifski_1.32.0-1    rematch2_2.1.2     codetools_0.2-20  \n[49] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[53] htmltools_0.5.8.1  R6_2.5.1           rprojroot_2.0.4    vroom_1.6.5       \n[57] evaluate_1.0.1     lattice_0.22-6     markdown_1.13      gridtext_0.1.5    \n[61] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[65] nlme_3.1-164       mgcv_1.9-1         xfun_0.49          fs_1.6.5          \n[69] pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2024_12.qmd.\nFor the full repository, click here.\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2024/swd_2024_10.html",
    "href": "data_visualizations/SWD Challenge/2024/swd_2024_10.html",
    "title": "Astronaut Mission Trends and Career Paths: A Journey from Nationality to Occupation",
    "section": "",
    "text": "Figure 1: Dual visualization showing astronaut mission trends and career paths. The left panel is a line chart displaying the number of missions over time, segmented by nationality (Others, U.S.S.R./Russia, U.S.). Notable events like ‘The Apollo 11 Moon Landing’ and ‘The First Space Shuttle Launch’ are annotated. The right panel is an alluvial plot depicting the flow of astronauts from nationality to mission type, gender, and occupation, highlighting key career paths.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nCode```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,   # Easily Install and Load the 'Tidyverse'\n  ggtext,      # Improved Text Rendering Support for 'ggplot2'\n  showtext,    # Using Fonts More Easily in R Graphs\n  janitor,     # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,       # Compact and Flexible Summaries of Data\n  scales,      # Scale Functions for Visualization\n  lubridate,   # Make Dealing with Dates a Little Easier\n  glue,        # Interpreted String Literals\n  ggalluvial,  # Alluvial Plots in 'ggplot2'\n  patchwork,   # The Composer of Plots\n  gghighlight  # Highlight Lines and Points in 'ggplot2'\n)\n\n### |- figure size ---- \ncamcorder::gg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 12,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n\n### |- resolution ---- \nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nCode```{r}\n#| label: read\n\nastronaut_db &lt;- read_csv(\n  here::here(\"data/astronauts.csv\")\n  ) |&gt;\n  clean_names() |&gt;\n  glimpse()\n```\n\n\n3. Examine the Data\n\nCode```{r}\n#| label: examine\n\nglimpse(astronaut_db)\nskim(astronaut_db)\ncolnames(astronaut_db)\n```\n\n\n4. Tidy Data\n\nCode```{r}\n#| label: tidy\n\nastronaut_db_clean &lt;- astronaut_db |&gt;\n  mutate(\n    nationality_grouped = case_when(\n      nationality == \"U.S.\" ~ \"US\",\n      nationality == \"U.S.S.R/Russia\" ~ \"U.S.S.R/Russia\",\n      TRUE ~ \"Others\"\n    ),\n    mission_type = str_to_title(military_civilian),\n    gender = str_to_title(sex), \n    occupation = str_to_title(occupation),\n    occupation = case_when(\n      occupation == \"Flight Engineer\" ~ \"Flight Eng.\",\n      occupation == \"Psp\" ~ \"PSP\",\n      occupation == \"Msp\" ~ \"MSP\",\n      occupation == \"Spaceflight Participant\" ~ \"Spacefl. Part.\",\n      occupation == \"Other (Journalist)\" ~ \"Journalist\",\n      occupation %in% c(\"Other (Space Tourist)\", \"Space Tourist\") ~ \"Space Tourist (Other)\",\n      TRUE ~ as.character(occupation)\n    )\n  ) |&gt;\n  select(year_of_mission, nationality_grouped, mission_type, gender, occupation) |&gt;\n  filter(!is.na(year_of_mission))\n```\n\n\n5. Visualization Parameters\n\nCode```{r}\n#| label: params\n\n### |- plot aesthetics ---- \nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"nbapalettes::cavaliers\")[c(1,2,3)] \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#SWDchallenge: OCT 2024 &bull; Source: Astronaut database (tidytuesday 2020 wk 29)&lt;br&gt;\")  \nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")  \ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text   &lt;- str_glue(\"Astronaut Mission Trends and Career Paths: A Journey from Nationality to Occupation\") \n\nsubtitle_text &lt;- str_glue(\"An exploration of astronaut missions over time, highlighting key periods of activity \n                          across different nationalities, and the flow of &lt;br&gt;\n                          astronauts through various career stages from nationality, mission type, gender, to occupation.\")\n\ncaption_text &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add('fa6-brands', 'fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf')  \nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")                 \nfont_add_google(\"Quattrocento Sans\", regular.wt = 400, family = \"subtitle\")  \nfont_add_google(\"Quattrocento Sans\", regular.wt = 400, family = \"text\")        \nfont_add_google(\"Noto Sans\", regular.wt = 400,family = \"caption\")\nshowtext_auto(enable = TRUE)  \n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = 'plot',\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n  axis.line.x           = element_line(color = \"gray40\", linewidth = .15),\n  panel.grid.minor.y    = element_blank(),\n  panel.grid.major.y    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray10'),\n  panel.grid.minor.x    = element_blank(),\n  panel.grid.major.x    = element_blank(),\n)\n```\n\n\n6. Plot\n\nCode```{r}\n#| label: plot\n\n### |-  Plot 1 ----  \n\n#  Line Chart \nmission_summary &lt;- astronaut_db_clean |&gt;\n  group_by(year_of_mission, nationality_grouped) |&gt;\n  summarise(num_missions = n(), .groups = \"drop\")\n\n# Annotations df \nannotations &lt;- tibble(\n  year = c(1969, 1981),  \n  label = c(\n    \"Apollo 11 Moon Landing\", \n    \"First Space Shuttle Launch\"\n  ),\n  nationality_grouped = c(\"US\", \"US\"),  \n  y_positions = c(43, 32)  \n)\n\np1 &lt;- mission_summary |&gt;\n  ggplot(aes(x = year_of_mission, y = num_missions, \n             color = nationality_grouped, group = nationality_grouped)) +\n  \n  # Geoms\n  geom_line(linewidth = 1) + \n  geom_point(size = 1.5) + \n  gghighlight::gghighlight(\n    use_direct_label = FALSE,\n    unhighlighted_params = list(linewidth = 0.5, size = 0.8)\n  ) +\n  \n  # Annotations\n  geom_vline(data = annotations, aes(xintercept = year), \n             linetype = \"dashed\", color = \"darkred\", linewidth = 0.2) +\n  geom_text(data = annotations, aes(x = year, y = y_positions, label = label),\n            size = 2.5, color = \"grey30\", hjust = 0, nudge_x = 0.8) +  \n  \n  # Scales\n  scale_x_continuous() +\n  scale_y_continuous(limits = c(0, max(mission_summary$num_missions) + 5)) +  \n  scale_color_manual(values = col_palette) + \n  coord_cartesian(clip = 'off') +\n  \n  # Labs\n  labs(\n    title = \"Number of Missions Over Time\",\n    x = \"Year of Mission\",\n    y = \"Number of Missions\",\n    color = \"Nationality\"\n  ) +\n  \n  # Facet\n  facet_wrap(~ nationality_grouped, ncol = 1) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1),\n      hjust = 0.5,\n      family = \"title\",\n      color = title_col,\n      face = \"bold\",\n      lineheight = 0.85,\n      margin = margin(t = 5, b = 5)\n    )\n  )\n\n### |-  Plot 2 ----  \n\n#  Alluvial Plot \np2 &lt;- astronaut_db_clean |&gt;\n  count(nationality_grouped, mission_type, gender, occupation) |&gt;\n  ggplot(aes(\n    axis1 = nationality_grouped, axis2 = mission_type, axis3 = gender, axis4 = occupation,\n    y = n)\n  ) +\n  \n  # Geoms\n  geom_alluvium(aes(fill = nationality_grouped), alpha = 0.6) +  \n  geom_stratum(width = 1/4, fill = bkg_col, linewidth = 0.4, colour = 'gray30') +  \n  \n  ggrepel::geom_text_repel(\n    aes(label = after_stat(stratum), family = \"text\"),\n    stat = \"stratum\", size = 3, direction = \"y\", nudge_x = -0.3, nudge_y = 1,\n    color = \"gray10\", segment.color = \"grey50\"\n  ) +\n  \n  # Scales\n  scale_x_discrete(limits = c(\"Nationality\", \"Mission Type\", \"Gender\", \"Occupation\"), \n                   expand = c(0.15, 0.05)) +\n  scale_fill_manual(values = col_palette) +  \n  \n  # Labs\n  labs(\n    title = \"Flow of Astronauts from Nationality to Occupation\",\n    x = \"\",\n    y = \"Count\"\n  ) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1),\n      hjust = 0.5,\n      family = \"title\",\n      color = title_col,\n      face = \"bold\",\n      lineheight = 0.85,\n      margin = margin(t = 5, b = 5)\n    )\n  )\n\n### |-  Combine the plots using patchwork ----\n\ncombined_plot &lt;- (p1 | p2) +\n  patchwork::plot_layout(\n    ncol = 2,\n    widths = c(0.75, 1.25), \n    guides = \"collect\"\n  ) +\n  \n  # Labs\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    \n    # Theme \n    theme = theme(\n      plot.title = element_markdown(\n        size = rel(1.4),\n        family = \"title\",\n        face = \"bold\",\n        color = title_col,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_markdown(\n        size = rel(1),\n        family = \"subtitle\",\n        color = subtitle_col,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.caption = element_markdown(\n        size = rel(0.65),\n        family = \"caption\",\n        color = caption_col,\n        lineheight = 1.1,\n        hjust = 0.5,\n        halign = 1,\n        margin = margin(t = 5, b = 5)\n      )\n    )\n  )\n\n\n# Show the combined plot\ncombined_plot\n```\n\n\n7. Save\n\nCode```{r}\n#| label: save\n\n### |-  plot image ----  \n\nlibrary(ggplotify)\n# Convert patchwork plot to grob \n# There was some issues between patchwork and ggsave\nplot_grob &lt;- as.grob(combined_plot)\n\n# Save the plot again\nggsave(\n  filename = here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_10.png\"),\n  plot   = plot_grob,\n  width  =  12,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n \n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_10.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/SWD Challenge/2024/thumbnails/swd_2024_10.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2024/swd_2024_09.html",
    "href": "data_visualizations/SWD Challenge/2024/swd_2024_09.html",
    "title": "Hydrogen Projects by Country and Status",
    "section": "",
    "text": "Figure 1: This stacked bar chart showcases the number of hydrogen projects in the top 10 countries, emphasizing operational projects. The countries included are Germany, the United States, Australia, Spain, France, the United Kingdom, the Netherlands, China, India, and Denmark. The bars are divided by project status, with operational projects highlighted in orange. The United Kingdom is also singled out with the annotation “Total H2 Projects per Country,” indicating its total of 110 projects. The data is from The Hydrogen Production Projects Database, and the visualization aims to underscore the distribution and status of hydrogen projects in these leading countries.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nCode```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,   # Easily Install and Load the 'Tidyverse'\n  ggtext,      # Improved Text Rendering Support for 'ggplot2'\n  showtext,    # Using Fonts More Easily in R Graphs\n  janitor,     # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,       # Compact and Flexible Summaries of Data\n  scales,      # Scale Functions for Visualization\n  lubridate,   # Make Dealing with Dates a Little Easier\n  glue,        # Interpreted String Literals\n  readxl,      # Read Excel Files\n  countrycode, # Convert Country Names and Country Codes\n  marquee,     # Markdown Parser and Renderer for R Graphics\n  ggforce      # Accelerating 'ggplot2'    \n)\n\n### |- figure size ---- \ncamcorder::gg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 8,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n\n### |- resolution ---- \nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nCode```{r}\n#| label: read\n\nworldwide_hydrogen_projects &lt;- read_xlsx(\n  here::here(\"data/Hydrogen_production_projects_corrected.xlsx\"),\n  sheet = \"Projects\", skip = 3, trim_ws = TRUE\n  ) |&gt;\n  clean_names() |&gt;\n  glimpse()\n```\n\n\n3. Examine the Data\n\nCode```{r}\n#| label: examine\n\nglimpse(worldwide_hydrogen_projects)\nskim(worldwide_hydrogen_projects)\ncolnames(worldwide_hydrogen_projects)\n```\n\n\n4. Tidy Data\n\nCode```{r}\n#| label: tidy\n\nplot_data &lt;- worldwide_hydrogen_projects |&gt;\n  filter(!is.na(country), !is.na(status)) |&gt;\n  count(country, status) |&gt;\n  # Lump less common countries into \"Other\"\n  mutate(country = fct_lump(country, n = 10, w = n)) |&gt;\n  group_by(country) |&gt;\n  mutate(total_projects = sum(n)) |&gt;\n  ungroup() |&gt;\n  filter(country != \"Other\") |&gt;\n  # Convert ISO3 country codes to country names\n  mutate(country = countrycode(country, origin = 'iso3c', destination = 'country.name')) |&gt;\n  arrange(desc(total_projects))\n```\n\n\n5. Visualization Parameters\n\nCode```{r}\n#| label: params\n\n### |- plot aesthetics ---- \nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"#3d3d3d\"           \nsubtitle_col &lt;- \"#3d3d3d\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- colorspace::darken(\"#8e8a7b\" , 0.2)    \n\n# Define colors to highlight Operational projects\nhighlight_colors &lt;- c(\n  \"Operational\"       = \"#E69F00\",  # Highlight color\n  \"Concept\"           = \"grey80\",\n  \"DEMO\"              = \"grey70\",\n  \"FID/Construction\"  = \"grey60\",\n  \"Other\"             = \"grey50\",\n  \"Decomissioned\"     = \"grey40\",\n  \"Feasibility study\" = \"grey30\"\n)\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#SWDchallenge: SEP 2024 &bull; Source: The Hydrogen Production Projects Database&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")  \ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Hydrogen Projects by Country and Status\") \nsubtitle_text &lt;- \"Focusing on the top 10 countries and highlighting {#E69F00 _**operational**_} projects\"\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add('fa6-brands', here::here('fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf'))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")                 \nfont_add_google(\"Quattrocento Sans\", regular.wt = 400, family = \"subtitle\")  \nfont_add_google(\"Quattrocento Sans\", regular.wt = 400, family = \"text\")        \nfont_add_google(\"Noto Sans\", regular.wt = 400,family = \"caption\")\nshowtext_auto(enable = TRUE)  \n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  \n  legend.position       = \"top\",\n  legend.title          = element_text(size = rel(.85), hjust = 0.5),\n  legend.text           = element_text(size = rel(0.8)),\n  \n  plot.margin           = margin(t = 10, r = 15, b = 0, l = 15),       \n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  \n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1), \n                                       color = text_col, family = 'text', face = 'bold'),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1), \n                                       color = text_col, family = 'text', face = 'bold'),\n  axis.text             = element_text(size = rel(0.75), color = text_col, family = 'text'),\n  axis.line.x           = element_line(color = \"#7F7F7F\", linewidth = 0.2),\n  \n  panel.grid.minor.y    = element_blank(),\n  panel.grid.major.y    = element_blank(),\n  \n  panel.grid.minor.x    = element_blank(),\n  panel.grid.major.x    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray40'),\n)\n```\n\n\n6. Plot\n\nCode```{r}\n#| label: plot\n\n### |-  initial plot ----  \np &lt;- plot_data |&gt;\n  ggplot(aes(x = reorder(country, -total_projects), y = n, fill = status)) +\n  \n  # Geoms\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  # Add total project labels at the end of each bar\n  geom_text(aes(label = total_projects), \n            y = plot_data$total_projects + 5,  \n            hjust = 0, color = text_col, size = 3.5) +\n  \n  # Add labels specifically for Operational projects\n  geom_text(aes(label = ifelse(status == \"Operational\", n, \"\")), \n            position = position_stack(vjust = 0.5), color = \"white\", size = 3.5) +\n  \n  # Add country label above Denmark\n  geom_text(aes(label = \"Country\", x = \"Denmark\", y = 0),\n            size = 5.5, color = text_col, family = \"text\", fontface = \"bold\", \n            hjust = 1.4, vjust = -1.5) +\n  \n  # Scales\n  scale_x_discrete() +\n  scale_y_continuous(limits = c(0, 205)) +\n  scale_fill_manual(\n    values = highlight_colors, \n    guide = guide_legend(nrow = 2)\n    ) +\n  coord_flip(clip = 'off') +\n\n  # Labs\n  labs(\n    x = \"\",\n    y = \"Number of Projects\",\n    fill = \"Project Status\",\n    title    = title_text,\n    subtitle = subtitle_text,\n    caption  = caption_text,\n  ) +\n  \n  # Theme\n  theme(\n    \n    plot.title    = element_text(\n      size        = rel(1.8),\n      family      = \"title\",\n      face        = \"bold\",\n      color       = title_col,\n      lineheight  = 1.1,\n      margin      = margin(t = 5, b = 5)\n    ),        \n    plot.subtitle = element_marquee(\n      size        = rel(1.1),\n      family      = 'subtitle',\n      color       = subtitle_col,\n      lineheight  = 1.4, \n      margin      = margin(t = 5, b = 1)\n    ),\n    plot.caption  = element_markdown(\n      size        = rel(.55), \n      family      = 'caption',\n      color       = caption_col,\n      lineheight  = 0.6,\n      hjust       = 0,\n      halign      = 0,\n      margin      = margin(t = 10, b = 10)\n    )\n  )\n\n### |-  annotated plot ----  \n\n# label data\nlabel_data &lt;- tibble(\n  country = \"United Kingdom\",\n  total_projects = 119\n)\n\np &lt;- p + \n  ggforce::geom_mark_circle(\n    data = label_data,\n    aes(\n      x = country, \n      y = total_projects, \n      label = \"\", \n      description = \"Total H2 Projects per Country\",\n      ),\n    expand = 0.03, \n    label.buffer = unit(-1, \"lines\"),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fill = bkg_col,\n    label.fontsize = 8,\n    label.family = \"text\",\n    con.type = \"elbow\",\n    label.colour = 'gray20', \n    con.colour = 'gray60'\n  )\n```\n\n\n7. Save\n\nCode```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_09.png\"),\n  plot = p,\n  width  =  8,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n \n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_09.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/SWD Challenge/2024/thumbnails/swd_2024_09.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_20.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_20.html",
    "title": "Religious Representation Gap: Migrants vs. General Population",
    "section": "",
    "text": "Original\nThe original visualization Globally, Christians are the lartgest migran group comes from The Religious Composition of the World’s Migrants:\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: A diverging bar chart showing religious representation gaps between migrants and general population. Christians (+16.6), Muslims (+3.7), and Jewish (+0.9) are overrepresented among migrants (purple bars extending right), while Hindus (-10.2) and religiously unaffiliated (-10) are underrepresented (pink bars extending left). Buddhist representation is nearly equal (-0.1). Horizontal arrows indicate the direction of over- and underrepresentation.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    paletteer       # Comprehensive Collection of Color Palettes\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\n## Original Chart\n# The Religious Composition of the World’s Migrants\n# https://data.world/makeovermonday/2025w20-the-religious-composition-of-the-worlds-migrants\n\n## Article\n# Pew Research Center \"The Religious Composition of the World’s Migrants\"\n# https://www.pewresearch.org/religion/2024/08/19/the-religious-composition-of-the-worlds-migrants/\n\nmigrants_raw  &lt;- readxl::read_excel(\n  here::here('data/MakeoverMonday/2025/Incoming and Outgoing Migrant Counts.xlsx'),\n                                   sheet = 1) |&gt; \n  janitor::clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(migrants_raw)\nskimr::skim(migrants_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\n# Extract the global data for 2020 (most recent)\nmigrants_global &lt;- migrants_raw |&gt;\n  filter(direction == \"Incoming\", year == \"2020\", country == \"Global Total\") |&gt;\n  select(religion, migrant_percent = percent)\n\n# Derive general population data from on the chart\ngeneral_pop &lt;- tibble(\n  religion = c(\"Christian\", \"Muslim\", \"Jewish\", \"Buddhist\", \"Unaffiliated\", \"Hindu\", \"Other religions\"),\n  general_percent = c(30, 25, 0.2, 4, 23, 15, 2.8)\n)\n\n# Join the datasets\ncomparison_data &lt;- migrants_global |&gt;\n  filter(religion != \"All\") |&gt;\n  mutate(religion = case_when(\n    religion == \"Jew\" ~ \"Jewish\",\n    religion == \"Religiously unaffiliated\" ~ \"Unaffiliated\",\n    TRUE ~ religion\n  )) |&gt;\n  left_join(general_pop, by = \"religion\") |&gt;\n  filter(!is.na(general_percent)) |&gt;\n  mutate(\n    difference = migrant_percent - general_percent,\n    migrant_percent_display = round(migrant_percent, 1),\n    general_percent_display = round(general_percent, 1)\n  ) |&gt;\n  mutate(\n    religion = fct_reorder(religion, difference),\n    abs_diff = abs(difference),\n    direction = ifelse(difference &gt;= 0, \"overrepresented\", \"underrepresented\"),\n    percent_label = paste0(general_percent_display, \"% → \", migrant_percent_display, \"%\")\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"overrepresented\" =  \"#6761A8\",\n  \"underrepresented\" = \"#CC3363\"\n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Religious Representation Gap: Migrants vs. General Population\")\nsubtitle_text &lt;- str_wrap(\"Christians are significantly overrepresented among global migrants,\\nwhile Hindus and the religiously unaffiliated are underrepresented\",\n                          width = 100)\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 20,\n    source_text = \"Pew Research Center\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Legend formatting\n    legend.position = \"plot\",\n    legend.title = element_text(face = \"bold\"),\n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(0.85)),\n    axis.title.y = element_text(face = \"bold\", size = rel(0.85)),\n    axis.text.y = element_text(face = \"bold\", size = rel(0.85)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Margin\n    plot.margin = margin(20, 20, 20, 20)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |-  Initial Plot  ----\np &lt;- comparison_data |&gt;\n  ggplot(aes(x = religion, y = difference, fill = direction)) +\n  # Geoms\n  geom_col(width = 0.7) +\n  geom_hline(yintercept = 0, color = \"gray40\", size = 0.5) +\n  geom_text( # primary labels: difference in percentage points\n    aes(\n      label = paste0(ifelse(difference &gt;= 0, \"+\", \"\"), round(difference, 1), \" pts\"),\n      y = ifelse(difference &gt;= 0,\n        difference + 0.8,\n        difference - 0.8\n      )\n    ),\n    hjust = ifelse(comparison_data$difference &gt;= 0, 0, 1),\n    size = 4,\n    fontface = \"bold\"\n  ) +\n  geom_text( # secondary labels: comparison of percentages\n    aes(\n      label = percent_label,\n      y = ifelse(difference &gt;= 0,\n        difference + 5.5,\n        difference - 5.5\n      )\n    ),\n    hjust = ifelse(comparison_data$difference &gt;= 0, 0, 1),\n    size = 3.5,\n    color = \"gray30\"\n  ) +\n  # Scale\n  scale_fill_manual(\n    values = colors$palette\n  ) +\n  scale_y_continuous(\n    breaks = seq(-25, 30, 10),\n    limits = c(-25, 30),\n    expand = c(0, 0)\n  ) +\n  coord_flip(clip = \"off\") +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Percentage Point Difference\",\n    fill = NULL\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 30)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n### |-  Annotated Plot  ----\np &lt;- p +\n  annotate(\n    \"label\",\n    x = 5.2,\n    y = -24.5,\n    label = paste(\n      \"Christians make up 30% of the general population but\",\n      \"46.6% of migrants, a difference of +16.6 percentage points.\",\n      \"This pattern may reflect historical migration flows and\",\n      \"religious persecution.\",\n      sep = \"\\n\"\n    ),\n    hjust = 0,\n    vjust = 0,\n    fill = NA,\n    color = \"gray20\",\n    size = 3.5,\n    fontface = \"italic\",\n    alpha = 0.9,\n    label.size = NA\n  ) +\n  annotate(\"segment\",\n    x = 3.5, xend = 3.5,\n    y = 5, yend = 8,\n    arrow = arrow(length = unit(0.3, \"cm\"), type = \"closed\"),\n    color = colors$palette[\"overrepresented\"],\n    size = 1\n  ) +\n  annotate(\"text\",\n    x = 3.5, y = 15,\n    label = \"Overrepresented\",\n    color = colors$palette[\"overrepresented\"],\n    fontface = \"bold\",\n    size = 4,\n    hjust = 0.5\n  ) +\n  annotate(\"segment\",\n    x = 3.5, xend = 3.5,\n    y = -5, yend = -8,\n    arrow = arrow(length = unit(0.3, \"cm\"), type = \"closed\"),\n    color = colors$palette[\"underrepresented\"],\n    size = 1\n  ) +\n  annotate(\"text\",\n    x = 3.5, y = -15,\n    label = \"Underrepresented\",\n    color = colors$palette[\"underrepresented\"],\n    fontface = \"bold\",\n    size = 4,\n    hjust = 0.5\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 20,\n  width = 10, \n  height = 8\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] paletteer_1.6.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3   skimr_2.1.5      \n[13] readxl_1.4.3      lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     janitor_2.2.0     repr_1.1.7       \n[21] codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10      \n[25] pillar_1.9.0      camcorder_0.1.0   magick_2.8.5      commonmark_1.9.2 \n[29] tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4     rematch2_2.1.2   \n[33] rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0       \n[37] colorspace_2.1-1  cli_3.6.4         magrittr_2.0.3    base64enc_0.1-3  \n[41] utf8_1.2.4        withr_3.0.2       timechange_0.3.0  rmarkdown_2.29   \n[45] cellranger_1.1.0  ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[49] knitr_1.49        markdown_1.13     rlang_1.1.6       gridtext_0.1.5   \n[53] Rcpp_1.0.13-1     xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[57] rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_20.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 20: The Religious Composition of the World’s Migrants\n\n\n\nArticle\n\n\nPew Research Center: The Religious Composition of the World’s Migrants\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_18.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_18.html",
    "title": "Trump Approval Ratings Across Selected Demographic Groups",
    "section": "",
    "text": "Original\nThe original visualization Trump Approval Ratings comes from Pew Research Center “Evaluations of Trump: Job approval and confidence on issues”\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: Bar chart titled ‘Trump Approval Ratings Across Selected Demographic Groups’ showing approval and disapproval percentages across different demographics. Black Americans show highest disapproval (82%) with lowest approval (14%), while Republicans show highest approval (75%) with lowest disapproval (24%). Other groups including Hispanic, Postgrad, Ages 18-29, Women, Total population, Men, and White Americans all show higher disapproval than approval, with White Americans being closest to parity (49% approval, 51% disapproval). Data from Pew Research survey, April 7-13, 2025.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    camcorder       # Record Your Plot History \n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code## Original Chart\n# Trump Approval Ratings\n# https://data.world/makeovermonday/2025w18-trump-approval-ratings\n\n##  Article\n# Pew Research Center \"Evaluations of Trump: Job approval and confidence on issues\"\n# https://www.pewresearch.org/politics/2025/04/23/evaluations-of-trump-job-approval-and-confidence-on-issues/\n\napproval_ratings_raw &lt;- read_csv(\n  here::here('data/MakeoverMonday/2025/Trump Approval Ratings - Response.csv')) |&gt; \n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(approval_ratings_raw)\nskim(approval_ratings_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\n\nlollipop_data &lt;- approval_ratings_raw |&gt;\n  # Select key demographics but categorize them\n  filter(demographic %in% c(\n    \"Total\", \"Men\", \"Women\", \"White\", \"Black\", \"Hispanic\", \n    \"Ages 18-29\", \"Postgrad\", \"Rep/Lean Rep\", \"Dem/Lean Dem\"\n  )) |&gt;\n  # Add proper categorization\n  mutate(                       \n    category = case_when(\n      demographic %in% c(\"Men\", \"Women\") ~ \"Gender\",\n      demographic %in% c(\"White\", \"Black\", \"Hispanic\") ~ \"Race/Ethnicity\",\n      demographic == \"Ages 18-29\" ~ \"Age\",\n      demographic == \"Postgrad\" ~ \"Education\",\n      demographic %in% c(\"Rep/Lean Rep\", \"Dem/Lean Dem\") ~ \"Political Affiliation\",\n      TRUE ~ \"Overall\"\n    ),\n    # Order demographics by approval gap (disapproval - approval)\n    approval_gap = net_disapprove - net_approve,\n    demographic = reorder(demographic, approval_gap)\n  ) |&gt;\n  select(demographic, category, net_approve, net_disapprove, approval_gap)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"#53917E\", \"#6D1A36\"\n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_wrap(\"Trump Approval Ratings Across Selected Demographic Groups\", width = 80)\nsubtitle_text &lt;- str_wrap(\"Net approval and disapproval percentages from Pew Research survey, April 7-13, 2025\\nNote: Selected representative groups shown from original dataset of 23 demographic categories\",\n                          width = 85)\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 18,\n    source_text = \"Pew Research Center\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Legend formatting\n    legend.position = \"top\",\n    legend.title = element_text(face = \"bold\"),\n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(1.14)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(face = \"bold\", size = rel(1)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Margin\n    plot.margin = margin(20, 30, 20, 20)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n\np &lt;- ggplot(lollipop_data) +\n  # Geoms\n  geom_vline(xintercept = 50, color = \"gray90\", linetype = \"dashed\") +\n  geom_segment(\n    aes(\n      x = demographic, xend = demographic,\n      y = net_approve, yend = net_disapprove\n    ),\n    color = \"gray50\",\n    linewidth = 0.6\n  ) +\n  geom_point(aes(x = demographic, y = net_approve),\n    size = 4,\n    shape = 16,\n    color = colors$palette[1]\n  ) +\n  geom_point(aes(x = demographic, y = net_disapprove),\n    size = 4,\n    shape = 17,\n    color = colors$palette[2]\n  ) +\n  geom_text(\n    aes(\n      x = demographic, y = net_approve,\n      label = paste0(net_approve, \"%\")\n    ),\n    nudge_y = -5, nudge_x = 0.1, size = 3.2,\n    color = colors$palette[1]\n  ) +\n  geom_text(\n    aes(\n      x = demographic, y = net_disapprove,\n      label = paste0(net_disapprove, \"%\")\n    ),\n    nudge_y = 5, nudge_x = 0.1, size = 3.2,\n    color = colors$palette[2]\n  ) +\n  geom_text(\n    data = distinct(lollipop_data, demographic, category),\n    aes(x = demographic, y = -10, label = category),\n    hjust = 0, size = 3, color = \"gray30\", fontface = \"italic\"\n  ) +\n  # Annotate\n  annotate(\n    \"point\",\n    x = 1.5, y = 90,\n    shape = 16, size = 4, color = colors$palette[1]\n  ) +\n  annotate(\n    \"text\",\n    x = 1.5, y = 91,\n    label = \"  Approval\", hjust = 0, size = 3.5, color = colors$palette[1]\n  ) +\n  annotate(\n    \"point\",\n    x = 1, y = 90,\n    shape = 17, size = 4, color = colors$palette[2]\n  ) +\n  annotate(\n    \"text\",\n    x = 1, y = 91,\n    label = \"  Disapproval\", hjust = 0, size = 3.5, color = colors$palette[2]\n  ) +\n  # Scales\n  scale_y_continuous(\n    limits = c(-10, 100),\n    breaks = seq(0, 100, 25)\n  ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Percentage\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.5),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size   = rel(0.65),\n      family = fonts$caption,\n      color  = colors$caption,\n      hjust  = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 18,\n  width = 10, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[21] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3      pillar_1.9.0     \n[25] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[29] stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0    \n[33] grid_4.4.0        colorspace_2.1-1  cli_3.6.4         magrittr_2.0.3   \n[37] base64enc_0.1-3   utf8_1.2.4        withr_3.0.2       bit64_4.5.2      \n[41] timechange_0.3.0  rmarkdown_2.29    bit_4.5.0         ragg_1.3.3       \n[45] hms_1.1.3         evaluate_1.0.1    knitr_1.49        markdown_1.13    \n[49] rlang_1.1.6       gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6       \n[53] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 vroom_1.6.5      \n[57] jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_18.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 18: [Work Productivity]https://data.world/makeovermonday/2025w18-trump-approval-ratings)\n\n\nArticle\n\n\nPew Research Center: Evaluations of Trump: Job approval and confidence on issues\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_12.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_12.html",
    "title": "El Niño Impact on Regional Precipitation",
    "section": "",
    "text": "Original\nThe original visualization Precipitation Anomalies comes from Our World in Data\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: Side-by-side visualization showing El Niño’s impact on precipitation across five regions. The left side displays density plots showing distribution patterns; the right side shows mean values with confidence intervals. Data reveals contrasting precipitation patterns during El Niño vs normal years, with India showing the most dramatic differences.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n      tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    ggridges,       # Ridgeline Plots in 'ggplot2' # Ridgeline Plots in 'ggplot2'\n    patchwork,      # The Composer of Plots\n    camcorder       # Record Your Plot History \n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  12,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code#' The raw data for the week MakeoverMonday challenge can be downloaded \n#' https://data.world/makeovermonday/2025w12-precipitation-anomalies\n#' \n#' Article\n#' https://ourworldindata.org/grapher/global-precipitation-anomaly\n\nprecipitation_raw &lt;- read_csv(\n  here::here('data/global-precipitation-anomaly.csv')) |&gt; \n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(precipitation_raw)\nskim(precipitation_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\n# Define El Niño years based on moderate to strong events\nel_nino_years &lt;- c(1982, 1983, 1987, 1988, 1991, 1992, 1997, 1998, \n                   2002, 2003, 2009, 2010, 2015, 2016)\n\n# ENSO (El Niño Southern Oscillation) data\nenso_data &lt;- precipitation_raw |&gt;\n  filter(entity %in% c('World', 'Brazil', 'Australia', 'India', 'United States')) |&gt;\n  mutate(\n    el_nino = year %in% el_nino_years,\n    event_type = if_else(el_nino, 'El Niño Year', 'Normal Year')\n  )\n\n# Comparative statistics for El Niño vs Normal\ncomparative_stats &lt;- enso_data |&gt;\n  group_by(entity, event_type) |&gt;\n  summarize(\n    mean_anomaly = mean(annual_precipitation_anomaly, na.rm = TRUE),\n    median_anomaly = median(annual_precipitation_anomaly, na.rm = TRUE),\n    sd_anomaly = sd(annual_precipitation_anomaly, na.rm = TRUE),\n    n_obs = n(),\n    se_anomaly = sd_anomaly / sqrt(n_obs),\n    ci_lower = mean_anomaly - 1.96 * se_anomaly,\n    ci_upper = mean_anomaly + 1.96 * se_anomaly,\n    .groups = 'drop'\n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  'El Niño Year' = '#FF9800',\n  'Normal Year' = '#2196F3'\n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"El Niño Impact on Regional Precipitation\")\nsubtitle_text &lt;- str_glue(\"Distribution patterns (left) and mean values with confidence intervals (right)\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 12,\n    source_text = \"Our World in Data\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    legend.position = \"plot\",\n\n    axis.title = element_text(size = rel(1.14)),  \n    axis.text = element_text(size = rel(1)),  \n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(1, \"lines\"),  \n    panel.spacing.y = unit(0, \"lines\"),\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n# P1. Ridges Chart ----\np1 &lt;- ggplot(enso_data, aes(x = annual_precipitation_anomaly, y = entity, fill = event_type)) +\n  # Geoms\n  geom_density_ridges(\n    scale = 0.9, \n    alpha = 0.7, \n    quantile_lines = TRUE,\n    quantiles = c(0.5),  \n    jittered_points = FALSE\n  ) +\n  geom_rug(\n    aes(color = event_type), \n    alpha = 0.3, \n    size = 0.1,\n    sides = \"b\",\n    position = position_nudge(y = -0.2)  \n  ) +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n  # Scales\n  scale_x_continuous() +\n  scale_y_discrete() +\n  scale_fill_manual(values = colors$palette) +\n  scale_color_manual(values = colors$palette) +\n  coord_cartesian(clip = 'off') +\n  # Labs\n  labs(\n    x = 'Anomaly (mm)',\n    y = NULL,\n    fill = 'Year Type',\n  )\n\n# P2. Dot Plot ---- \np2 &lt;-ggplot(comparative_stats, aes(x = mean_anomaly, y = entity, color = event_type)) +\n  # Geoms\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\", size = 0.7) +\n  geom_errorbarh(\n    aes(xmin = ci_lower, xmax = ci_upper),\n    height = 0.3,\n    size = 0.8,\n    alpha = 0.7\n  ) +\n  geom_point(size = 3) +\n  # Scales\n  scale_x_continuous() +\n  scale_y_discrete() +\n  scale_color_manual(\n    values = colors$palette\n  ) +\n  coord_cartesian(clip = 'off') +\n  # Labs\n  labs(\n    x = \"Mean Precipitation Anomaly (mm)\",\n    y = NULL,\n    color = \"Event Type: \"\n  ) +\n  # Theme\n  theme(legend.position = \"top\")\n\n# Combined Plots ----\ncombined_plot &lt;- (p1 | plot_spacer() | p2) +\n  plot_layout(\n    widths = c(1, 0.05, 1),\n    nrow = 1) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size   = rel(2.6),\n        family = fonts$title,\n        face   = \"bold\",\n        color  = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size   = rel(1.1),\n        family = fonts$subtitle,\n        color  = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 15)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.75),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10)\n      )\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 12,\n  width = 12, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 patchwork_1.3.0 ggridges_0.5.6  here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      repr_1.1.7         codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[25] pillar_1.9.0       magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1  \n[29] digest_0.6.37      stringi_1.8.4      labeling_0.4.3     rsvg_2.6.1        \n[33] rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1  \n[37] cli_3.6.3          magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4        \n[41] withr_3.0.2        bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29    \n[45] bit_4.5.0          hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[49] markdown_1.13      gridGraphics_0.5-1 rlang_1.1.4        gridtext_0.1.5    \n[53] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         vroom_1.6.5       \n[57] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[61] fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_12.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 12: Precipitation anomalies\n\n\n\nArticle\n\n\nPrecipitation anomalies: Precipitation anomalies\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_10.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_10.html",
    "title": "The Thames in Motion: How Flow Shapes Water Quality and Pollution at FRBC",
    "section": "",
    "text": "Original\nThe original visualization River Water Quality comes from data.world.org\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: The Thames in Motion” visualization shows three charts analyzing water quality at Fulham Reach Boat Club. Top left: Negative correlation between water flow and rubbish collected. Top right: Turbidity peaks at moderate flow rates with blue-green algae common at low flows. Bottom: Seasonal nitrate and phosphate relationships across four seasons with theoretical thresholds. All charts demonstrate how river flow fundamentally impacts pollution accumulation, water clarity, and nutrient dynamics.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n     tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    ggpubr,         # 'ggplot2' Based Publication Ready Plots\n    patchwork,      # The Composer of Plots\n    camcorder       # Record Your Plot History \n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  12,\n    height =  12,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code#' The raw data for the week MakeoverMonday challenge can be downloaded \n#' here: https://data.world/makeovermonday/2025-week-10-river-water-quality/workspace/project-summary?agentid=makeovermonday&datasetid=2025-week-10-river-water-quality\n#' \n\nfrbc_fresh_water_raw &lt;- read_csv(\n  here::here('data/FRBC FreshWater Watch - Form responses 1.csv')) |&gt; \n  clean_names()\n\nfrbc_river_cleanups_raw  &lt;- read_csv(\n  here::here('data/FRBC River Clean ups - Form responses 1.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(frbc_fresh_water_raw)\nskim(frbc_fresh_water_raw)\n\nglimpse(frbc_river_cleanups_raw)\nskim(frbc_river_cleanups_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\n# Clean the water quality dataset\nclean_frbc_water &lt;- function(frbc_fresh_water_raw) {\n  frbc_clean &lt;- frbc_fresh_water_raw |&gt;\n    # Convert date to proper format\n    mutate(\n      sample_date = dmy(sample_date),\n      # Create date_time column\n      date_time = if_else(\n        !is.na(sample_date) & !is.na(sample_time),\n        paste(sample_date, sample_time),\n        NA_character_\n      ),\n      date_time = as.POSIXct(date_time, format = \"%Y-%m-%d %H:%M:%S\")\n    ) |&gt;\n    # Clean column names for easier reference\n    rename(\n      participants = total_number_of_participants,\n      organisation = organisation_representing_participants_e_g_school_company,\n      surface_condition = is_there_any_of_the_following_on_the_water_surface,\n      algae_type = what_best_describes_the_dominant_form_of_algae_present,\n      litter_presence = can_you_see_any_litter_including_litter_caught_in_vegetation,\n      plastic_pollution = which_of_the_following_sources_of_plastic_pollution_can_you_see_select_all_that_apply,\n      pollution_sources = are_there_any_water_pollution_sources_in_the_immediate_surroundings_select_all_that_apply,\n      aquatic_life = what_aquatic_life_is_there_evidence_of_select_all_that_apply,\n      recent_rain = has_there_been_any_rain_during_the_last_24_hrous,\n      air_temp_c = air_temperature_degrees_celsius_to_nearest_whole_number,\n      water_temp_c = water_temperature_degrees_celsius_to_nearest_whole_number,\n      flow_ms = water_flow_measurement_m_s,\n      nitrate_fww_mgl = fresh_water_watch_nitrate_test_mg_l,\n      phosphate_fww_mgl = fresh_water_watch_phosphate_mg_l,\n      turbidity_ntu = turbidity_secchi_tube_ntu,\n      water_color = estimate_the_water_colour,\n      nitrate_strip_mgl = test_strip_nitrate_mg_l_ppm,\n      nitrite_strip_mgl = test_strip_nitrite_mg_l_ppm,\n      chlorine_mgl = test_strip_chlorine_mg_l_ppm,\n      hardness_mgl = test_strip_total_hardness_mg_l_ppm,\n      carbonate_mgl = test_strip_carbonate_mg_l_ppm,\n      ph = test_strip_p_h,\n      phosphate_strip_mgl = test_strip_phosphate_mg_l_ppm_precision_laboratories,\n      ecoli_cfu = alert_one_e_coli_reading_cfu_per_100ml\n    ) |&gt;\n    # Extract year, month for easier analysis\n    mutate(\n      year = year(sample_date),\n      month = month(sample_date),\n      month_name = month(sample_date, label = TRUE),\n      season = case_when(\n        month %in% c(12, 1, 2) ~ \"Winter\",\n        month %in% c(3, 4, 5) ~ \"Spring\",\n        month %in% c(6, 7, 8) ~ \"Summer\",\n        month %in% c(9, 10, 11) ~ \"Autumn\",\n        TRUE ~ NA_character_\n      )\n    ) |&gt;\n    # Handle missing values appropriately\n    mutate(across(where(is.numeric), ~if_else(is.na(.), NA_real_, .))) |&gt;\n    # Create a binary rain indicator\n    mutate(rain_binary = ifelse(recent_rain == \"None\", 0, 1))\n  \n  return(frbc_clean)\n}\n\n# Clean the river cleanups dataset\nclean_frbc_cleanups &lt;- function(frbc_river_cleanups_raw) {     \n  frbc_cleanups_clean &lt;- frbc_river_cleanups_raw |&gt;\n    # Convert date to proper format\n    mutate(\n      sample_date = dmy(sample_date),\n      # Create date_time column\n      date_time = if_else(\n        !is.na(sample_date) & !is.na(sample_time),\n        paste(sample_date, sample_time),\n        NA_character_\n      ),\n      date_time = as.POSIXct(date_time, format = \"%Y-%m-%d %H:%M:%S\")\n    ) |&gt;\n    # Clean column names for easier reference\n    rename(\n      participants = total_number_of_participants,\n      organisation = organisation_representing_participants_e_g_school_company,\n      rubbish_sources = which_of_the_following_sources_of_rubbish_can_you_see_select_all_that_apply,\n      rubbish_types = rubbish_types_collected_during_the_clean_up_select_all_that_apply,\n      rubbish_weight_kg = estimated_weight_of_rubbish_collected_in_kilograms_kg\n    ) |&gt;\n    # Extract year, month for easier analysis\n    mutate(\n      year = year(sample_date),\n      month = month(sample_date),\n      month_name = month(sample_date, label = TRUE),\n      season = case_when(\n        month %in% c(12, 1, 2) ~ \"Winter\",\n        month %in% c(3, 4, 5) ~ \"Spring\",\n        month %in% c(6, 7, 8) ~ \"Summer\",\n        month %in% c(9, 10, 11) ~ \"Autumn\",\n        TRUE ~ NA_character_\n      )\n    ) |&gt;\n    # Calculate rubbish per participant\n    mutate(rubbish_per_participant = rubbish_weight_kg / participants)\n  \n  return(frbc_cleanups_clean)\n}\n\n# Function to join the datasets for integrated analysis\njoin_frbc_datasets &lt;- function(frbc_water_clean, frbc_cleanups_clean) {\n  # Create a date-based lookup to find closest water quality measurement for each cleanup\n  frbc_cleanups_clean &lt;- frbc_cleanups_clean |&gt;\n    mutate(cleanup_id = row_number())\n  \n  frbc_water_clean &lt;- frbc_water_clean |&gt;\n    mutate(water_id = row_number())\n  \n  # Extract relevant columns from each dataset with their proper names\n  cleanup_dates &lt;- frbc_cleanups_clean |&gt;\n    select(cleanup_id, cleanup_date = sample_date, year, month)\n  \n  water_data &lt;- frbc_water_clean |&gt;\n    select(\n      water_id, \n      water_date = sample_date, \n      water_temp_c, \n      flow_ms, \n      nitrate_fww_mgl, \n      phosphate_fww_mgl, \n      turbidity_ntu, \n      ph\n    )\n  \n  # Create all combinations of cleanup events and water measurements\n  all_combinations &lt;- expand_grid(\n    cleanup_id = cleanup_dates$cleanup_id,\n    water_id = water_data$water_id\n  )\n  \n  # Calculate time differences\n  closest_measurements &lt;- all_combinations |&gt;\n    left_join(cleanup_dates, by = \"cleanup_id\") |&gt;\n    left_join(water_data, by = \"water_id\") |&gt;\n    mutate(days_diff = abs(as.numeric(difftime(cleanup_date, water_date, units = \"days\")))) |&gt;\n    group_by(cleanup_id) |&gt;\n    slice_min(order_by = days_diff, n = 1) |&gt;\n    ungroup()\n  \n  # Join back to cleanup data\n  joined_data &lt;- frbc_cleanups_clean |&gt;\n    left_join(\n      closest_measurements |&gt;\n        select(\n          cleanup_id, \n          water_id, \n          days_diff, \n          water_date,\n          water_temp_c, \n          flow_ms, \n          nitrate_fww_mgl, \n          phosphate_fww_mgl, \n          turbidity_ntu, \n          ph\n        ),\n      by = \"cleanup_id\"\n    )\n  \n  return(joined_data)\n}\n\n# Cleaned and joined datasets\nfrbc_water_clean &lt;- clean_frbc_water(frbc_fresh_water_raw) \nfrbc_cleanups_clean &lt;- clean_frbc_cleanups(frbc_river_cleanups_raw) \njoined_data &lt;- join_frbc_datasets(frbc_water_clean, frbc_cleanups_clean)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c())\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Thames in Motion: How Flow Shapes Water Quality and Pollution at FRBC\")\nsubtitle_text &lt;- str_glue(\"Analysis of water quality measurements and cleanup data at Fulham Reach Boat Club, 2023-2024\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 10,\n    source_text = \"River Water Quality\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    legend.position = \"top\",\n    legend.title = element_text(size = rel(0.79)),\n    legend.text = element_text(size = rel(0.71)),\n    \n    axis.title = element_text(size = rel(1.14)),  \n    axis.text = element_text(size = rel(0.86)),  \n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", size = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n    \n    strip.text.y = element_text(size = rel(0.7), angle = 0), \n    \n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(1, \"lines\"),  \n    panel.spacing.y = unit(0, \"lines\"),\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n# P1. River Flow Influences Pollution Accumulation ----\nflow_rubbish_plot &lt;- joined_data |&gt;\n  filter(!is.na(flow_ms), !is.na(rubbish_weight_kg)) |&gt;  \n  ggplot(aes(x = flow_ms, y = rubbish_weight_kg, color = season)) +\n  # Geoms\n  geom_point(size = 3.5, alpha = 0.85) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"black\", \n              linetype = \"dashed\", fill = \"gray80\", alpha = 0.4) +\n  # Scale\n  scale_x_continuous(\n    breaks = seq(-0.3, 0.5, by = 0.1),\n    labels = function(x) sprintf(\"%.1f\", x)\n  ) +\n  scale_y_continuous(breaks = seq(0, 120, by = 20)) +\n  scale_color_brewer(palette = \"Set1\") +\n  # Labs\n  labs(\n    title = \"River Flow Influences Pollution Accumulation\",\n    subtitle = \"Negative correlation shows higher rubbish collection at lower flow rates\",\n    x = \"Water Flow (m/s)\",\n    y = \"Rubbish Collected (kg)\",\n    color = \"Season\"\n  ) +\n  # Theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"sans\", size = 12),\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_line(color = \"gray95\"),\n    panel.grid.major = element_line(color = \"gray90\"),\n    axis.title = element_text(face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n# Add annotation for statistical significance\n# Get the linear model to extract statistics\nflow_model &lt;- lm(rubbish_weight_kg ~ flow_ms, data = joined_data)\nmodel_p_value &lt;- summary(flow_model)$coefficients[2,4]\nmodel_r_squared &lt;- summary(flow_model)$r.squared\n\n# Format p-value and R-squared for display\np_value_text &lt;- ifelse(model_p_value &lt; 0.001, \"p &lt; 0.001\", paste(\"p =\", round(model_p_value, 3)))\nr_squared_text &lt;- paste(\"R² =\", round(model_r_squared, 2))\n\n# Add the annotation in upper right corner with improved formatting\nflow_rubbish_plot &lt;- flow_rubbish_plot +\n  annotate(\n    \"label\", \n    x = 0.3, \n    y = 110,\n    label = paste(r_squared_text, p_value_text, sep = \"\\n\"),\n    hjust = 1, \n    size = 4,\n    fontface = \"bold\",\n    color = \"black\",\n    fill = \"white\",\n    alpha = 0.7\n  )\n\n\n# P2. Seasonal Nutrient Dynamics in Thames Water ----\nnutrient_scatter_plot &lt;- frbc_water_clean |&gt;\n  filter(!is.na(nitrate_fww_mgl), !is.na(phosphate_fww_mgl)) |&gt;\n  ggplot(aes(x = nitrate_fww_mgl, y = phosphate_fww_mgl, color = season)) +\n  # Geoms\n  geom_point(size = 3.5, alpha = 0.85) +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1.2) +\n  # Scale\n  scale_x_continuous(\n    limits = c(0, 10.5),\n    breaks = seq(0, 10, by = 2.5)\n  ) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, by = 0.25)\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  # Labs \n  labs(\n    title = \"Seasonal Nutrient Dynamics in Thames Water\",\n    subtitle = \"Correlated nutrient levels suggest common sources vary by season\",\n    x = \"Nitrate (mg/L)\",\n    y = \"Phosphate (mg/L)\",\n    color = \"Season\"\n  ) +\n  # Facet \n  facet_wrap(~ season, scales = \"fixed\") +\n  # Theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"sans\", size = 12),\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 12, color = \"gray30\", hjust = 0.5),\n    legend.position = \"none\", \n    panel.grid.minor = element_line(color = \"gray95\"),\n    panel.grid.major = element_line(color = \"gray90\"),\n    axis.title = element_text(face = \"bold\"),\n    strip.text = element_text(face = \"bold\", size = 12), \n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n# Create a dataframe with R² values for each season\nr2_values &lt;- tibble(season = character(), r2 = numeric())\n\nfor(current_season in unique(frbc_water_clean$season)) {\n  # Skip if there's no data for this season\n  season_data &lt;- frbc_water_clean |&gt; \n    filter(season == current_season, !is.na(nitrate_fww_mgl), !is.na(phosphate_fww_mgl))\n  \n  if(nrow(season_data) &lt; 3) {\n    # Add placeholder if not enough data\n    r2_values &lt;- r2_values |&gt; add_row(season = current_season, r2 = NA)\n    next\n  }\n  \n  # Calculate linear model for this season\n  season_model &lt;- lm(phosphate_fww_mgl ~ nitrate_fww_mgl, data = season_data)\n  r2_values &lt;- r2_values |&gt; add_row(\n    season = current_season, \n    r2 = summary(season_model)$r.squared\n  )\n}\n\n# Add a data frame with annotation positions for each season\nannotation_positions &lt;- tibble(\n  season = unique(frbc_water_clean$season),\n  x = rep(2, length(unique(frbc_water_clean$season))),\n  y = rep(0.7, length(unique(frbc_water_clean$season)))\n)\n\n# Join R² values with positions\nannotation_data &lt;- annotation_positions |&gt;\n  left_join(r2_values, by = \"season\") |&gt;\n  filter(!is.na(r2))\n\n# Add annotations programmatically with one per facet\nnutrient_scatter_plot &lt;- nutrient_scatter_plot +\n  geom_label(\n    data = annotation_data,\n    aes(x = x, y = y, label = sprintf(\"R² = %.2f\", r2)),\n    inherit.aes = FALSE,\n    hjust = 0,\n    size = 3.5,\n    fontface = \"bold\",\n    fill = \"white\",\n    alpha = 0.7\n  )\n\n# Add reference line for theoretical threshold\nnutrient_scatter_plot &lt;- nutrient_scatter_plot +\n  geom_hline(\n    yintercept = 0.1, \n    linetype = \"dashed\", \n    color = \"darkred\", \n    alpha = 0.6\n  ) +\n  annotate(\n    \"text\",\n    x = 9.5,\n    y = 0.16,\n    label = \"Theoretical threshold (0.1 mg/L)\",\n    hjust = 1,\n    size = 3,\n    fontface = \"italic\",\n    color = \"darkred\"\n  )\n\n\n# P3. Turbidity vs Water Flow with Algae Type \nturbidity_flow_plot &lt;- frbc_water_clean |&gt;\n  filter(!is.na(flow_ms), !is.na(turbidity_ntu)) |&gt;\n  # Clean up algae type values for better display\n  mutate(\n    algae_type = case_when(\n      is.na(algae_type) ~ \"No data\",\n      algae_type == \"\" ~ \"No data\",\n      TRUE ~ algae_type\n    )\n  ) |&gt;\n  # Handle extreme outliers if present\n  filter(turbidity_ntu &lt;= 100) |&gt;  \n  ggplot(aes(x = flow_ms, y = turbidity_ntu, color = algae_type)) +\n  # Geoms\n  geom_point(size = 3.5, alpha = 0.85) +\n  geom_smooth(\n    method = \"loess\", \n    se = TRUE, \n    color = \"black\", \n    linetype = \"dashed\", \n    fill = \"gray80\", \n    alpha = 0.4,\n    aes(group = 1)\n  ) +\n  # Scale\n  scale_x_continuous(\n    limits = c(-0.3, 0.6),\n    breaks = seq(-0.3, 0.6, by = 0.1),\n    labels = function(x) sprintf(\"%.1f\", x)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 100, by = 20)\n  ) +\n  scale_color_brewer(palette = \"Dark2\") +\n  # Labs\n  labs(\n    title = \"Water Flow Affects Clarity and Algal Growth\",\n    subtitle = \"Different algae types dominate at specific flow conditions\",\n    x = \"Water Flow (m/s)\",\n    y = \"Turbidity (NTU)\",\n    color = \"Algae Type\"\n  ) +\n  # Theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"sans\", size = 12),\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_line(color = \"gray95\"),\n    panel.grid.major = element_line(color = \"gray90\"),\n    axis.title = element_text(face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20),\n    legend.key.size = unit(0.8, \"lines\"),\n    legend.text = element_text(size = 10)\n  ) +\n  # Make the legend more readable with wrapped labels\n  guides(color = guide_legend(nrow = 2, byrow = TRUE))\n\n# Check if there are any blue-green scum algae points\nblue_green_points &lt;- frbc_water_clean |&gt;\n  filter(!is.na(flow_ms), !is.na(turbidity_ntu)) |&gt;\n  filter(algae_type == \"Blue-green scum\")\n\n# Only add the annotation if blue-green points exist\nif(nrow(blue_green_points) &gt; 0) {\n  # Find average position of blue-green scum points\n  avg_x &lt;- mean(blue_green_points$flow_ms)\n  avg_y &lt;- mean(blue_green_points$turbidity_ntu)\n  \n  # Add an annotation at that position\n  turbidity_flow_plot &lt;- turbidity_flow_plot +\n    geom_label(\n      data = data.frame(x = avg_x, y = avg_y + 5),\n      aes(x = x, y = y, label = \"Blue-green algae common\\nat these flow rates\"),\n      inherit.aes = FALSE,\n      size = 3,\n      fontface = \"bold\",\n      color = \"black\",\n      fill = \"white\",\n      alpha = 0.7\n    )\n}\n\n# Add an annotation about how flow affects turbidity\nturbidity_flow_plot &lt;- turbidity_flow_plot +\n  annotate(\n    \"label\",\n    x = 0.3,\n    y = 80,\n    label = \"Moderate flow rates (around 0.3 m/s)\\nshow peak turbidity with lower values\\n at both slow and fast flows\",\n    size = 3,\n    fontface = \"bold\",\n    color = \"black\",\n    fill = \"white\",\n    alpha = 0.7\n  )\n\n# Combined Plots ----\nplot1 &lt;- flow_rubbish_plot \nplot2 &lt;- nutrient_scatter_plot \nplot3 &lt;- turbidity_flow_plot \n\ncombined_plot &lt;- (plot1 + plot3) / plot2 +\n  plot_layout(heights = c(1, 1)) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size   = rel(1.8),\n        family = fonts$title,\n        face   = \"bold\",\n        color  = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size   = rel(0.95),\n        family = fonts$subtitle,\n        color  = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.75),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 10,\n  width = 12, \n  height = 12\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 patchwork_1.3.0 ggpubr_0.6.0    here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      pacman_0.5.1      \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         ggsignif_0.6.4    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         RColorBrewer_1.1-3\n[21] xml2_1.3.6         repr_1.1.7         abind_1.4-8        withr_3.0.2       \n[25] grid_4.4.0         fansi_1.0.6        colorspace_2.1-1   cli_3.6.3         \n[29] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[33] tzdb_0.4.0         commonmark_1.9.2   splines_4.4.0      parallel_4.4.0    \n[37] ggplotify_0.1.2    yulab.utils_0.1.8  base64enc_0.1-3    vctrs_0.6.5       \n[41] Matrix_1.7-0       jsonlite_1.8.9     carData_3.0-5      car_3.1-3         \n[45] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        rstatix_0.7.2     \n[49] Formula_1.2-5      systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[53] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       munsell_0.5.1     \n[57] pillar_1.9.0       htmltools_0.5.8.1  R6_2.5.1           rprojroot_2.0.4   \n[61] lattice_0.22-6     vroom_1.6.5        evaluate_1.0.1     markdown_1.13     \n[65] backports_1.5.0    gridtext_0.1.5     broom_1.0.7        snakecase_0.11.1  \n[69] renv_1.0.3         Rcpp_1.0.13-1      nlme_3.1-164       svglite_2.1.3     \n[73] mgcv_1.9-1         xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_10.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 10: River Water Quality\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_08.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_08.html",
    "title": "The Spectrum of Frequencies in Nature and Technology",
    "section": "",
    "text": "Original\nThe original visualization **Per second - vibrations / cycles / waves / rate / frequency*“** from information is beautiful\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: A line graph showing frequency ranges across different categories. The y-axis uses a logarithmic scale from 0 Hz to 1000000000 PHz. Five categories are shown: Biological (blue) showing lowest frequencies, Sound (black) and Technology (orange) in the middle ranges, and Radiation (purple) reaching the highest frequencies. Other (green) spans across multiple ranges.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    camcorder,      # Record Your Plot History \n    highcharter,    # A Wrapper for the 'Highcharts' Library\n    htmlwidgets,    # HTML Widgets for R\n    webshot2        # Take Screenshots of Web Pages\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n\n2. Read in the Data\n\nShow codeper_second_raw &lt;- read_csv(\n  here::here('data/per_second.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(per_second_raw)\nskim(per_second_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nper_second_clean &lt;- per_second_raw  |&gt;\n  select(unit:source) |&gt; \n  filter(description != '\"Frame rate\" of conscious perception in human brain') |&gt; \n  mutate(\n    category = case_when(\n      str_detect(tolower(description), \"brain|heart|purr\") ~ \"Biological\",\n      str_detect(tolower(description), \"sound|audio|speaker|speech\") ~ \"Sound\",\n      str_detect(tolower(description), \"radio|wifi|bluetooth|power\") ~ \"Technology\",\n      str_detect(tolower(description), \"light|ray|radiation\") ~ \"Radiation\",\n      TRUE ~ \"Other\"\n    ),\n    # Add formatted frequency for tooltip\n    freq_formatted = case_when(\n      vibrations_cycles_waves_rate_per_second_not_formatted &gt;= 1e15 ~ paste0(round(vibrations_cycles_waves_rate_per_second_not_formatted/1e15, 1), \" PHz\"),\n      vibrations_cycles_waves_rate_per_second_not_formatted &gt;= 1e12 ~ paste0(round(vibrations_cycles_waves_rate_per_second_not_formatted/1e12, 1), \" THz\"),\n      vibrations_cycles_waves_rate_per_second_not_formatted &gt;= 1e9 ~ paste0(round(vibrations_cycles_waves_rate_per_second_not_formatted/1e9, 1), \" GHz\"),\n      vibrations_cycles_waves_rate_per_second_not_formatted &gt;= 1e6 ~ paste0(round(vibrations_cycles_waves_rate_per_second_not_formatted/1e6, 1), \" MHz\"),\n      vibrations_cycles_waves_rate_per_second_not_formatted &gt;= 1e3 ~ paste0(round(vibrations_cycles_waves_rate_per_second_not_formatted/1e3, 1), \" kHz\"),\n      TRUE ~ paste0(round(vibrations_cycles_waves_rate_per_second_not_formatted, 1), \" Hz\")\n    )\n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors_list &lt;- list(\n  \"Biological\" = \"#36A9E1\",  \n   \"Sound\"      = \"#333333\",      \n   \"Technology\" = \"#FF7F00\",  \n   \"Radiation\"  = \"#7B68EE\",   \n   \"Other\"      = \"#2ECC71\")\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Spectrum of Frequencies in Nature and Technology\")\nsubtitle_text &lt;- str_glue(\"From heartbeats to radiation, visualizing the vast range of frequencies\")\ncaption_text &lt;-  str_glue(\"#MakeoverMonday 2025 Week 8 &#8226; Source: Information is Beautiful\")\n\n### |-  plot theme ----\n\n# Create custom theme\ncustom_theme &lt;- hc_theme(\n  chart = list(\n    backgroundColor = \"#f5f5f2\",\n    style = list(\n      fontFamily = \"Arial, Helvetica, sans-serif\"\n    )\n  ),\n  title = list(\n    style = list(\n      fontSize = \"20px\",\n      fontWeight = \"bold\",\n      fontFamily = \"Arial, Helvetica, sans-serif\"\n    )\n  ),\n  subtitle = list(\n    style = list(\n      fontSize = \"14px\",\n      fontFamily = \"Arial, Helvetica, sans-serif\",\n      color = \"#666666\"\n    )\n  ),\n  caption = list(\n    style = list(\n      fontSize = \"10px\",\n      fontFamily = \"Arial, Helvetica, sans-serif\",\n      color = \"#666666\"\n    )\n  ),\n  legend = list(\n    itemStyle = list(\n      fontFamily = \"Arial, Helvetica, sans-serif\",\n      fontSize = \"12px\"\n    )\n  ),\n  tooltip = list(\n    style = list(\n      fontFamily = \"Arial, Helvetica, sans-serif\",\n      fontSize = \"12px\"\n    )\n  ),\n  xAxis = list(\n    labels = list(\n      style = list(\n        fontFamily = \"Arial, Helvetica, sans-serif\"\n      )\n    )\n  ),\n  yAxis = list(\n    labels = list(\n      style = list(\n        fontFamily = \"Arial, Helvetica, sans-serif\"\n      )\n    )\n  )   \n)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n# Create the highchart visualization\nhc_viz &lt;- highchart() |&gt;\n  hc_add_theme(custom_theme) |&gt;\n  hc_chart(type = \"line\") |&gt;\n  hc_title(\n    text = title_text,\n    align = \"left\"\n  ) |&gt;\n  hc_subtitle(\n    text = subtitle_text,\n    align = \"left\"\n  ) |&gt;\n  hc_caption(\n    text = caption_text,  \n    align = \"right\"\n  ) |&gt; \n  hc_xAxis(\n    title = list(text = \"Phenomena Index\"),\n    gridLineWidth = 1,\n    gridLineColor = \"#E8E8E8\",\n    tickInterval = 5\n  ) |&gt;\n  hc_yAxis(\n    type = \"logarithmic\",\n    title = list(text = \"Frequency (Hz)\"),\n    gridLineWidth = 1,\n    gridLineColor = \"#E8E8E8\",\n    minorGridLineWidth = 0,\n    labels = list(\n      formatter = JS(\"function() {\n        var value = this.value;\n        if (value &gt;= 1e15) return (value/1e15).toFixed(1) + ' PHz';\n        if (value &gt;= 1e12) return (value/1e12).toFixed(1) + ' THz';\n        if (value &gt;= 1e9) return (value/1e9).toFixed(1) + ' GHz';\n        if (value &gt;= 1e6) return (value/1e6).toFixed(1) + ' MHz';\n        if (value &gt;= 1e3) return (value/1e3).toFixed(1) + ' kHz';\n        return value.toFixed(1) + ' Hz';\n      }\")\n    )\n  ) |&gt;\n  hc_legend(\n    align = \"center\",\n    verticalAlign = \"bottom\",\n    layout = \"horizontal\",\n    backgroundColor = \"transparent\",\n    borderWidth = 0\n  ) |&gt;\n  hc_tooltip(\n    shared = FALSE,\n    headerFormat = \"\",\n    pointFormat = paste0(\n      \"&lt;b&gt;Category: {point.category}&lt;/b&gt;&lt;br/&gt;\",\n      \"&lt;b&gt;{point.name}&lt;/b&gt;&lt;br/&gt;\",\n      \"Frequency: {point.freq}&lt;br/&gt;\",\n      \"Phenomena Index: {point.x}\"\n    ),\n    backgroundColor = \"white\",\n    borderWidth = 1,\n    shadow = TRUE\n  )\n\n# Add line charts (series) by category\nfor(cat in unique(per_second_clean$category)) {\n  data_subset &lt;- per_second_clean |&gt;\n    filter(category == cat)\n  \n  hc_viz &lt;- hc_viz |&gt;\n    hc_add_series(\n      name = cat,\n      color = colors_list[[cat]],\n      data = list_parse(\n        data_subset |&gt;\n          mutate(\n            x = seq_along(description),\n            y = vibrations_cycles_waves_rate_per_second_not_formatted,\n            name = description,\n            freq = freq_formatted,\n            category = category\n          ) |&gt;\n          select(x, y, name, freq, category)\n      ),\n      marker = list(\n        enabled = TRUE,\n        symbol = \"circle\",\n        radius = 4\n      ),\n      lineWidth = 1.5,\n      states = list(\n        hover = list(\n          lineWidth = 2,\n          lineWidthPlus = 0\n        )\n      )\n    )\n}\n\n# Add additional chart options\nhc_viz &lt;- hc_viz |&gt;\n  hc_plotOptions(\n    series = list(\n      animation = list(duration = 1000),\n      marker = list(\n        states = list(\n          hover = list(\n            enabled = TRUE,\n            radius = 6\n          )\n        )\n      )\n    )\n  ) |&gt;\n  hc_credits(\n    enabled = TRUE,\n    text = \"&#x1F465; stevenponce &#8226; &#x1F4BB; poncest\",  \n    style = list(\n      fontSize = \"10px\",\n      color = \"#666666\"\n    )\n  )\n\n\n7. Save\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] webshot2_0.1.1    htmlwidgets_1.6.4 highcharter_0.9.4 camcorder_0.1.0  \n [5] here_1.0.1        glue_1.8.0        scales_1.3.0      skimr_2.1.5      \n [9] janitor_2.2.0     showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9   \n[13] ggtext_0.1.2      lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n[17] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n[21] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1  fastmap_1.2.0     pacman_0.5.1      promises_1.3.0   \n [5] digest_0.6.37     timechange_0.3.0  lifecycle_1.0.4   rsvg_2.6.1       \n [9] processx_3.8.4    magrittr_2.0.3    compiler_4.4.0    rlang_1.1.4      \n[13] tools_4.4.0       igraph_2.1.1      utf8_1.2.4        yaml_2.3.10      \n[17] data.table_1.16.2 knitr_1.49        bit_4.5.0         curl_6.0.0       \n[21] xml2_1.3.6        TTR_0.24.4        repr_1.1.7        websocket_1.4.2  \n[25] withr_3.0.2       grid_4.4.0        fansi_1.0.6       xts_0.14.1       \n[29] colorspace_2.1-1  cli_3.6.3         crayon_1.5.3      rmarkdown_2.29   \n[33] generics_0.1.3    rlist_0.4.6.2     rstudioapi_0.17.1 tzdb_0.4.0       \n[37] chromote_0.4.0    parallel_4.4.0    assertthat_0.2.1  base64enc_0.1-3  \n[41] vctrs_0.6.5       jsonlite_1.8.9    hms_1.1.3         bit64_4.5.2      \n[45] systemfonts_1.1.0 magick_2.8.5      quantmod_0.4.26   gifski_1.32.0-1  \n[49] codetools_0.2-20  ps_1.8.1          stringi_1.8.4     gtable_0.3.6     \n[53] later_1.3.2       munsell_0.5.1     pillar_1.9.0      htmltools_0.5.8.1\n[57] R6_2.5.1          rprojroot_2.0.4   vroom_1.6.5       evaluate_1.0.1   \n[61] lattice_0.22-6    backports_1.5.0   gridtext_0.1.5    broom_1.0.7      \n[65] snakecase_0.11.1  renv_1.0.3        Rcpp_1.0.13-1     svglite_2.1.3    \n[69] xfun_0.49         zoo_1.8-12        pkgconfig_2.0.3  \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_08.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nArticle:\n\nPer Second – Vibrations / Cycles / Waves / Rate / Frequency: Per Second – Vibrations / Cycles / Waves / Rate / Frequency\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 08: Per Second – Vibrations / Cycles / Waves / Rate / Frequency\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_06.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_06.html",
    "title": "Britain’s Power Mix: A Daily Energy Snapshot",
    "section": "",
    "text": "Original\nThe original visualization comes from the National Grid: Live (The National Grid is the electric power transmission network for Great Britain).\n ` Source: Elexon Insights Solution, National Grid ESO’s Data Portal, and the Carbon Intensity API\nMakeover\n\n\n\n\n\nFigure 1: Small multiples line chart showing Britain’s energy metrics from Jan 2024 to Jan 2025. Five panels display Energy (GW) trends for Demand, Transfers, Fossil Fuels, Renewables, and Other Sources. Demand shows the highest values around 30-40 GW with seasonal variation, while other metrics fluctuate between 0-20 GW. Each panel includes historical context with grey reference lines.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\ntidyverse,      # Easily Install and Load the 'Tidyverse'\n   tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    camcorder,      # Record Your Plot History \n    patchwork,      # The Composer of Plots\n    gghighlight     # Highlight Lines and Points in 'ggplot2'\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codeenergy_raw &lt;- read_csv(\n  here::here('data/National_Grid_Energy_Breakdown.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(energy_raw)\nskim(energy_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nenergy_clean &lt;- energy_raw |&gt; \n  rename_with(~str_remove(., pattern = \"_gw\"), everything()) |&gt; \n  mutate(date = dmy(date)) |&gt; \n  # Pivot longer\n  pivot_longer(\n    cols = !date,\n    names_to = \"metric\",\n    values_to = \"demand_gw\"\n  ) |&gt; \n  mutate(\n    metric = case_when(\n      metric == \"fossil_fuels\" ~ \"fossil fuels\",\n      metric == \"other_sources\" ~ \"other sources\",\n      TRUE ~ metric\n    ),\n    metric = str_to_title(metric),\n    metric = factor(metric,\n                    levels = c(\"Demand\", \n                               \"Transfers\", \n                               \"Fossil Fuels\", \n                               \"Renewables\", \n                               \"Other Sources\")\n    )\n  ) \n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"#4B79B7\", \"#F8F9FA\", \"#2C3E50\", \"#34495E\", \"#7F8C8D\"))\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Britain's Power Mix: A Daily Energy Snapshot\")\nsubtitle_text &lt;- str_glue(\"Tracking Great Britain's electricity demand and generation sources across&lt;br&gt;\n                          the National Grid | Data from National Grid: Live\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 06,\n    source_text = \"Great Britain National Grid: Live\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n    \n    panel.spacing.x       = unit(2, 'lines'),\n    panel.spacing.y       = unit(1, 'lines'),\n    panel.grid.major.x    = element_blank(),\n    panel.grid.major.y    = element_line(color = alpha(colors[5], 0.2), linewidth = 0.2),\n    panel.grid.minor      = element_blank(),\n    \n    strip.text          = element_textbox(\n      size              = rel(0.9),\n      face              = 'bold',\n      color             = colors$palette[3],\n      fill              = alpha(colors$palette[1], 0.1),\n      box.color         = alpha(colors[1], 0.5),\n      halign            = 0.5,\n      linetype          = 1,\n      r                 = unit(3, \"pt\"),\n      width             = unit(1, \"npc\"),\n      padding           = margin(5, 10, 5, 10),\n      margin            = margin(b = 10)\n    ),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(energy_clean,\n       aes(x = date, y = demand_gw, group = metric)) +\n  # Geoms\n  geom_line(linewidth = 0.3, alpha = 0.2) +\n  gghighlight(\n    use_direct_label = FALSE,\n    unhighlighted_params = list(\n      linewidth = 0.3,\n      alpha = 0.45,\n      color = 'gray20'\n    )\n  ) +\n  geom_line(color = colors$palette[1], linewidth = 1.2) +\n  \n  # Scales\n  scale_x_date(\n    breaks = \"3 month\",               \n    labels = label_date_short(),\n    limits = c(min(energy_clean$date), max(energy_clean$date))  \n  ) +\n  scale_y_continuous(breaks = pretty_breaks()) +\n  coord_cartesian(clip = 'off') +\n  \n  # Labs\n  labs(\n    x = NULL,\n    y = \"Energy (GW)\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n  ) +\n  \n  # Facet\n  facet_wrap(~metric, ncol = 2) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size   = rel(2),\n      family = fonts$title,\n      face   = \"bold\",\n      color  = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size   = rel(0.95),\n      family = fonts$subtitle,\n      color  = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size   = rel(0.6),\n      family = fonts$caption,\n      color  = colors$caption,\n      hjust  = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 06,\n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] gghighlight_0.4.1 patchwork_1.3.0   camcorder_0.1.0   here_1.0.1       \n [5] glue_1.8.0        scales_1.3.0      skimr_2.1.5       janitor_2.2.0    \n [9] showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9    ggtext_0.1.2     \n[13] lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1     dplyr_1.1.4      \n[17] purrr_1.0.2       readr_2.1.5       tidyr_1.3.1       tibble_3.2.1     \n[21] ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   compiler_4.4.0    farver_2.1.2     \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.3        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29    bit_4.5.0        \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] xml2_1.3.6        renv_1.0.3        vroom_1.6.5       svglite_2.1.3    \n[57] rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_06.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nArticle:\n\nNational Grid - Live: The National Grid is the electric power transmission network for Great Britain\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 06: National Grid: Live\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_30.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_30.html",
    "title": "THE HIDDEN UNCERTAINTY",
    "section": "",
    "text": "Figure 1: A map showing uncertainty in Alaska glacier measurements. Three distinct regions of glaciers are labeled, with colors ranging from yellow (low uncertainty) to purple (high uncertainty). An information box explains that uncertainty is affected by distance from observation points, glacier size, and remote locations. The visualization has the distinctive yellow border of National Geographic style.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,          # Easily Install and Load the 'Tidyverse'\n  ggtext,             # Improved Text Rendering Support for 'ggplot2'\n  showtext,           # Using Fonts More Easily in R Graphs\n  janitor,            # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,              # Compact and Flexible Summaries of Data\n  scales,             # Scale Functions for Visualization\n  lubridate,          # Make Dealing with Dates a Little Easier\n  ggdist,             # Visualizations of Distributions and Uncertainty \n  sf,                 # Simple Features for R\n  rnaturalearth,      # World Map Data from Natural Earth\n  rnaturalearthdata,  # World Vector Map Data from Natural Earth Used in 'rnaturalearth'\n  viridis,            # Colorblind-Friendly Color Maps for R\n  ggnewscale,         # Multiple Fill and Colour Scales in 'ggplot2'\n  ggrepel,            # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 10,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codealaska_combined &lt;- readRDS(\n  here::here(\n    \"data/30DayChartChallenge/2025/alaska_combined_data.rds\")) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(alaska_combined)\nskim(alaska_combined)\n\n\n4. Prep Data\n\nFor the data preparation step, refer to the data_preparation.R file in my GitHub repository.\n\n4.1 Tidy Data\n\nShow code### |- Tidy ----\n# Base map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\nalaska_bounds &lt;- st_bbox(c(\n  xmin = -170, ymin = 55, xmax = -130, ymax = 70), crs = st_crs(4326)\n  )\n\n# Calculate average error per glacier over all years \nglacier_avg_error &lt;- alaska_combined |&gt;\n  group_by(rgi_id, region, cen_lon, cen_lat, area) |&gt;\n  summarize(\n    mean_error = mean(error_estimate, na.rm = TRUE),\n    mean_dist = mean(mean_dist_gla_anom, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Convert to SF for mapping\nglacier_error_sf &lt;- glacier_avg_error |&gt;\n  st_as_sf(coords = c(\"cen_lon\", \"cen_lat\"), crs = 4326)\n\n# Define regions \nregion_points &lt;- tibble(\n  region_id = c(\"Region 1\", \"Region 2\", \"Region 3\"),          \n  lon = c(-166, -142, -158),\n  lat = c(56.5, 62, 69),\n  color = c(\"gray20\", \"gray20\", \"gray20\")  \n)\n\n# Convert to SF for plotting\nregion_points_sf &lt;- st_as_sf(\n  region_points, coords = c(\"lon\", \"lat\"), crs = 4326\n  )\n\n# Create informational box \n# Extract uncertainty statistics\nuncertainty_stats &lt;- glacier_avg_error |&gt;\n  summarize(\n    mean_error = mean(mean_error, na.rm = TRUE),\n    max_error = max(mean_error, na.rm = TRUE),\n    min_error = min(mean_error, na.rm = TRUE),\n    glacier_count = n()\n  )\n\n# Textbox\ninfo_box_text &lt;- paste0(\n  \"UNCERTAINTY FACTORS\\n\\n\",\n  \"• Distance from observation points\\n\",\n  \"• Small glaciers (&lt;1 km²)\\n\",\n  \"• Remote mountain locations\\n\",\n  \"• Avg. measurement error: \", round(uncertainty_stats$mean_error, 2), \" m w.e.\\n\",\n  \"• Total glaciers: \", uncertainty_stats$glacier_count\n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"water\" = \"#71ABD8\",       \n    \"land\" = \"#E8E6D9\",       \n    \"glacier\" = \"#D1E6EC\",     \n    \"highlight\" = \"#FFCD00\",   \n    \"text\" = \"#000000\",        \n    \"uncertainty\" = \"#8BB9DD\", \n    \"dark_blue\" = \"#1A5088\",   \n    \"text_gray\" = \"#555555\"    \n    )\n  )          \n \n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"THE HIDDEN UNCERTAINTY\")\n\nsubtitle_text &lt;- str_glue(\"Mapping measurement challenges in Alaska's vanishing glaciers\\n\n                          Color indicates average error estimate magnitude (1946-2023)\")\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 30,\n  source_text =  \"World Glacier Monitoring Service\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# National Geographic theme (at least my interpretation)\ntheme_natgeo &lt;- function() {\n  theme_minimal(base_size = 14) +\n    theme(\n      # Text elements\n      plot.title = element_text(face = \"bold\", size = 20, family = \"sans\"),\n      plot.subtitle = element_text(size = 14, family = \"sans\", margin = margin(b = 20)),\n      axis.title = element_text(face = \"bold\", size = 10),\n      legend.title = element_text(face = \"bold\", size = 10),\n      \n      # Grid elements\n      panel.grid.major = element_line(color = \"gray90\", size = 0.2),\n      panel.grid.minor = element_blank(),\n      \n      # Background elements\n      plot.background = element_rect(fill = \"white\", color = NA),\n      panel.background = element_rect(fill = \"white\", color = NA),\n      \n      # Margins and spacing\n      plot.margin = margin(20, 20, 20, 20),\n      legend.margin = margin(10, 10, 10, 10),\n      \n      # Caption styling\n      plot.caption = element_text(size = 9, hjust = 0, color = colors$palette[\"text_gray\"], \n                                  margin = margin(t = 15))\n    )\n}\n\n\n6. Plot\n\nShow code### |-  Plot ----\n# Main map -----\nmain_map &lt;- ggplot() +\n  # Base map\n  geom_sf(data = world, fill = colors$palette['land'], color = \"gray70\") +\n  \n  # Geoms\n  geom_sf(\n    data = glacier_error_sf, \n    aes(size = area, color = mean_error),\n    alpha = 0.8\n    ) +\n  geom_label(\n    data = region_points_sf,\n    aes(geometry = geometry, label = region_id),\n    stat = \"sf_coordinates\",\n    fill = \"white\",\n    color = region_points$color, \n    fontface = \"bold\",\n    size = 4,\n    label.padding = unit(0.4, \"lines\"),\n    label.r = unit(0.15, \"lines\"),\n    alpha = 0.9,\n    label.size = 0.8  \n  ) +\n  # Scales\n  scale_color_viridis_c(\n    name = \"Mean Error\\nEstimate (m w.e.)\",\n    option = \"plasma\",\n    direction = -1,\n    guide = guide_colorbar(\n      title.position = \"top\",\n      barwidth = 12,\n      barheight = 1\n    )\n  ) +\n  scale_size_continuous(\n    name = \"Glacier Area (km²)\",\n    range = c(0.1, 3.5),\n    breaks = c(1, 10, 100, 1000),\n    trans = \"log10\",\n    labels = label_comma(),\n    guide = guide_legend(\n      title.position = \"top\",\n      override.aes = list(color = colors$palette[\"dark_blue\"])\n    )\n  ) +\n  coord_sf(  # Alaska region\n    xlim = c(alaska_bounds$xmin, alaska_bounds$xmax), \n    ylim = c(alaska_bounds$ymin, alaska_bounds$ymax)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = NULL\n  ) +\n  # Theme\n  theme_natgeo() +\n  theme(\n\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n    legend.direction = \"horizontal\",\n    legend.spacing.x = unit(1, \"cm\"),\n    legend.box.spacing = unit(0.5, \"cm\"),\n    legend.key.size = unit(0.8, \"cm\"),\n\n    plot.title = element_text(\n      size = rel(2.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.90),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 0.8,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n# Info textbox -----\ninfo_box &lt;- ggplot() +\n  annotate(\n    \"rect\",\n    xmin = 0, xmax = 1, ymin = 0, ymax = 1,\n    fill = alpha(colors$palette[\"highlight\"], 0.08)\n  ) +\n  annotate(\n    \"text\",\n    x = 0.05, y = 0.5,\n    label = info_box_text,\n    hjust = 0, vjust = 0.5,\n    size = 3.2,  \n    fontface = \"plain\",\n    color = colors$palette[\"text\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0, xmax = 1, ymin = 0, ymax = 1,\n    fill = NA, color = alpha(colors$palette[\"highlight\"], 0.5),\n    linewidth = 1\n  ) +\n  theme_void() +\n  xlim(0, 1) + ylim(0, 1)\n\n# Combine main map and info box -----\ncombined_map &lt;- main_map +\n  annotation_custom(\n    grob = ggplotGrob(info_box),\n    xmin = -143, xmax = -128,  \n    ymin = 62.5, ymax = 68.5     \n  )\n\n# Final map -----\nfinal_map &lt;- combined_map +\n  theme(\n    plot.background = element_rect(\n      fill = \"white\", \n      color = colors$palette[\"highlight\"], \n      linewidth = 5\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  final_map, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 30, \n  width = 10, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1              camcorder_0.1.0         ggrepel_0.9.6          \n [4] ggnewscale_0.5.1        viridis_0.6.5           viridisLite_0.4.2      \n [7] rnaturalearthdata_1.0.0 rnaturalearth_1.0.1     sf_1.0-19              \n[10] ggdist_3.3.2            scales_1.3.0            skimr_2.1.5            \n[13] janitor_2.2.0           showtext_0.9-7          showtextdb_3.0         \n[16] sysfonts_0.8.9          ggtext_0.1.2            lubridate_1.9.3        \n[19] forcats_1.0.0           stringr_1.5.1           dplyr_1.1.4            \n[22] purrr_1.0.2             readr_2.1.5             tidyr_1.3.1            \n[25] tibble_3.2.1            ggplot2_3.5.1           tidyverse_2.0.0        \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     farver_2.1.2         fastmap_1.2.0       \n [4] pacman_0.5.1         digest_0.6.37        timechange_0.3.0    \n [7] lifecycle_1.0.4      rsvg_2.6.1           terra_1.7-83        \n[10] magrittr_2.0.3       compiler_4.4.0       rlang_1.1.6         \n[13] tools_4.4.0          utf8_1.2.4           yaml_2.3.10         \n[16] knitr_1.49           labeling_0.4.3       htmlwidgets_1.6.4   \n[19] curl_6.0.0           classInt_0.4-10      xml2_1.3.6          \n[22] repr_1.1.7           KernSmooth_2.23-22   withr_3.0.2         \n[25] grid_4.4.0           fansi_1.0.6          e1071_1.7-16        \n[28] colorspace_2.1-1     cli_3.6.4            rmarkdown_2.29      \n[31] ragg_1.3.3           generics_0.1.3       rstudioapi_0.17.1   \n[34] httr_1.4.7           tzdb_0.5.0           commonmark_1.9.2    \n[37] DBI_1.2.3            proxy_0.4-27         base64enc_0.1-3     \n[40] vctrs_0.6.5          jsonlite_1.8.9       hms_1.1.3           \n[43] systemfonts_1.1.0    magick_2.8.5         units_0.8-5         \n[46] glue_1.8.0           gifski_1.32.0-1      codetools_0.2-20    \n[49] distributional_0.5.0 stringi_1.8.4        gtable_0.3.6        \n[52] munsell_0.5.1        pillar_1.9.0         htmltools_0.5.8.1   \n[55] R6_2.5.1             textshaping_0.4.0    rprojroot_2.0.4     \n[58] evaluate_1.0.1       markdown_1.13        gridtext_0.1.5      \n[61] snakecase_0.11.1     renv_1.0.3           class_7.3-22        \n[64] Rcpp_1.0.13-1        svglite_2.1.3        gridExtra_2.3       \n[67] xfun_0.49            pkgconfig_2.0.3     \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_30.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nDussaillant, I., Hugonnet, R., Huss, M., Berthier, E., Bannwart, J., Paul, F., and Zemp, M. (2025): Annual mass-change estimates for the world’s glaciers. glacier time series and gridded data products.\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_28.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_28.html",
    "title": "Gender Gap in Educational Exclusion by Region",
    "section": "",
    "text": "Figure 1: A dot plot showing the gender gap in educational exclusion across regions. Sub-Saharan Africa has the largest gap (+8.2%) where females have less education, followed by Central and Southern Asia (+4.6%) and Northern Africa (+2.9%). Europe and Eastern Asia show minimal differences. Latin America (-0.3%) and Oceania (-0.5%) have slightly more males with less education. Error bars indicate statistical uncertainty. A dashed vertical line represents gender parity, with subtle background shading distinguishing areas where females (pink) or males (blue) are more excluded.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codeunesco_education_raw &lt;- read_csv(\n  here::here(\n    \"data/30DayChartChallenge/2025/1699460825-wide_2023_sept.csv\")) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(unesco_education_raw)\nskim(unesco_education_raw)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\neducation_clean &lt;- unesco_education_raw |&gt;\n  filter(!is.na(edu4_2024_m)) |&gt;   # Focus on the key metric\n  mutate(edu4_2024_m = as.numeric(edu4_2024_m)) |&gt;\n  filter(!is.na(sex)) |&gt;\n  filter(year &gt;= 2010) |&gt;\n  select(country, region_group, year, sex, edu4_2024_m, edu4_2024_no)\n\n# Gender gaps (inclusion)\ngender_gaps &lt;- education_clean |&gt;\n  group_by(country, region_group, year) |&gt;\n  summarize(\n    female_rate = mean(edu4_2024_m[sex == \"Female\"], na.rm = TRUE),\n    male_rate = mean(edu4_2024_m[sex == \"Male\"], na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  # Calculate the gender gap (female - male)\n  mutate(\n    gender_gap = female_rate - male_rate,\n    abs_gap = abs(gender_gap)\n  ) |&gt;\n  filter(!is.na(gender_gap))\n\n# Regional averages with uncertainty\nregion_gaps &lt;- gender_gaps |&gt;\n  group_by(region_group) |&gt;\n  summarize(\n    mean_gap = mean(gender_gap, na.rm = TRUE),\n    sd_gap = sd(gender_gap, na.rm = TRUE),\n    countries = n_distinct(country),\n    # Calculate uncertainty\n    lower_ci = mean_gap - 1.96 * sd_gap / sqrt(countries),\n    upper_ci = mean_gap + 1.96 * sd_gap / sqrt(countries),\n    # Calculate mean rates for context\n    mean_female = mean(female_rate, na.rm = TRUE),\n    mean_male = mean(male_rate, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(\n    disadvantaged_gender = ifelse(mean_gap &gt; 0, \"Female\", \"Male\"),\n    region_label = paste0(region_group, \" (n=\", countries, \")\")\n  ) |&gt;\n  arrange(desc(abs(mean_gap)))\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Female\" = \"#D81B60\", \"Male\" = \"#1E88E5\"\n    )\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Gender Gap in Educational Exclusion by Region\")\n\nsubtitle_text &lt;- str_glue(\"Difference in percentage with less than **4 years of education** (female - male), 2010 - 2021.\",\n                          \"&lt;br&gt;Higher values indicate greater educational exclusion.\",\n                          \"&lt;br&gt;&lt;br&gt;Error bars show uncertainty (95% confidence intervals)\",\n                          \"&lt;br&gt;n = number of countries reporting (higher values indicate more complete regional data)\")\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 28,\n  source_text =  \"Unesco Institute for Statistics\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Legend\n    legend.position = \"bottom\",\n    \n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(r = 10)),\n    axis.title.x = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(t = 10)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major.x = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(region_gaps, aes(x = reorder(region_label, mean_gap), y = mean_gap)) +\n  # Geoms\n  geom_hline(\n    yintercept = 0, linetype = \"dashed\", color = \"gray50\"\n    ) +\n  geom_errorbar(\n    aes(ymin = lower_ci, ymax = upper_ci), \n    width = 0.3, color = \"gray50\"\n    ) +\n  geom_point(\n    aes(color = disadvantaged_gender), \n    size = 3.5, alpha = 0.8\n    ) +\n  geom_text(\n    aes(label = sprintf(\"%+.1f%%\", 100 * mean_gap)),\n    color = \"black\", hjust = 0.5, vjust = -1, size = 3.5\n    ) +\n  # Scales\n  scale_color_manual(\n    values = colors$palette,\n    name = \"More Excluded Gender\",\n    labels = c(\"Female\", \"Male\")\n    ) +\n  scale_y_continuous(\n    labels = scales::percent_format(),\n    limits = c(-0.1, 0.13),\n    name = \"Gender Gap (percentage points)\"\n    ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"\"\n  ) +\n  # Annotate\n  annotate(\n    \"text\", y = 0.11, x = 3, \n    label = str_wrap(\"Positive values: Females have less education (more excluded)\", width = 25),\n    hjust = 1, size = 3, color = \"#D81B60\"\n    ) +\n  annotate(\n    \"text\", y = -0.025, x = 2, \n    label = str_wrap(\"Negative values: Males have less education (more excluded)\",\n                     width = 22),\n    hjust = 1, size = 3, color = \"#1E88E5\"\n    ) +\n  annotate(\n    \"text\", y = 0.005, x = 1.1, \n    label = \"Gender parity line\\n(equal educational exclusion)\", \n    vjust = -0.85, hjust = 0, size = 3, color = \"gray50\" \n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.9),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 0.8,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0,\n      halign = 0,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 28, \n  width = 8, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 scales_1.3.0    skimr_2.1.5    \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1       \n[33] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[37] cli_3.6.4         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[41] withr_3.0.2       bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29   \n[45] bit_4.5.0         ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[49] knitr_1.49        markdown_1.13     rlang_1.1.6       gridtext_0.1.5   \n[53] Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6        renv_1.0.3       \n[57] svglite_2.1.3     rstudioapi_0.17.1 vroom_1.6.5       jsonlite_1.8.9   \n[61] R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_28.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nUnesco Institute for Statistics, Gender Equality in Education World Inequality Database on Education, Indicator: Less than 4 years of schooling\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_26.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_26.html",
    "title": "Uncertainty in Cardiovascular Disease Prevalence Across the U.S.",
    "section": "",
    "text": "Figure 1: A dot plot showing cardiovascular disease prevalence across U.S. states and territories with 95% confidence intervals. States are ordered vertically from highest to lowest prevalence (West Virginia at 6.7% to Virgin Islands at 1.4%). Each state/territory has a dot showing its estimate and a horizontal line extending from the dot showing the confidence interval range. A vertical dashed line marks the national median of 4.0%. The visualization demonstrates how statistical uncertainty varies, with some regions having wider confidence intervals than others.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codecdc_prevalence_cardiovascular_disease &lt;- read_csv(\n  here::here(\n    \"data/Behavioral_Risk_Factor_Surveillance_System__BRFSS__Prevalence_Data__2011_to_present__20250409.csv\")) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(cdc_prevalence_cardiovascular_disease)\nskim(cdc_prevalence_cardiovascular_disease)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Prepare state-level data\nstate_cvd &lt;- cdc_prevalence_cardiovascular_disease |&gt;\n  filter(year == 2023) |&gt;\n  filter(break_out == \"Overall\" | is.na(break_out)) |&gt;\n  filter(\n    str_detect(locationdesc, \"^[A-Z]\") & \n      !str_detect(locationdesc, \"median|Median|average|Average\")\n  ) |&gt;\n  select(\n    location = locationdesc,\n    prevalence = data_value,\n    lower_bound = confidence_limit_low,\n    upper_bound = confidence_limit_high,\n    sample_size,\n    year\n  ) |&gt;\n  mutate(\n    ci_width = upper_bound - lower_bound,\n    location = str_replace(location, \" State$\", \"\"),\n    location = fct_reorder(location, prevalence)\n  ) |&gt;\n  filter(!is.na(prevalence))\n\n# Get national median estimate (US-level)\nus_median &lt;- cdc_prevalence_cardiovascular_disease |&gt;\n  filter(year == 2023, break_out == \"Overall\", locationabbr == \"US\") |&gt; \n  pull(data_value)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"black\", \"gray40\", \"gray50\", \"gray70\", \"gray95\", \"white\", \"gray40\"\n    )\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Uncertainty in Cardiovascular Disease Prevalence Across the U.S.\",\n                          width = 70) \n\nsubtitle_text &lt;- str_wrap(\"95% confidence intervals for states and territories reveal varying levels of statistical precision (CDC, 2023)\",\n                          width = 80)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 26,\n  source_text =  \"CDC’s Behavioral Risk Factor Surveillance System (BRFSS)\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(t = 10)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major.x = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.background = element_rect(fill = colors$palette[6], color = colors$palette[6]),\n    panel.background = element_rect(fill = colors$palette[6], color = colors$palette[6]),\n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(state_cvd, aes(x = prevalence, y = location)) +\n  # Geoms\n  geom_segment(\n    aes(x = lower_bound, xend = upper_bound, yend = location),\n    color = colors$palette[4], linewidth = 0.9, alpha = 0.9\n  ) +\n  geom_point(\n    size = 3, color = colors$palette[1], \n    fill = colors$palette[1],\n  ) +\n  geom_text(\n    aes(x = upper_bound, label = sprintf(\"%.1f%% [%.1f–%.1f]\", prevalence, lower_bound, upper_bound)),\n    nudge_x = 0.25, hjust = 0, vjust = 0.3, size = 2.7, color = colors$palette[2]\n  ) +\n  geom_vline(\n    xintercept = us_median, color = colors$palette[2], \n    linetype = \"dashed\", linewidth = 0.5\n  ) + \n  # Annotate\n  annotate(\n    \"text\", x = us_median, y = 44, \n    label = sprintf(\"National median: %.1f%%\", us_median),\n    hjust = 0, vjust = -1, size = 3, color = colors$palette[1], \n    fontface = \"italic\", angle = 90\n  ) +\n  # Scales\n  scale_x_continuous(\n    limits = c(0, max(state_cvd$upper_bound) + 0.7),\n    labels = label_percent(scale = 1, suffix = \"%\"),\n    breaks = seq(0, 8, by = 2),\n    expand = expansion(mult = c(0.01, 0.1))\n  ) +\n  scale_y_discrete(\n    expand = expansion(mult = c(0.01, 0.02))\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Cardiovascular Disease Prevalence (%)\",\n    y = NULL\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.45),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 14)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  ) \n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 26, \n  width = 8, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 hoopR_2.1.0     ggrepel_0.9.6  \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.6         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       globals_0.16.3     \n[31] cli_3.6.4           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.5.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      markdown_1.13      \n[67] gridtext_0.1.5      snakecase_0.11.1    renv_1.0.3         \n[70] Rcpp_1.0.13-1       svglite_2.1.3       xfun_0.49          \n[73] pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_26.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nCDC’s Behavioral Risk Factor Surveillance System (BRFSS) BRFSS: Prevalence of Cardiovascular Disease\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_24.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_24.html",
    "title": "Gender Differences in Diabetes Rates Vary Sharply by Region",
    "section": "",
    "text": "Figure 1: Time series line chart (1990-2022) showing gender differences in diabetes prevalence across regions. Europe shows men have nearly 40% higher rates than women (positive values). Africa shows women historically had up to 20% higher rates than men (negative values), though this gap has narrowed. Asia shows minimal gender differences, while Oceania and Americas show moderate differences with women having slightly higher rates.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  countrycode,    # Convert Country Names and Country Codes\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n   camcorder      # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codediabetes_data_raw &lt;- read_csv(here::here(\n  'data/30DayChartChallenge/2025/WHO_prevalence_of_diabetes_3356.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(diabetes_data_raw)\nskim(diabetes_data_raw)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\ndiabetes_processed &lt;- diabetes_data_raw |&gt;  \n  filter(\n    indicator == \"Prevalence of diabetes, age-standardized\",\n    dim2 == \"18+  years\"\n  ) |&gt;\n  select(location, period, dim1, prevalence = fact_value_numeric) |&gt;\n  mutate(\n    year = period,\n    region = case_when(\n      location %in% c(\"Global\", \"World\") ~ \"Global\",\n      TRUE ~ countrycode(location, \"country.name\", \"continent\")\n    )\n  )\n\ngender_gap_data &lt;- diabetes_processed |&gt;\n  filter(dim1 %in% c(\"Male\", \"Female\")) |&gt;\n  pivot_wider(names_from = dim1, values_from = prevalence) |&gt;\n  filter(!is.na(Male) & !is.na(Female)) |&gt;\n  mutate(relative_difference = (Male - Female) / Female * 100) |&gt;\n  filter(!is.na(region)) |&gt;\n  group_by(region, year) |&gt;\n  summarize(\n    avg_relative_difference = mean(relative_difference, na.rm = TRUE), \n    .groups = \"drop\"\n    ) |&gt;\n  group_by(region) |&gt;\n  mutate(\n    last_value = if_else(year == max(year), avg_relative_difference, NA_real_),\n    highlight = case_when(\n      region %in% c(\"Asia\", \"Europe\", \"Africa\") ~ \"highlight\",\n      TRUE ~ \"base\",\n    )\n  ) |&gt;\n  ungroup()\n\nlabel_colors &lt;- c(\"Europe\" = \"#D62828\", \"Asia\" = \"#0077B6\", \"Africa\" = \"#2A9D8F\")\n\ngender_gap_labels &lt;- gender_gap_data |&gt; \n  filter(!is.na(last_value), region %in% names(label_colors)) |&gt;\n  mutate(label_color = label_colors[region])\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\"Europe\" = \"#D62828\", \"Asia\" = \"#0077B6\", \"Africa\" = \"#2A9D8F\")\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Gender Differences in Diabetes Rates Vary Sharply by Region\",\n                          width = 60) \n\nsubtitle_text &lt;- str_glue(\"Values represent the **percentage difference** between **men's** and **women's** &lt;br&gt;\n                          diabetes prevalence (age-standardized adults 18+).&lt;br&gt;&lt;br&gt;\n                          Positive values mean higher rates for men; negative means higher for women.\")\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 24,\n  source_text =  \"World Health Organization (WHO) Global Health Observatory, 2024\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(gender_gap_data, aes(x = year, y = avg_relative_difference, group = region)) +\n  \n  # Geoms\n  geom_line(\n    data = gender_gap_data |&gt; filter(region %in% c(\"Americas\", \"Oceania\")),\n    color = \"gray80\", linewidth = 1.2, lineend = \"round\"\n  ) +\n  geom_line(data = gender_gap_data |&gt; filter(region == \"Asia\"), color = colors$palette[2], linewidth = 1.4) +\n  geom_line(data = gender_gap_data |&gt; filter(region == \"Europe\"), color = colors$palette[1], linewidth = 1.4) +\n  geom_line(data = gender_gap_data |&gt; filter(region == \"Africa\"), color = colors$palette[3], linewidth = 1.4) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n  geom_text_repel(\n    data = gender_gap_labels,\n    aes(label = region, color = label_color),\n    xlim = c(2021, 2026),\n    size = 3.8, fontface = \"bold\", hjust = 0,\n    direction = \"y\", nudge_x = 1.5, segment.alpha = 0.4,\n    box.padding = 0.4, show.legend = FALSE\n  ) +\n  # Add gray labels for context lines\n  geom_text_repel(\n    data = gender_gap_data |&gt;\n      filter(!is.na(last_value), region %in% c(\"Americas\", \"Oceania\")),\n    aes(label = region),\n    color = \"gray50\",\n    xlim = c(2021, 2026),\n    size = 3.5, fontface = \"plain\", hjust = 0,\n    direction = \"y\", nudge_x = 1.5, segment.alpha = 0.3,\n    box.padding = 0.4, show.legend = FALSE\n  ) +\n  # Annotate\n  annotate(\n    \"text\", x = 1990, y = 6, label = \"Men have higher prevalence ↑\", \n     hjust = 0, size = 3, color = \"gray30\", fontface = \"bold\"\n    ) +\n  annotate(\n    \"text\", x = 1990, y = -6, label = \"Women have higher prevalence ↓\", \n    hjust = 0, size = 3, color = \"gray30\", fontface = \"bold\"\n    ) +\n  annotate(\n    \"text\", x = 2016, y = 42, \n    label = \"In Europe, men have nearly\\n40% higher diabetes rates\", \n    size = 3, color = \"#D62828\", fontface = \"bold\", hjust = 0\n    ) +\n  annotate(\n    \"text\", x = 1997, y = -21, \n    label = \"In Africa, women historically had\\nup to 20% higher diabetes rates\", \n    size = 3, color = \"#2A9D8F\", fontface = \"bold\", hjust = 0\n    ) +\n  # Scales\n  scale_x_continuous(\n    breaks = seq(1990, 2020, by = 5),\n    limits = c(1990, 2026),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  scale_y_continuous(\n    breaks = seq(-20, 40, by = 10),\n    limits = c(-22, 42),\n    labels = function(x) paste0(ifelse(x &gt; 0, \"+\", \"\"), x, \"%\")\n  ) +\n  scale_color_identity() +  \n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Relative Difference in\\nDiabetes Prevalence (Men vs Women)\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.55),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 24, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1        camcorder_0.1.0   ggrepel_0.9.6     countrycode_1.6.0\n [5] scales_1.3.0      skimr_2.1.5       janitor_2.2.0     showtext_0.9-7   \n [9] showtextdb_3.0    sysfonts_0.8.9    ggtext_0.1.2      lubridate_1.9.3  \n[13] forcats_1.0.0     stringr_1.5.1     dplyr_1.1.4       purrr_1.0.2      \n[17] readr_2.1.5       tidyr_1.3.1       tibble_3.2.1      ggplot2_3.5.1    \n[21] tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.4        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29    bit_4.5.0        \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.6       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] glue_1.8.0        xml2_1.3.6        renv_1.0.3        vroom_1.6.5      \n[57] svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1         \n[61] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_24.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nWorld Health Organization, The Global Health Observatoryindicator = Diabetes prevalence, ID 3356\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_22.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_22.html",
    "title": "Stellar Observations by the Hubble Space Telescope",
    "section": "",
    "text": "Figure 1: Time series visualization of Hubble Space Telescope observations from 2016-2024, showing the 10 most frequently observed celestial targets. Gold dots represent observations, with NGC104-WFC having the most consistent observations over time. M-51 shows a concentrated period of observations in 2017-2018, while NGC5139-WFC observations only begin around 2020.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codehubble_raw &lt;- read_csv(here::here(\n  \"data/30DayChartChallenge/2025/HST_2025-04-05T07_06_02-04_00.csv\")\n  ) |&gt; \n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(hubble_raw)\nskim(hubble_raw)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Filter for the top 10 targets\ntop_stars &lt;- hubble_raw |&gt;\n  filter(sci_targname != \"ANY\") |&gt;  \n  count(sci_targname, sort = TRUE) |&gt;\n  slice_head(n = 10)\n\n# Filter for those top targets\ntop_observations &lt;- hubble_raw |&gt;\n  filter(sci_targname %in% top_stars$sci_targname)\n\n# Prepare the timeline data\nobservations_timeline &lt;- top_observations |&gt;\n  mutate(\n    clean_name = str_replace(sci_targname, \"^\\\\d+\\\\s*\", \"\")           \n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\"#FFD700\")\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Stellar Observations by the Hubble Space Telescope\",\n                          width = 55) \n\nsubtitle_text &lt;- str_wrap(\"Timeline of the 10 Most Frequently Observed Celestial Targets\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 22,\n  source_text =  \"Barbara A. Mikulski Archive for Space Telescopes (MAST)\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    plot.background = element_rect(fill = \"black\", color = NA),\n    panel.background = element_rect(fill = \"black\", color = NA),\n    \n    text = element_text(color = \"white\"),\n    axis.text = element_text(color = \"white\"),\n    axis.title = element_text(color = \"white\"),\n    \n    panel.grid.major = element_line(color = \"gray30\", linetype = \"dotted\"),\n    panel.grid.minor = element_line(color = \"gray20\", linetype = \"dotted\"),\n\n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(\n  observations_timeline, \n  aes(x = sci_start_time, y = clean_name)\n  ) +\n  # Geoms\n  geom_point(\n    color = colors$palette,  \n    size = 2,\n    alpha = 0.8\n  ) +\n  # Annotate\n  annotate(\n    \"text\", \n    x = as.POSIXct(\"2018-02-01\"), \n    y = \"M-51\", \n    label = paste(                        \n      \"Search Parameters:\",\n      \"Objects: star | Radius: 3 arcminutes | Date: 2015-2023\",\n      \"Instrument: ACS | Exposure Time: &gt;60s | Science observations only\",\n      sep = \"\\n\"\n    ),\n    hjust = 0,\n    vjust = 1.3,  \n    color = \"white\",\n    size = 3,\n    lineheight = 0.9,\n    fontface = \"italic\"\n  ) +\n  # Scale\n  scale_x_datetime(\n    labels = date_format(\"%Y\"),\n    breaks = breaks_width(\"2 years\")\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Observation Date\",\n    y = \"Target Name\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = 'white',\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = 'white',\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = alpha('white', 0.8),\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 22, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 scales_1.3.0    skimr_2.1.5    \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.3        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29    bit_4.5.0        \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] glue_1.8.0        xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[57] rstudioapi_0.17.1 vroom_1.6.5       jsonlite_1.8.9    R6_2.5.1         \n[61] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_22.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nBarbara A. Mikulski Archive for Space Telescopes (MAST)\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_20.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_20.html",
    "title": "The Shifting Speeds of Urbanization (1960-2023)",
    "section": "",
    "text": "Figure 1: A faceted area chart titled ‘The Shifting Speeds of Urbanization (1960-2023)’ showing annual percentage point changes in urban population for eight countries. Countries are arranged by their maximum rate of urbanization, with Japan showing the highest spike (over 1.5%) around 2000, followed by China with sustained high rates, and Brazil with early high rates that gradually decreased. Nigeria, India, Egypt, the United States, and Germany show more moderate urbanization rates. Negative urbanization periods appear in orange for countries like China, Egypt, and Germany.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  WDI,            # World Development Indicators and Other World Bank Data\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Search for urbanization indicators\nurbanization_indicators &lt;- WDIsearch(\"urban population\")\n# head(urbanization_indicators)\n\n# Select countries of interest\ncountries &lt;- c(\"USA\", \"CHN\", \"IND\", \"BRA\", \"NGA\", \"DEU\", \"JPN\", \"EGY\")\n\n# Get the data\nurban_data &lt;- WDI(\n  indicator = \"SP.URB.TOTL.IN.ZS\",    # Urban population (% of total population)\n  country = countries,\n  start = 1960,\n  end = 2024,  \n  extra = TRUE  \n)\n\n\n3. Examine the Data\n\nShow codeglimpse(urban_data)\nskim(urban_data)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Clean and prepare the initial dataset\nurban_data_clean &lt;- urban_data |&gt;\n  select(country, year, SP.URB.TOTL.IN.ZS, region) |&gt;\n  rename(urban_population_pct = SP.URB.TOTL.IN.ZS) |&gt;\n  filter(!is.na(urban_population_pct))\n\n# Calculate annual change rates\nurban_change &lt;- urban_data_clean |&gt;\n  arrange(country, year) |&gt;\n  group_by(country) |&gt;\n  mutate(change_rate = c(NA, diff(urban_population_pct))) |&gt;\n  filter(!is.na(change_rate)) |&gt; \n  ungroup()\n\n# Calculate maximum change for each country (for ordering)\ncountry_max_change &lt;- urban_change |&gt;\n  group_by(country) |&gt;\n  summarize(max_change = max(change_rate, na.rm = TRUE)) |&gt;\n  arrange(desc(max_change)) |&gt; \n  ungroup()\n\n# Apply the ordering to each country\nurban_change &lt;- urban_change |&gt;\n  mutate(country = factor(country, levels = country_max_change$country))\n\n# Create separate dataframes for positive and negative changes\nurban_change_pos &lt;- urban_change |&gt;\n  mutate(y_value = pmax(0, change_rate))\n\nurban_change_neg &lt;- urban_change |&gt;\n  mutate(y_value = pmin(0, change_rate))\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"pos_color\" = \"#1B9E77\",\n    \"neg_color\" = \"#D95F02\"  \n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"The Shifting Speeds of Urbanization (1960-2023)\",\n                          width = 55) \n\nsubtitle_text &lt;- str_wrap(\"Annual growth rates show when countries urbanized fastest and when they slowed down\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 20,\n  source_text =  \"{ WDI } World Bank data in R\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), margin = margin(r = 10)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray92\"),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_blank(),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Facet elements\n    strip.background = element_rect(fill = \"gray90\", color = NA),\n    strip.text = element_text(face = \"bold\", size = rel(1), margin = margin(10, 0, 10, 0)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot() +\n  # Geoms\n  geom_area(\n    data = urban_change_pos, \n    aes(x = year, y = y_value), \n    fill = colors$palette[1], alpha = 0.7\n  ) +\n  geom_area(\n    data = urban_change_neg, \n    aes(x = year, y = y_value), \n    fill = colors$palette[2], alpha = 0.7 \n  ) +\n  geom_line(\n    data = urban_change, \n    aes(x = year, y = change_rate), \n    color = \"black\", \n    linewidth = 0.5\n  ) +\n  geom_hline(\n    yintercept = 0, \n    linetype = \"dashed\", \n    color = \"black\", \n    linewidth = 0.5\n  ) +\n  # Scales\n  scale_x_continuous(\n    breaks = seq(1960, 2020, by = 20)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Year\",\n    y = \"Change in Urban Population (%)\"\n  ) +\n  # Facet \n  facet_wrap(~ country, ncol = 3)  +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 20, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 WDI_2.7.9       scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1      pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] htmltools_0.5.8.1 yaml_2.3.10       pillar_1.9.0      magick_2.8.5     \n[25] commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4    \n[29] labeling_0.4.3    rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0    \n[33] grid_4.4.0        colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3   \n[37] base64enc_0.1-3   utf8_1.2.4        withr_3.0.2       timechange_0.3.0 \n[41] rmarkdown_2.29    ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[45] knitr_1.49        markdown_1.13     rlang_1.1.4       gridtext_0.1.5   \n[49] Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6        renv_1.0.3       \n[53] svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1         \n[57] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_20.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nWorld Bank { World Bank data in R } indicator = Urban population (% of total population) (“SP.URB.TOTL.IN.ZS”)\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_18.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_18.html",
    "title": "Relationship Between Peak Hour and Daily Traffic",
    "section": "",
    "text": "Figure 1: Scatter plot showing the relationship between peak hour traffic volume (x-axis) and annual average daily traffic (y-axis) across California counties. Los Angeles (dark blue) and Orange County (medium blue) data points generally show higher traffic volumes than other Bay Area counties (light blue). A trend line indicates daily traffic is approximately 10.5 times peak hour volume, with points clustering closely along this line.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codetraffic_volumnes_raw &lt;- read_csv(here::here(\n  'data/30DayChartChallenge/2025/Traffic_Volumes_AADT.csv')\n  ) |&gt;\n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(traffic_volumnes_raw)\nskim(traffic_volumnes_raw)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\nsimple_traffic &lt;- traffic_volumnes_raw |&gt;                   \n  select(county, route, back_peak_hour, back_aadt) |&gt;\n  filter(!is.na(back_peak_hour) & !is.na(back_aadt)) |&gt;\n  # Major counties with substantial data\n  filter(county %in% c(\"LA\", \"SD\", \"ORA\", \"SF\", \"SCL\", \"ALA\", \"CC\")) |&gt;\n  # Routes with higher traffic\n  filter(back_aadt &gt; 50000) |&gt;\n  # Remove extreme outliers (values beyond 3x the standard deviation)\n  filter(\n    back_peak_hour &lt; mean(back_peak_hour) + 3*sd(back_peak_hour),\n    back_aadt &lt; mean(back_aadt) + 3*sd(back_aadt)\n  ) |&gt;\n  mutate(\n    peak_ratio = back_peak_hour / (back_aadt/24),\n    county_group = case_when(\n      county == \"LA\" ~ \"Los Angeles\",\n      county == \"ORA\" ~ \"Orange\",\n      TRUE ~ \"Other Bay Area Counties\"\n    )\n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Los Angeles\" = \"#1D3557\",  \n    \"Orange\" = \"#457B9D\",      \n    \"Other Bay Area Counties\" = \"#A8DADC\" ,\n    NULL = \"#A8DADC40\"\n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Relationship Between Peak Hour and Daily Traffic\")\n\nsubtitle_text &lt;- str_glue(\"Major corridors in Los Angeles and Orange counties show higher traffic volumes than Bay Area routes\")\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 18,\n  source_text =  \"California Department of Transportation via data.gov\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# El País theme (at least my interpretation)\nel_pais_theme &lt;- function() {\n  theme_minimal(base_size = 14) +\n    theme(\n      # Typography\n      text = element_text(family = \"Helvetica\", color = \"#333333\"),\n      plot.title = element_text(size = rel(1), face = \"bold\", hjust = 0, margin = margin(b = 10)),\n      plot.subtitle = element_text(size = rel(0.79), color = \"#666666\", hjust = 0, margin = margin(b = 20)),\n      \n      # Axis styling\n      axis.title = element_text(size = rel(0.71), color = \"#666666\"),\n      axis.text = element_text(size = rel(0.64), color = \"#333333\"),\n      axis.line = element_line(color = \"black\", linewidth = 0.5),\n      \n      # Grid styling\n      panel.grid.major = element_line(color = \"#f0f0f0\", linewidth = 0.5),\n      panel.grid.minor = element_blank(),\n      \n      # Legend styling\n      legend.title = element_text(size = rel(0.71)),\n      legend.text = element_text(size = rel(0.64)),\n      legend.position = c(0.01, 1),\n      legend.justification = c(0, 1),\n      legend.background = element_rect(fill = \"white\", color = NA),\n      legend.key.size = unit(1.2, \"lines\"),\n      legend.margin = margin(t = 0, r = 10, b = 5, l = 0),\n      \n      # Margins & Others\n      plot.margin = margin(t = 20, r = 20, b = 15, l = 20),\n      plot.background = element_rect(fill = 'white', color = 'white'),\n      panel.background = element_rect(fill = 'white', color = 'white')\n    )\n}\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(simple_traffic, aes(x = back_peak_hour, y = back_aadt)) +\n  # Geoms\n  geom_point(\n    aes(color = county_group),\n    alpha = 0.8,\n    size = 2.5\n  ) +\n  geom_smooth(\n    method = \"lm\",\n    formula = y ~ x,\n    color = colors$palette[1],  \n    fill = colors$palette[5],  \n    size = 1,\n    fullrange = FALSE  # Only draw the trend line within the range of actual data\n  ) +\n  # Annotate\n  annotate(\n    \"text\",\n    x = max(simple_traffic$back_peak_hour) * 0.3,\n    y = max(simple_traffic$back_aadt) * 0.9,\n    label = \"Daily Traffic ≈ 10.5 × Peak Hour Volume\",\n    color = colors$palette[1], \n    fontface = \"italic\",\n    size = 3.5\n  ) +\n  # Scales\n  scale_color_manual(\n    values = colors$palette,\n    name = \"County\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x/1000, \"K\"),\n    name = \"Annual Average Daily Traffic (vehicles)\",\n    limits = c(0, max(simple_traffic$back_aadt) * 1.05)\n  ) +\n  scale_x_continuous(\n    labels = function(x) paste0(x/1000, \"K\"),\n    name = \"Peak Hour Traffic Volume (vehicles)\",\n    limits = c(0, max(simple_traffic$back_peak_hour) * 1.05)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n  # Theme\n  el_pais_theme() +\n  theme(\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 18, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 scales_1.3.0    skimr_2.1.5    \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 lattice_0.22-6   \n [5] tzdb_0.4.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6      \n[13] pacman_0.5.1      pkgconfig_2.0.3   Matrix_1.7-0      lifecycle_1.0.4  \n[17] farver_2.1.2      compiler_4.4.0    textshaping_0.4.0 munsell_0.5.1    \n[21] repr_1.1.7        codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1\n[25] yaml_2.3.10       crayon_1.5.3      pillar_1.9.0      magick_2.8.5     \n[29] nlme_3.1-164      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[33] stringi_1.8.4     labeling_0.4.3    splines_4.4.0     rsvg_2.6.1       \n[37] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[41] cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[45] withr_3.0.2       bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29   \n[49] bit_4.5.0         ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[53] knitr_1.49        markdown_1.13     mgcv_1.9-1        rlang_1.1.4      \n[57] gridtext_0.1.5    Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6       \n[61] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 vroom_1.6.5      \n[65] jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_18.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nCalifornia Annual Average Daily Traffic Volumes, Metadata Updated: November 27, 2024 data.gov\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_16.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_16.html",
    "title": "NBA 2023-2024: High Usage Players with Below-Average Efficiency",
    "section": "",
    "text": "Figure 1: A scatter plot showing NBA players’ True Shooting Percentage versus Usage Rate for the 2023-2024 season. Red dots highlight players with high usage but below-average efficiency (below 57%), labeled as the “Team Concern Area.” Six notable inefficient high-usage players are labeled, including Anthony Edwards and DeAaron Fox. Blue dots represent all other players. The visualization demonstrates the negative relationship between offensive responsibility and scoring efficiency.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with ggplot2\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get player stats for 2023-24 season using proper API call\nplayer_stats &lt;- nba_leaguedashplayerstats(\n  season = \"2023-24\", \n  season_type = \"Regular Season\"\n  )\n\n\n3. Examine the Data\n\nShow codeglimpse(player_stats)\nskim(player_stats)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Extract and clean the data frame\nplayer_data &lt;- player_stats$LeagueDashPlayerStats |&gt;\n  clean_names() |&gt;\n  # Convert to numeric\n  mutate(across(c(\n    gp, min, fgm, fga, fg3m, fg3a, ftm, fta, pts, tov\n    ), \n    as.numeric)) |&gt;\n  # Filter to players with significant minutes\n  filter(\n    gp &gt;= 40,  \n    min &gt;= 15  \n  ) |&gt;\n  # Calculate True Shooting Percentage\n  mutate(\n    ts_pct = pts / (2 * (fga + 0.44 * fta)) * 100,\n    # Calculate usage rate\n    usage_rate = 100 * (fga + 0.44 * fta + tov) / \n      (min/gp * 5),  # approximation based on available data\n    player_name = player_name\n  ) |&gt;\n  # Select relevant columns and calculate minutes per game\n  mutate(min_per_game = min / gp) |&gt;          \n  select(player_name, team_abbreviation, \n         usage_rate, ts_pct, min_per_game, min, gp) |&gt;\n  na.omit()\n\n# Calculate average TS% for reference\navg_ts &lt;- mean(player_data$ts_pct)\n\n# Identify players with high usage but below average efficiency\ninefficient_high_usage &lt;- player_data |&gt;\n  filter(\n    usage_rate &gt; median(usage_rate),  # Above median usage\n    ts_pct &lt; avg_ts                   # Below average efficiency\n  )\n\n# Select top players with highest usage or lowest efficiency for labeling\ninefficient_high_usage_labeled &lt;- inefficient_high_usage |&gt;\n  # Sort by a combined metric of high usage and low efficiency\n  arrange(desc(usage_rate - ts_pct)) |&gt;\n  # Take only top players\n  slice_head(n = 6)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"#5b9bd5\", \n    \"#e15759\"\n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"NBA 2023-2024: High Usage Players with Below-Average Efficiency\",\n                          width = 70) \n\nsubtitle_text &lt;- str_wrap(\"Highlighting the 'negative relationship' where high offensive responsibility doesn't translate to scoring efficiency\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 16,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"gray92\"),\n\n    # Legend elements\n    legend.position = \"top\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(player_data, aes(x = usage_rate, y = ts_pct)) +\n  # Geoms \n  geom_hline(                         # average TS%\n    yintercept = avg_ts, \n    linetype = \"dashed\",\n    color = \"gray60\", \n    alpha = 0.6\n    ) +\n  geom_point(aes(\n    size = min_per_game, \n    color = ts_pct &lt; avg_ts & usage_rate &gt; median(usage_rate)), \n    alpha = 0.3,\n    ) +\n  geom_point(                         # inefficient high-usage players\n    data = inefficient_high_usage, \n    aes(size = min_per_game),\n    color = \"red\", \n    alpha = 0.5\n    ) +\n  geom_text_repel(\n    data = inefficient_high_usage_labeled,\n    aes(label = player_name),\n    size = 2.5,\n    color = \"red\",\n    force = 10,\n    max.overlaps = 10,\n    segment.size = 0.2,\n    segment.alpha = 0.6,\n    seed = 123\n  ) +\n  # Scales\n  scale_color_manual(\n    values = colors$palette,\n    labels = c(\"Other Players\", \"Below Avg TS% & High Usage\")\n  ) +\n  scale_size_continuous(\n    name = \"Minutes Per Game\", \n    range = c(1, 6)\n    ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Usage Rate (%)\",\n    y = \"True Shooting Percentage (%)\",\n    color = \"Player Type\"\n  ) +\n  # Annotate \n  annotate(             # highlight high usage and below average TS area\n    \"rect\", \n    xmin = median(player_data$usage_rate),\n    xmax = max(player_data$usage_rate) + 1, \n    ymin = min(player_data$ts_pct) - 1, \n    ymax = avg_ts,\n    alpha = 0.08, \n    fill = \"red\"\n    ) + \n  annotate(\n    \"text\", \n    x = median(player_data$usage_rate) + (max(player_data$usage_rate) - median(player_data$usage_rate))/2, \n    y = avg_ts - 12,\n    label = \"Team Concern Area:\\nHigh Usage, Low Efficiency\",\n    color = \"red\", \n    fontface = \"bold\",\n    size = 3, \n    alpha = 0.8\n    ) +\n  # Legend\n  guides(\n    color = guide_legend(title.position = \"top\",ncol = 2),\n    size = guide_legend(title.position = \"top\", ncol = 3)\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.4),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 16, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggrepel_0.9.6   hoopR_2.1.0    \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      markdown_1.13      \n[67] gridtext_0.1.5      snakecase_0.11.1    renv_1.0.3         \n[70] Rcpp_1.0.13-1       svglite_2.1.3       xfun_0.49          \n[73] pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_16.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_14.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_14.html",
    "title": "Win Percentage by Player Combinations and Playstyle in 2023-2024 Season",
    "section": "",
    "text": "Figure 1: A lollipop chart showing NBA player combinations organized by playstyle groups (Offensive-Minded, Developing Chemistry, Two-Way Elite, and Defensive-Minded). Each horizontal line represents a player pair with team affiliations in parentheses, extending to points indicating their win percentage. The Offensive-Minded category tops the chart with the highest win rates (up to 90%), dominated by New York Knicks players. Colors differentiate the playstyle groups: yellow for Offensive-Minded, blue for Developing Chemistry, red for Two-Way Elite, and purple for Defensive-Minded. The visualization demonstrates which player relationships produce the most wins across different playing styles and teams.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n   tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  paletteer,      # Comprehensive Collection of Color Palettes\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get the lineup data\nlineups_2man &lt;- nba_leaguedashlineups(\n  season = \"2023-24\",\n  measure_type = \"Advanced\",\n  group_quantity = 2, # 2-player combinations\n  season_type = \"Regular Season\"\n)\n\nlineups_df &lt;- lineups_2man$Lineups\n\n\n3. Examine the Data\n\nShow codeglimpse(lineups_df)\nskim(lineups_df)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\nlineups_clean &lt;- lineups_df |&gt;\n  select(\n    player_combo = GROUP_NAME,\n    min = MIN,\n    net_rating = NET_RATING,\n    off_rating = OFF_RATING, \n    def_rating = DEF_RATING,\n    gp = GP,\n    w = W,\n    l = L,\n    win_pct = W_PCT\n  ) |&gt;\n  mutate(\n    across(c(min, net_rating, off_rating, def_rating, gp, w, l, win_pct), as.numeric),\n    win_loss_diff = w - l,\n    combo_effectiveness = (win_pct * 100) * (net_rating / 20) # Scale \n  ) |&gt;\n  # Filter for meaningful playing time\n  filter(min &gt;= 300) |&gt;\n  # Group player combinations based on their effectiveness\n  mutate(\n    playstyle_group = case_when(\n      off_rating &gt; median(off_rating) & def_rating &lt; median(def_rating) ~ \"Offensive-Minded\",\n      off_rating &lt; median(off_rating) & def_rating &gt; median(def_rating) ~ \"Defensive-Minded\",\n      off_rating &gt; median(off_rating) & def_rating &gt; median(def_rating) ~ \"Two-Way Elite\",\n      TRUE ~ \"Developing Chemistry\"\n    )\n  )\n\n# Top player combinations by effectiveness\ntop_combos &lt;- lineups_clean |&gt;\n  group_by(playstyle_group) |&gt;\n  arrange(desc(combo_effectiveness)) |&gt;\n  slice_max(order_by = combo_effectiveness, n = 8) |&gt;\n  ungroup()\n\n# Facet order (levels)\nplaystyle_order &lt;- top_combos |&gt;\n  group_by(playstyle_group) |&gt;\n  summarize(avg_win = mean(win_pct, na.rm = TRUE)) |&gt;\n  arrange(desc(avg_win)) |&gt;\n  pull(playstyle_group)\n\n# Housekeeping\nrm(lineups_2man)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(\n  palette = paletteer:::paletteer_d(\n    \"ggsci::default_aaas\",\n    type = 'discrete', \n    n = 4)\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Win Percentage by Player Combinations and Playstyle in 2023-2024 Season\",\n                          width = 60) \nsubtitle_text &lt;- str_wrap(\"Top-performing duos organized by their playing chemistry, with team affiliations\", \n                          width = 100)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 14,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.75)),\n\n    # Grid elements\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Strip\n    strip.text = element_text(family = fonts$text, color = colors$text, face = \"bold\", size = rel(0.92)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(top_combos,\n       aes(\n         x = win_pct * 100, \n         y = fct_reorder(player_combo, win_pct))\n) +\n  # Geom\n  geom_segment(aes(\n    x = 0,\n    xend = win_pct * 100,\n    y = fct_reorder(player_combo, win_pct),\n    yend = fct_reorder(player_combo, win_pct),\n    color = playstyle_group\n  ), \n  linewidth = 1, \n  alpha = 0.8\n  ) +\n  geom_point(aes(\n    color = playstyle_group), \n    size = 3.5\n  ) +\n  geom_text(aes(\n    label = sprintf(\"%.0f%%\", win_pct * 100)), \n    hjust = -0.5, size = 3\n  ) +\n  # Scales\n  scale_x_continuous(    \n    limits = c(0, 100)\n  ) +\n  scale_y_discrete() +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Win Rate (%)\",\n    y = NULL,\n    color = \"Playstyle\",\n  ) +\n  # Facets \n  facet_wrap(~ factor(\n    playstyle_group, levels = playstyle_order), \n    scales = \"free_y\", ncol = 1\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 5, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 14, \n  width = 8, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 paletteer_1.6.0 hoopR_2.1.0    \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     rematch2_2.1.2      codetools_0.2-20   \n[55] ps_1.8.1            stringi_1.8.4       gtable_0.3.6       \n[58] later_1.3.2         prismatic_1.1.2     munsell_0.5.1      \n[61] furrr_0.3.1         pillar_1.9.0        htmltools_0.5.8.1  \n[64] R6_2.5.1            textshaping_0.4.0   rprojroot_2.0.4    \n[67] evaluate_1.0.1      markdown_1.13       gridtext_0.1.5     \n[70] snakecase_0.11.1    renv_1.0.3          Rcpp_1.0.13-1      \n[73] svglite_2.1.3       xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_14.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_12.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_12.html",
    "title": "Traffic Volume Distribution Analysis Across California Counties",
    "section": "",
    "text": "Figure 1: A line graph showing Empirical Cumulative Distribution Functions (ECDF) of Annual Average Daily Traffic across ten California counties. The x-axis shows traffic volume from 100 to over 100,000 vehicles on a logarithmic scale. Horizontal dashed lines mark the 25th, 50th, and 75th percentiles. Urban counties like Los Angeles (LA) and Orange (ORA) show curves shifted right, indicating higher traffic volumes. In contrast, rural counties like Tulare (TUL) show curves shifted left, indicating lower traffic volumes.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  paletteer,      # Comprehensive Collection of Color Palettes\n  lubridate,      # Make Dealing with Dates a Little Easier\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codetraffic_volumnes_raw &lt;- read_csv(here::here(\n  'data/30DayChartChallenge/2025/Traffic_Volumes_AADT.csv')\n  ) |&gt;\n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(traffic_volumnes_raw)\nskim(traffic_volumnes_raw)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\ntraffic_volumes_tidy &lt;- traffic_volumnes_raw |&gt;        \n  select(objectid, district, route, county, location_description, \n         back_aadt, ahead_aadt) |&gt;\n  pivot_longer(\n    cols = c(back_aadt, ahead_aadt),\n    names_to = \"direction\",\n    values_to = \"aadt\"\n  ) |&gt;\n  mutate(\n    direction = case_when(\n      direction == \"back_aadt\" ~ \"Back\",\n      direction == \"ahead_aadt\" ~ \"Ahead\",\n      TRUE ~ direction\n    )\n  ) |&gt;\n  filter(!is.na(aadt))\n\n# County-level summaries\ncounty_traffic &lt;- traffic_volumes_tidy |&gt;\n  group_by(county) |&gt;\n  summarize(\n    count = n(),\n    median_aadt = median(aadt, na.rm = TRUE)\n  ) |&gt;\n  arrange(desc(count)) |&gt;\n  slice_head(n = 10)  # Top 10 counties \n\n# ECDF for top counties\ntop_counties &lt;- county_traffic$county\n\n# Data plot\necdf_data &lt;- traffic_volumes_tidy |&gt;\n  filter(county %in% top_counties)\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(\n  palette = paletteer::paletteer_d(\n    \"ggprism::prism_dark2\"\n    )\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Traffic Volume Distribution Analysis Across California Counties\",\n                          width = 50) \nsubtitle_text &lt;- str_wrap(\"Empirical Cumulative Distribution Function (ECDF) of Annual Average Daily Traffic\", \n                          width = 90)\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 12,\n  source_text =  \"California AADT via data.gov\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.68)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n \n    # Legend elements\n    legend.position = \"right\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ecdf_data |&gt;\n  ggplot(aes(x = aadt, color = county)) +\n  # Geoms\n  stat_ecdf(geom = \"step\", linewidth = 1) +\n  geom_hline(\n    yintercept = c(0.25, 0.5, 0.75), linetype = \"dashed\", \n    color = \"gray50\", alpha = 0.7\n    ) +\n  # Annotate\n  annotate(\n    \"text\", x = min(traffic_volumes_tidy$aadt, na.rm = TRUE), \n    y = c(0.26, 0.51, 0.76), \n    label = c(\"25th\", \"50th\", \"75th\"), \n    hjust = 0, size = 3, color = \"gray30\"\n    ) +\n  # Scales\n  scale_x_log10(labels = scales::comma) +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Annual Average Daily Traffic (log scale)\",\n    y = \"Cumulative Probability\",\n    color = \"County\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.9),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 5, b = 15)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 12, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 paletteer_1.6.0 scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rematch2_2.1.2    labeling_0.4.3   \n[33] rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0       \n[37] colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3  \n[41] utf8_1.2.4        withr_3.0.2       bit64_4.5.2       timechange_0.3.0 \n[45] rmarkdown_2.29    bit_4.5.0         ragg_1.3.3        hms_1.1.3        \n[49] evaluate_1.0.1    knitr_1.49        markdown_1.13     rlang_1.1.4      \n[53] gridtext_0.1.5    Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6       \n[57] renv_1.0.3        vroom_1.6.5       svglite_2.1.3     rstudioapi_0.17.1\n[61] jsonlite_1.8.9    R6_2.5.1          prismatic_1.1.2   systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_12.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nCalifornia Annual Average Daily Traffic Volumes, Metadata Updated: November 27, 2024 data.gov\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_10.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_10.html",
    "title": "Distribution of Offensive Rebounding Specialization by Position (2024 NBA Season)",
    "section": "",
    "text": "Figure 1: Ridge plot showing the distribution of offensive rebounding ratios across NBA positions. Multi-modal patterns are visible, with annotations highlighting different player types: Defensive-focused and Balanced Power Forwards, Perimeter and Inside Forwards, and Traditional and Offensive-focused Centers. Centers show highest ratios around 0.4, while guards have lower ratios centered around 0.2.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\ntidyverse,      # Easily Install and Load the 'Tidyverse'\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  ggridges,       # Ridgeline Plots in 'ggplot2'  \n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get NBA player stats for 2024 season\nnba_players_2024 &lt;- load_nba_player_box(seasons = 2024)\n\n\n3. Examine the Data\n\nShow codeglimpse(nba_players_2024)\nskim(nba_players_2024)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Season stats\nplayer_season_stats &lt;- nba_players_2024 |&gt;\n  group_by(athlete_id, athlete_display_name, athlete_position_abbreviation) |&gt;\n  summarize(\n    games_played = n(),\n    across(\n      c(minutes, points, field_goals_attempted, field_goals_made,\n        three_point_field_goals_attempted, three_point_field_goals_made,\n        free_throws_attempted, free_throws_made, offensive_rebounds,\n        defensive_rebounds, rebounds, assists, turnovers, steals, blocks),\n      ~ sum(.x, na.rm = TRUE),\n      .names = \"total_{.col}\"\n    ),\n    .groups = \"drop\"\n  )\n\n# Players stats\nplayers_stats &lt;- player_season_stats |&gt;\n  filter(total_minutes &gt; 0, games_played &gt;= 10) |&gt;\n  mutate(\n    # metrics\n    min_per_game = total_minutes / games_played,\n    three_pt_rate = total_three_point_field_goals_attempted / total_minutes,\n    \n    # Free throw rate (FT attempts per minute)\n    ft_rate = total_free_throws_attempted / total_minutes,\n    \n    # Offensive rebounding ratio (percentage of total rebounds that are offensive)\n    orb_ratio = total_offensive_rebounds / (total_offensive_rebounds + total_defensive_rebounds + 0.001),\n    \n    # Shooting distance preference (proxy using 3PT to total FG ratio)\n    three_pt_preference = total_three_point_field_goals_attempted / (total_field_goals_attempted + 0.001)\n  ) |&gt;\n  filter(min_per_game &gt;= 10)\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(\n  palette = c(\"#3182bd\", \"Positive Impact\" = \"#333333\")  \n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Distribution of Offensive Rebounding Specialization by Position (2024 NBA Season)\",\n                          width = 60) \nsubtitle_text &lt;- str_wrap(\"Offensive rebounds as a proportion of total rebounds - Notice the multi-modal patterns\", \n                          width = 100)\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 10,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.68)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(), \n \n    # Legend elements\n    legend.position = \"top\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(players_stats, aes(x = orb_ratio, y = athlete_position_abbreviation)) +\n  # Geoms\n  geom_density_ridges(alpha = 0.7, scale = 1.2, rel_min_height = 0.01, fill = colors$palette[1]) +\n  # Annotation\n  annotate(\"text\", x = 0.25, y = 4.4, label = \"Defensive-focused PFs\", size = 3.5, fontface = \"italic\", color = colors$palette[2]) +\n  annotate(\"text\", x = 0.35, y = 4.4, label = \"Balanced PFs\", size = 3.5, fontface = \"italic\", color = colors$palette[2]) +\n  annotate(\"segment\", x = 0.25, xend = 0.25, y = 4.2, yend = 4, arrow = arrow(length = unit(0.2, \"cm\")), color = colors$palette[2]) +\n  annotate(\"segment\", x = 0.35, xend = 0.35, y = 4.2, yend = 4, arrow = arrow(length = unit(0.2, \"cm\")), color = colors$palette[2]) +\n  \n  annotate(\"text\", x = 0.20, y = 2.4, label = \"Perimeter Fs\", size = 3.5, fontface = \"italic\", color = colors$palette[2]) +\n  annotate(\"text\", x = 0.40, y = 2.4, label = \"Inside Fs\", size = 3.5, fontface = \"italic\", color = colors$palette[2]) +\n  annotate(\"segment\", x = 0.20, xend = 0.20, y = 2.2, yend = 2, arrow = arrow(length = unit(0.2, \"cm\")), color = colors$palette[2]) +\n  annotate(\"segment\", x = 0.40, xend = 0.40, y = 2.2, yend = 2, arrow = arrow(length = unit(0.2, \"cm\")), color = colors$palette[2]) +\n  \n  annotate(\"text\", x = 0.35, y = 1.4, label = \"Traditional Cs\", size = 3.5, fontface = \"italic\", color = colors$palette[2]) +\n  annotate(\"text\", x = 0.48, y = 1.4, label = \"Offensive-focused Cs\", size = 3.5, fontface = \"italic\", color = colors$palette[2]) +\n  annotate(\"segment\", x = 0.35, xend = 0.35, y = 1.2, yend = 1, arrow = arrow(length = unit(0.2, \"cm\")), color = colors$palette[2]) +\n  annotate(\"segment\", x = 0.48, xend = 0.47, y = 1.2, yend = 1, arrow = arrow(length = unit(0.2, \"cm\")), color = colors$palette[2]) +\n  # Scales\n  scale_x_continuous(\n    limits = c(0, 0.6), \n    breaks = seq(0, 0.6, by = 0.1)\n    ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Offensive Rebounding Ratio\",\n    y = \"Position\"\n    ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.9),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(1),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 10, \n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggridges_0.5.6  hoopR_2.1.0    \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       progressr_0.15.1    globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      markdown_1.13      \n[67] gridtext_0.1.5      snakecase_0.11.1    renv_1.0.3         \n[70] Rcpp_1.0.13-1       svglite_2.1.3       xfun_0.49          \n[73] pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_10.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_08.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_08.html",
    "title": "Distribution of Points Per Game: Starters vs. Bench Players",
    "section": "",
    "text": "Figure 1: A histogram showing the distribution of points per game for NBA players in the 2023-24 season, comparing starters versus bench players. Bench players (orange bars) are concentrated at lower scoring ranges with a mean of 5.3 PPG, while starters (blue bars) show a broader distribution with higher scoring averages and a mean of 14.5 PPG. Vertical dashed lines indicate the mean values for each group.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\ntidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codenba_players_2024 &lt;- load_nba_player_box(seasons = 2024)\n\n\n3. Examine the Data\n\nShow codeglimpse(nba_players_2024)\nskim(nba_players_2024)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Add starter status  \nplayer_ppg_role &lt;- nba_players_2024 |&gt;\n  mutate(starter = ifelse(starter, \"Starter\", \"Bench\")) |&gt;\n  summarise(\n    ppg = mean(points, na.rm = TRUE),\n    games_played = n(),\n    .by = c(athlete_display_name, starter)\n  ) |&gt;\n  filter(games_played &gt;= 10)\n\n# Calculate mean PPG for each role\nrole_means &lt;- player_ppg_role |&gt;\n  summarise(\n    mean_ppg = mean(ppg, na.rm = TRUE), \n    .by = starter\n    )\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(\n  palette = c(\"Starter\" = \"#1F77B4\", \"Bench\" = \"#FF7F0E\")\n  )\n\ncolors2 &lt;- get_theme_colors(\n  palette = c(\"Starter\" = \"#0D3B66\", \"Bench\" = \"#C1292E\")\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Distribution of Points Per Game: Starters vs. Bench Players\") \nsubtitle_text &lt;- str_glue(\"Players with at least 10 games played in the 2023-24 NBA Season\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 08,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    # panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"inside\",\n    legend.position.inside = c(0.95, 0.95),\n    legend.justification = c(1, 1),\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(player_ppg_role, aes(x = ppg, fill = starter)) +\n  # Geoms\n  geom_histogram(binwidth = 1.5, position = \"identity\", alpha = 0.7) +\n  geom_vline(\n    data = role_means, \n    aes(xintercept = mean_ppg, color = starter),\n    linetype = \"dashed\", linewidth = 0.5, show.legend = FALSE\n    ) +\n  # Annotate\n  annotate(\n    \"text\", \n    x = role_means$mean_ppg[role_means$starter == \"Starter\"] + 4.2,\n    y = max(table(cut(player_ppg_role$ppg, breaks = seq(0, 40, by = 1.5)))) * 0.9 ,\n    label = paste0(\"Starter Mean: \", round(role_means$mean_ppg[role_means$starter == \"Starter\"], 1), \" PPG\"),\n    color = colors2$palette[1],\n    size = 3.2, \n    alpha = 0.8,\n    fontface = \"bold\"\n  ) +\n  annotate(\n    \"text\", \n    x = role_means$mean_ppg[role_means$starter == \"Bench\"] + 4, \n    y = max(table(cut(player_ppg_role$ppg, breaks = seq(0, 40, by = 1.5)))) * 1,\n    label = paste0(\"Bench Mean: \", round(role_means$mean_ppg[role_means$starter == \"Bench\"], 1), \" PPG\"),\n    color = colors2$palette[2],\n    size = 3.2, \n    alpha = 0.8,\n    fontface = \"bold\"\n    ) +\n  # Scales\n  scale_fill_manual(values = colors$palette) +\n  scale_color_manual(values = colors2$palette) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Points Per Game\",\n    y = \"Number of Players\",\n    fill = \"Role\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.5),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(1),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 08, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 hoopR_2.1.0     scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       progressr_0.15.1   \n[31] globals_0.16.3      cli_3.6.3           rmarkdown_2.29     \n[34] ragg_1.3.3          generics_0.1.3      RcppParallel_5.1.10\n[37] rstudioapi_0.17.1   httr_1.4.7          tzdb_0.4.0         \n[40] commonmark_1.9.2    chromote_0.4.0      rvest_1.0.4        \n[43] parallel_4.4.0      base64enc_0.1-3     vctrs_0.6.5        \n[46] jsonlite_1.8.9      hms_1.1.3           listenv_0.9.1      \n[49] systemfonts_1.1.0   magick_2.8.5        glue_1.8.0         \n[52] parallelly_1.43.0   gifski_1.32.0-1     codetools_0.2-20   \n[55] ps_1.8.1            stringi_1.8.4       gtable_0.3.6       \n[58] later_1.3.2         munsell_0.5.1       furrr_0.3.1        \n[61] pillar_1.9.0        htmltools_0.5.8.1   R6_2.5.1           \n[64] textshaping_0.4.0   rprojroot_2.0.4     evaluate_1.0.1     \n[67] markdown_1.13       gridtext_0.1.5      snakecase_0.11.1   \n[70] renv_1.0.3          Rcpp_1.0.13-1       svglite_2.1.3      \n[73] xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_08.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_06.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_06.html",
    "title": "Comparison of NBA Stars’ Shooting Efficiency (2023-2024)",
    "section": "",
    "text": "Figure 1: A Florence Nightingale-inspired rose diagram comparing shooting efficiency metrics (Field Goal %, 3-Point %, Free Throw %, and True Shooting %) among three NBA stars: Joel Embiid (red), Nikola Jokic (blue), and Stephen Curry (teal). The diagram highlights Curry’s superior free throw percentage (92.3%), Jokic’s leading field goal percentage (57.8%) and true shooting percentage (64.7%), and Curry’s top 3-point percentage (40.6%).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with ggplot2\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 6,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get player stats for the 2023-2024 NBA season\nnba_players &lt;- load_nba_player_box(seasons = 2024)\n\n\n3. Examine the Data\n\nShow codeglimpse(nba_players)\nskim(nba_players)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Select our 3 players \nselected_players &lt;- c(\"Joel Embiid\", \"Nikola Jokic\", \"Stephen Curry\")\n\n# Calculate player stats\nplayer_stats &lt;- nba_players |&gt;\n  filter(athlete_display_name %in% selected_players) |&gt;\n  group_by(athlete_display_name) |&gt;\n  summarize(\n    games = n(),\n    across(\n      .cols = c(\n        field_goals_made, field_goals_attempted,\n        three_point_field_goals_made, three_point_field_goals_attempted,\n        free_throws_made, free_throws_attempted,\n        points\n      ),\n      .fns = ~ sum(.x, na.rm = TRUE),\n      .names = \"{.col}_sum\"\n    ),\n    fg_pct = field_goals_made_sum / field_goals_attempted_sum,\n    three_pct = three_point_field_goals_made_sum / three_point_field_goals_attempted_sum,\n    ft_pct = free_throws_made_sum / free_throws_attempted_sum,\n    total_pts = points_sum\n  ) |&gt;\n  mutate(\n    true_shooting = total_pts / (2 * (field_goals_attempted_sum + 0.44 * free_throws_attempted_sum))\n  ) |&gt; \n  select(athlete_display_name, fg_pct, three_pct, ft_pct, true_shooting)\n\n# rose diagram data\nnightingale_data &lt;- player_stats |&gt;\n  pivot_longer(\n    cols = -athlete_display_name,\n    names_to = \"stat\",\n    values_to = \"value\"\n  ) |&gt;\n  mutate(\n    stat_label = case_when(\n      stat == \"fg_pct\" ~ \"Field Goal %\",\n      stat == \"three_pct\" ~ \"3-Point %\",\n      stat == \"ft_pct\" ~ \"Free Throw %\",\n      stat == \"true_shooting\" ~ \"True Shooting %\"\n    ),\n    # Set factor levels to control order\n    stat_label = factor(\n      stat_label, \n      levels = c(\"Field Goal %\", \"3-Point %\", \"Free Throw %\", \"True Shooting %\")\n      )\n  )\n\nlabel_data &lt;- nightingale_data |&gt;  \n  filter(\n    (athlete_display_name == \"Nikola Jokic\" & stat_label == \"Field Goal %\") |\n      (athlete_display_name == \"Nikola Jokic\" & stat_label == \"True Shooting %\") |\n      (athlete_display_name == \"Stephen Curry\" & stat_label == \"3-Point %\") |\n      (athlete_display_name == \"Stephen Curry\" & stat_label == \"Free Throw %\")\n  ) |&gt;\n  mutate(\n    # Format percentage for label\n    label = paste0(round(value * 100, 1), \"%\")\n  )\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette = c(\n  \"Joel Embiid\" = \"#BF212E\",     \n  \"Nikola Jokic\" = \"#1D3E85\",    \n  \"Stephen Curry\" = \"#008080\"   \n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Comparison of NBA Stars' Shooting Efficiency (2023-2024)\", \n                          width = 50) \nsubtitle_text &lt;- str_wrap(\"Inspired by Florence Nightingale's 1858 rose diagrams that revolutionized statistical visualization\",\n                          width = 80)\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 06,\n  source_text =  \"ESPN via { hoopR } package\"  \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, face = \"italic\", color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8),\n                              hjust = 1, vjust = 0.95, angle = 0),\n    axis.title.x = element_blank(),\n    \n    axis.text.x = element_text(color = colors$text, face = \"bold\", size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.57)),\n\n    # Grid elements\n    panel.grid.major = element_line(color = \"gray85\", linewidth = 0.25),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"bottom\",\n    legend.title = element_text(family = fonts$text, face = \"bold\", size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot() +\n  # Geoms\n  geom_col(data = nightingale_data, \n           aes(x = stat_label, y = value, fill = athlete_display_name),\n           position = position_dodge(width = 0.9), width = 0.8) +\n  # Annotate\n  annotate(  # Nikola Jokic FG% label\n    \"text\",  \n    x = 1, \n    y = 0.61, \n    label = \"57.8%\", \n    hjust = 0, \n    size = 3, \n    fontface = \"bold\", \n    color = colors$palette[2]\n    ) +\n  annotate( # Stephen Curry 3PT% label\n    \"text\", \n    x = 2, \n    y = 0.6, \n    label = \"40.6%\", \n    hjust = 2.2, \n    vjust = 1, \n    size = 3, \n    fontface = \"bold\",\n    color = colors$palette[3]\n    ) +\n  annotate( # Stephen Curry FT% label\n    \"text\", \n    x = 3, \n    y = 0.96, \n    label = \"92.3%\", \n    hjust = 2.5, \n    vjust = -8, \n    size = 3, \n    fontface = \"bold\", \n    color = colors$palette[3]\n    ) +\n  annotate( # Nikola Jokic TS% label\n    \"text\", \n    x = 4, \n    y = 0.68, \n    label = \"64.7%\", \n    hjust = 1, \n    size = 3, \n    fontface = \"bold\", \n    color = colors$palette[2]\n    ) +\n  # Scales\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = c(0, 0.25, 0.50, 0.75)\n  ) +\n  scale_fill_manual(\n    values = colors$palette\n  ) +\n  coord_polar(clip = 'off') +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = NULL,\n    fill = \"Player\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.5),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.8),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 15, b = 5)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 06, \n  width = 06, \n  height = 08\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggrepel_0.9.6   hoopR_2.1.0    \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       progressr_0.15.1    globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      markdown_1.13      \n[67] gridtext_0.1.5      snakecase_0.11.1    renv_1.0.3         \n[70] Rcpp_1.0.13-1       svglite_2.1.3       xfun_0.49          \n[73] pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_06.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_04.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_04.html",
    "title": "Preserving Public Health Knowledge: CDC Dataset Categories at Risk",
    "section": "",
    "text": "Figure 1: Treemap visualization titled ‘Preserving Public Health Knowledge: CDC Dataset Categories at Risk’ showing the distribution of archived CDC datasets by category. The largest categories are NNDSS (293 datasets, 23.3%) and NCHS (184 datasets, 14.6%), which together represent over a third of all preserved data. Other significant categories include Vaccinations (78 datasets), Public Health Surveillance (68 datasets), and 500 Cities & Places (57 datasets). Smaller categories include Policy, Funding, and Health Statistics. A color gradient from light orange to dark purple indicates dataset size from smallest to largest.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  treemapify,     # Draw Treemaps in 'ggplot2'\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 6) \n\ncdc_datasets &lt;- tt$cdc_datasets |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(cdc_datasets)\nskim(cdc_datasets)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Count datasets by category\ncategory_counts &lt;- cdc_datasets |&gt;\n  count(category) |&gt;    \n  arrange(desc(n)) |&gt;\n  filter(!is.na(category)) |&gt;\n  mutate(\n    category = if_else(is.na(category), \"Uncategorized\", category),\n    percent = n / sum(n) * 100,\n    label = paste0(category, \"\\n\", n, \" (\", round(percent, 1), \"%)\")\n    )\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette =  colorRampPalette(c(\"#FFAF7B\", \"#D76D77\", \"#3A1C71\", \"black\"))(30)\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Preserving Public Health Knowledge: CDC Dataset Categories at Risk\") \nsubtitle_text &lt;- str_glue(\"Large repositories like NNDSS and NCHS contain essential health surveillance data being backed up\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 04,\n  source_text =  \"archive.org\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8),\n                              hjust = 1, vjust = 0.5, angle = 90),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = ggtext::element_markdown(),\n  \n    # Grid elements\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"right\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 15, b = 10, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(category_counts, aes(area = n, fill = n, label = label)) +\n  # Geoms\n  geom_treemap() +\n  geom_treemap_text(\n    colour = \"white\", \n    place = \"centre\", \n    grow = TRUE,\n    min.size = 4,         \n    fontface = \"bold\",    \n    family = \"sans\"       \n  ) +\n  # Scales\n  scale_fill_gradientn(\n    colors = colors$palette, \n    trans = \"log10\",\n    labels = comma_format(),  \n    breaks = c(1, 10, 100, 300),  \n    guide = guide_colorbar(\n      direction = \"vertical\",\n      barwidth = 1,\n      barheight = 10,\n      title.position = \"top\",\n      title.hjust = 0.5\n    )\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    fill = \"Number of datasets\",\n    caption = caption_text\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.7),\n      family = fonts$title,\n      face  = \"bold\",\n      color = colors$title,\n      margin  = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size  = rel(1),\n      family  = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin  = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size  = rel(.65),\n      family  = fonts$caption,\n      color = colors$caption,\n      lineheight  = 0.65,\n      hjust = 0.5,\n      halign  = 0.5,\n      margin  = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 04, \n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1       camcorder_0.1.0  treemapify_2.5.6 scales_1.3.0    \n [5] skimr_2.1.5      janitor_2.2.0    showtext_0.9-7   showtextdb_3.0  \n [9] sysfonts_0.8.9   ggtext_0.1.2     lubridate_1.9.3  forcats_1.0.0   \n[13] stringr_1.5.1    dplyr_1.1.4      purrr_1.0.2      readr_2.1.5     \n[17] tidyr_1.3.1      tibble_3.2.1     ggplot2_3.5.1    tidyverse_2.0.0 \n\nloaded via a namespace (and not attached):\n [1] ggfittext_0.10.2   gtable_0.3.6       httr2_1.0.6        xfun_0.49         \n [5] htmlwidgets_1.6.4  gh_1.4.1           tzdb_0.4.0         vctrs_0.6.5       \n [9] tools_4.4.0        generics_0.1.3     parallel_4.4.0     curl_6.0.0        \n[13] gifski_1.32.0-1    fansi_1.0.6        pacman_0.5.1       pkgconfig_2.0.3   \n[17] lifecycle_1.0.4    farver_2.1.2       compiler_4.4.0     textshaping_0.4.0 \n[21] munsell_0.5.1      repr_1.1.7         codetools_0.2-20   snakecase_0.11.1  \n[25] htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3       pillar_1.9.0      \n[29] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[33] stringi_1.8.4      rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] grid_4.4.0         colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3    \n[41] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3    \n[45] bit64_4.5.2        timechange_0.3.0   tidytuesdayR_1.1.2 rmarkdown_2.29    \n[49] gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3         hms_1.1.3         \n[53] evaluate_1.0.1     knitr_1.49         markdown_1.13      rlang_1.1.4       \n[57] gridtext_0.1.5     Rcpp_1.0.13-1      glue_1.8.0         xml2_1.3.6        \n[61] renv_1.0.3         vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1 \n[65] jsonlite_1.8.9     R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_04.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 week 06: CDC Datasets\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_02.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_02.html",
    "title": "Digital Divide Narrows: Internet Adoption Across Generations",
    "section": "",
    "text": "Figure 1: A slope chart showing internet adoption rates across age groups from 2000 to 2024. The 65+ age group shows the steepest slope, rising from 14% to 90%, dramatically narrowing the gap with younger groups. Other age groups (18-29, 30-49, and 50-64) all reached nearly 99% adoption by 2024, despite starting at different levels (70%, 61%, and 46% respectively).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codeinternet_raw &lt;- read_delim(\n  here::here('data/30DayChartChallenge/2025/internet_use_by_age_data_2024-11-13.csv'),\n  skip = 3) |&gt; clean_names() |&gt; \n    head(-2)\n\n\n3. Examine the Data\n\nShow codeglimpse(internet_raw)\nskim(internet_raw)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\ninternet_clean &lt;- internet_raw |&gt;\n  # Remove whitespace from year and convert to numeric\n  mutate(\n    year = as.numeric(year),\n    across(\n      c(ages_18_29, x30_49, x50_64, x65),\n      ~ as.numeric(str_remove(., \"%\")) / 100\n    )\n  ) |&gt;\n  rename(\n    \"18-29\" = ages_18_29,\n    \"30-49\" = x30_49,\n    \"50-64\" = x50_64,\n    \"65+\" = x65\n  ) |&gt;\n  pivot_longer(\n    cols = c(\"18-29\", \"30-49\", \"50-64\", \"65+\"),\n    names_to = \"age_group\",\n    values_to = \"internet_usage\"\n  ) |&gt;\n  mutate(\n    age_group = factor(age_group,\n                       levels = c(\"18-29\", \"30-49\", \"50-64\", \"65+\")\n    )\n  ) |&gt;\n  filter(year %in% c(2000, 2024))\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette = c(\n  \"18-29\" = \"gray\", \n  \"30-49\" = \"gray\", \n  \"50-64\" = \"gray\", \n  \"65+\" = \"#8856a7\"      \n  ))  \n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Digital Divide Narrows: Internet Adoption Across Generations\") \nsubtitle_text &lt;- str_glue(\"The __65+ age group__ showed the steepest adoption curve, dramatically narrowing what was&lt;br&gt; \n                          once a 56-point divide\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 02,\n  source_text =  \"Pew Research Center\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8),\n                              hjust = 1, vjust = 0.5, angle = 90),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = ggtext::element_markdown(),\n  \n    # Grid elements\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"top\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 20, r = 20, b = 20, l = 60),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(data = internet_clean) +\n  # Geoms\n  geom_hline(\n    yintercept = seq(0, 1, 0.25), \n    color = \"gray90\", \n    linetype = \"dashed\"\n  ) +\n  geom_vline(\n    xintercept = c(2000, 2024),\n    color = '#333333',\n    linewidth = 0.4\n  ) +\n  geom_line(                            # gray lines\n    data = internet_clean %&gt;% filter(age_group != \"65+\"), \n    aes(x = year, y = internet_usage, group = age_group),\n    color = \"gray80\", \n    linewidth = 0.4\n  ) + \n  geom_line(                           # selected line\n    data = internet_clean %&gt;% filter(age_group == \"65+\"), \n    aes(x = year, y = internet_usage, group = age_group, color = age_group),\n    linewidth = 1.0\n  ) +\n  geom_point(\n    aes(x = year, y = internet_usage, color = age_group),\n    size = 2\n  ) +\n  geom_text(                           # 2000 labels         \n    data = internet_clean %&gt;% filter(year == 2000),\n    aes(x = year, y = internet_usage, \n        label = paste0(age_group, \": \", percent(internet_usage, accuracy = 1)),\n        color = age_group),\n    hjust = 1.2,\n    fontface = \"bold\",\n    size = 4\n  ) +\n  geom_text_repel(                     # 2024 labels \n    data = internet_clean %&gt;% filter(year == 2024),\n    aes(x = year, y = internet_usage, \n        label = paste0(age_group, \": \", percent(internet_usage, accuracy = 1)),\n        color = age_group),\n    hjust = 0,\n    direction = \"y\",\n    nudge_x = 1,\n    segment.size = 0.2,\n    segment.color = \"gray70\",\n    min.segment.length = 0,\n    fontface = \"bold\",\n    size = 3.5,\n    box.padding = 0.4,\n    point.padding = 0.1,\n    force = 2\n  ) +\n  annotate(                           # note\n    \"text\", \n    x = 2012, \n    y = 0.2, \n    label = \"65+ group shows\\nthe steepest slope\",\n    color = colors$palette[4], \n    fontface = \"bold\", \n    size = 4.5,\n    alpha = 0.8\n  ) +\n  # Scales\n  scale_y_continuous(\n    limits = c(0, 1.05),\n    breaks = c(0, 0.25, 0.50, 0.75, 1.00),\n    labels = scales::label_percent(\n      suffix = '&lt;span style=\"font-size:6pt;\"&gt; %&lt;/span&gt;'\n    )\n  ) +\n  scale_x_continuous(\n    breaks = c(2000, 2024),\n    labels = c(\"2000\", \"2024\"),\n    limits = c(1992, 2032),\n    expand = c(0, 0),  \n  ) +\n  scale_color_manual(\n    values = colors$palette, \n    guide = \"none\"\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Percentage of Adults Using the Internet\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size          = rel(1.75),\n      family        = fonts$title,\n      face          = \"bold\",\n      color         = colors$title,\n      margin        = margin(t = 5, b = 5)\n    ),\n    plot.subtitle   = element_markdown(\n      size          = rel(1),\n      family        = fonts$subtitle,\n      color         = colors$subtitle,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 20)\n    ),\n    plot.caption    = element_markdown(\n      size          = rel(.65),\n      family        = fonts$caption,\n      color         = colors$caption,\n      lineheight    = 0.65,\n      hjust         = 0.5,\n      halign        = 0.5,\n      margin        = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 02, \n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggrepel_0.9.6   scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.3        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29    bit_4.5.0        \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] glue_1.8.0        xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[57] rstudioapi_0.17.1 vroom_1.6.5       jsonlite_1.8.9    R6_2.5.1         \n[61] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_02.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nInternet, Broadband Fact Sheet: Fact Sheets: Tech Adoption Trends, Pew Research Center, published November 13, 2024 Internet use by age\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "brand-test/test-website.html",
    "href": "brand-test/test-website.html",
    "title": "Brand Test - Website",
    "section": "",
    "text": "Figure 1: A four-panel visualization of U.S. Border Encounters (2020-2024). The top left shows increasing trends in encounters across demographic groups, with Single Adults being the highest. The top right displays a U.S. map highlighting border states with Texas in orange. The bottom left compares Title 8 vs Title 42 processing by demographic group. The bottom right shows seasonal patterns of encounters by country, with Mexico showing consistently higher numbers."
  },
  {
    "objectID": "brand-test/test-website.html#heading-level-2",
    "href": "brand-test/test-website.html#heading-level-2",
    "title": "Brand Test - Website",
    "section": "Heading Level 2",
    "text": "Heading Level 2\n\nHeading Level 3\nRegular paragraph with bold and italic text. Here’s a link to test the styling.\n\n\nCode\nlibrary(ggplot2)\nmtcars  |&gt;  \n  ggplot(aes(mpg, wt, color = factor(cyl))) +\n  geom_point() + \n  theme_minimal()+\n  labs(title = \"here is a title\",\n       subtitle = \"here is asubtitle\",\n       caption = \"here is a caption\")\n\n\n\n\n\n\n\n\n\n\nThis is a blockquote to test styling"
  },
  {
    "objectID": "brand-test/test-presentation.html#slide-one",
    "href": "brand-test/test-presentation.html#slide-one",
    "title": "Brand Test - Presentation",
    "section": "Slide One",
    "text": "Slide One\n\nTesting bullet points\nWith different elements\nAnd formatting"
  },
  {
    "objectID": "brand-test/test-presentation.html#code-slide",
    "href": "brand-test/test-presentation.html#code-slide",
    "title": "Brand Test - Presentation",
    "section": "Code Slide",
    "text": "Code Slide\ndef hello():\n    print(\"Testing code formatting\")"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_01.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_01.html",
    "title": "Citrus: The Only Effective Treatment for Scurvy (1757)",
    "section": "",
    "text": "Figure 1: A diverging stacked bar chart comparing scurvy treatments from 1757. Only citrus shows 100% of patients with improvement (50% none, 50% mild symptoms), while all other treatments show moderate to severe symptoms. Dilute sulfuric acid shows 50% mild improvement. The chart demonstrates why citrus was the only effective treatment for scurvy.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,    # Easily Install and Load the 'Tidyverse'\n  ggtext,       # Improved Text Rendering Support for 'ggplot2'\n  showtext,     # Using Fonts More Easily in R Graphs\n  janitor,      # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,        # Compact and Flexible Summaries of Data\n  scales,       # Scale Functions for Visualization\n  lubridate,    # Make Dealing with Dates a Little Easier\n  camcorder     # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2023, week = 30) \n\nscurvy &lt;- tt$scurvy |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(scurvy)\nskim(scurvy)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Define constants upfront\nsymptom_names &lt;- c(\n  gum_rot_d6 = \"Gum Rot\",\n  skin_sores_d6 = \"Skin Sores\", \n  weakness_of_the_knees_d6 = \"Knee Weakness\",\n  lassitude_d6 = \"Lassitude\"\n)\n\ntreatment_names &lt;- c(\n  dilute_sulfuric_acid = \"Dilute Sulfuric Acid\",\n  purgative_mixture = \"Purgative Mixture\",\n  sea_water = \"Sea Water\"\n)\n\n# Treatment effectiveness order \ntreatment_order &lt;- c(\n  \"Citrus\", \"Cider\", \"Dilute Sulfuric Acid\", \n  \"Vinegar\", \"Sea Water\", \"Purgative Mixture\"\n)\n\n# Process scurvy data \ncomplete_diverging_data &lt;- scurvy |&gt;\n  # Convert Likert scales to ordered factors\n  mutate(across(\n    names(symptom_names),\n    \\(x) factor(\n      case_when(\n        str_detect(x, \"0_none\") ~ \"None (0)\",\n        str_detect(x, \"1_mild\") ~ \"Mild (1)\",\n        str_detect(x, \"2_moderate\") ~ \"Moderate (2)\",\n        str_detect(x, \"3_severe\") ~ \"Severe (3)\"\n      ),\n      levels = c(\"None (0)\", \"Mild (1)\", \"Moderate (2)\", \"Severe (3)\")\n    )\n  )) |&gt;\n  # Clean treatment names\n  mutate(\n    treatment_clean = case_when(\n      treatment %in% names(treatment_names) ~ treatment_names[treatment],\n      TRUE ~ str_to_title(treatment)\n    )\n  ) |&gt;\n  # Convert to long format\n  pivot_longer(\n    cols = names(symptom_names),\n    names_to = \"symptom\",\n    values_to = \"severity\"\n  ) |&gt;\n  # Map symptom codes to readable names\n  mutate(symptom = symptom_names[symptom]) |&gt;\n  # Calculate proportions\n  group_by(treatment_clean, symptom) |&gt;\n  count(severity) |&gt;\n  mutate(proportion = n / sum(n)) |&gt;\n  ungroup() |&gt;\n  # Create diverging data structure\n  mutate(\n    position = if_else(\n      severity %in% c(\"None (0)\", \"Mild (1)\"), \n      \"Improved\", \n      \"Problem\"\n    ),\n    plot_proportion = if_else(position == \"Improved\", -proportion, proportion),\n    severity_ordered = factor(\n      severity, \n      levels = c(\"None (0)\", \"Mild (1)\", \"Moderate (2)\", \"Severe (3)\")\n    )\n  ) |&gt;\n  # Ensure all combinations exist (handle missing values)\n  complete(\n    treatment_clean, \n    symptom, \n    severity_ordered,\n    fill = list(proportion = 0, plot_proportion = 0, n = 0)\n  ) |&gt;\n  # Recreate position for new rows\n  mutate(\n    position = case_when(\n      severity_ordered %in% c(\"None (0)\", \"Mild (1)\") ~ \"Improved\",\n      severity_ordered %in% c(\"Moderate (2)\", \"Severe (3)\") ~ \"Problem\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette = c(\n  \"None (0)\" = \"#1d4e89\",       \n  \"Mild (1)\" = \"#4b86c5\",      \n  \"Moderate (2)\" = \"#e8996f\",  \n  \"Severe (3)\" = \"#d95d33\"      \n  ))  \n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Citrus: The Only Effective Treatment for Scurvy (1757)\") \nsubtitle_text &lt;- str_glue(\"Fractions of patients showing improvement vs. continuing symptoms after treatment\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 01,\n  source_text =  \"{ medicaldata } R package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text.x = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.75), face = \"bold\"),\n    \n    # Grid elements\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    \n    # Legend elements\n    legend.position = \"top\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(\n  complete_diverging_data |&gt;\n    filter(symptom == \"Gum Rot\") |&gt;\n    mutate(treatment_clean = factor(treatment_clean, levels = treatment_order))\n) +\n  # Geoms\n  geom_col(\n    aes(\n      x = treatment_clean,\n      y = plot_proportion,\n      fill = severity_ordered\n    ),\n    position = \"stack\"\n  ) +\n  geom_text(\n    aes(\n      x = treatment_clean,\n      y = plot_proportion,\n      label = ifelse(proportion &gt;= 0.05,\n        scales::percent(abs(proportion),\n          accuracy = 1\n        ), \"\"\n      )\n    ),\n    position = position_stack(vjust = 0.5),\n    color = \"white\",\n    size = 3.5,\n    fontface = \"bold\"\n  ) +\n  # Scales\n  scale_y_continuous(\n    labels = function(x) paste0(abs(x) * 100, \"%\"),\n    limits = c(-1, 1),\n    breaks = seq(-1, 1, 0.25),\n    minor_breaks = NULL\n  ) +\n  scale_fill_manual(\n    values = colors$palette\n  ) +\n  coord_flip(clip = \"off\") +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    x = NULL,\n    y = NULL,\n    fill = \"Severity Level\",\n    caption = caption_text\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.75),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.caption = element_markdown(\n      size = rel(.65),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 01, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 scales_1.3.0    skimr_2.1.5    \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.4.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pacman_0.5.1       pkgconfig_2.0.3    lifecycle_1.0.4   \n[17] farver_2.1.2       compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2       \n[45] timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2    \n[49] bit_4.5.0          ragg_1.3.3         hms_1.1.3          evaluate_1.0.1    \n[53] knitr_1.49         markdown_1.13      rlang_1.1.4        gridtext_0.1.5    \n[57] Rcpp_1.0.13-1      glue_1.8.0         xml2_1.3.6         renv_1.0.3        \n[61] vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[65] R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_01.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2023 week 30 Scurvy: Scurvy\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_03.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_03.html",
    "title": "Radial Warmth: San Juan’s Temperature Profile",
    "section": "",
    "text": "Figure 1: A circular heatmap showing San Juan’s monthly temperature patterns from 2014-2024. The visualization arranges months in a circle with years radiating outward. Temperature is displayed through a purple-to-yellow color gradient, with cooler winter temperatures (December-February) in purple and warmer summer temperatures (July-September) in yellow. The pattern reveals San Juan’s consistent tropical seasonal cycle.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  viridis,        # Color palettes\n  fs,             # For file handling\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  7,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Directory where all CSV files are stored\ndata_dir &lt;- here::here('data/30DayChartChallenge/2025/')\n\n# Get a list of all CSV files for San Juan from 2014-2024\nsj_files &lt;- fs::dir_ls(data_dir, regexp = \"78526011641_20[0-9]{2}\\\\.csv$\")\n\n# Function to read and process each file\nprocess_file &lt;- function(file_path) {\n  # Extract year from filename\n  year &lt;- str_extract(file_path, \"20[0-9]{2}\")\n  \n  # Read file and add year column\n  read_csv(file_path) |&gt;\n    clean_names() |&gt;\n    mutate(file_year = year)\n}\n\n# Read and combine all files\npri_temperature_all &lt;- map_df(sj_files, process_file)\n\n\n3. Examine the Data\n\nShow codeglimpse(pri_temperature_all)\nskim(pri_temperature_all)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Process temperature data\nsan_juan_temp &lt;- pri_temperature_all |&gt;\n  # Extract date information\n  mutate(\n    year = year(date),\n    month = month(date),\n    month_name = month(date, label = TRUE, abbr = TRUE)\n  ) |&gt;\n  # Select relevant columns\n  select(date, year, month, month_name, temp)\n\n# Calculate monthly averages\nmonthly_temp &lt;- san_juan_temp |&gt;\n  group_by(year, month, month_name) |&gt;\n  summarize(\n    avg_temp = mean(temp, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  # Round temperature\n  mutate(avg_temp = round(avg_temp, 1))\n\n# Filter for complete years\nyears_to_include &lt;- 2014:2024\nmonthly_temp &lt;- monthly_temp |&gt;\n  filter(year %in% years_to_include)\n\n# Prepare data for visualization\nmonthly_temp &lt;- monthly_temp |&gt;\n  mutate(\n    # Convert to factors to ensure proper ordering\n    month_name = factor(month_name, levels = month.abb),\n    year = as.factor(year)\n  )\n\n# Set temperature scale\ntemp_min &lt;- floor(min(monthly_temp$avg_temp, na.rm = TRUE))\ntemp_max &lt;- ceiling(max(monthly_temp$avg_temp, na.rm = TRUE))\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette = NULL)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Radial Warmth: San Juan's Temperature Profile\") \nsubtitle_text &lt;- str_glue(\"Monthly Temperature Patterns in San Juan, Puerto Rico (2014-2024)\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 03,\n  source_text =  \"NOAA\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8),\n                              hjust = 1, vjust = 0.5, angle = 90),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = ggtext::element_markdown(),\n  \n    # Grid elements\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"bottom\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 15, b = 10, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(monthly_temp, aes(x = month_name, y = year, fill = avg_temp)) +\n  # Geoms\n  geom_tile(color = \"white\", size = 0.1) +\n  # Scales\n  coord_polar() +\n  scale_fill_viridis(\n    option = \"plasma\",\n    name = \"Temperature (°F)\",\n    limits = c(temp_min, temp_max),\n    breaks = seq(temp_min, temp_max, by = 2)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = NULL\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size          = rel(1.6),\n      family        = fonts$title,\n      face          = \"bold\",\n      color         = colors$title,\n      margin        = margin(t = 5, b = 5)\n    ),\n    plot.subtitle   = element_markdown(\n      size          = rel(0.9),\n      family        = fonts$subtitle,\n      color         = colors$subtitle,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 20)\n    ),\n    plot.caption    = element_markdown(\n      size          = rel(.6),\n      family        = fonts$caption,\n      color         = colors$caption,\n      lineheight    = 0.65,\n      hjust         = 0.5,\n      halign        = 0.5,\n      margin        = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 03, \n  width = 7, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1        camcorder_0.1.0   fs_1.6.5          viridis_0.6.5    \n [5] viridisLite_0.4.2 scales_1.3.0      skimr_2.1.5       janitor_2.2.0    \n [9] showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9    ggtext_0.1.2     \n[13] lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1     dplyr_1.1.4      \n[17] purrr_1.0.2       readr_2.1.5       tidyr_1.3.1       tibble_3.2.1     \n[21] ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.3        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29    bit_4.5.0        \n[45] gridExtra_2.3     ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[49] knitr_1.49        markdown_1.13     rlang_1.1.4       gridtext_0.1.5   \n[53] Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6        renv_1.0.3       \n[57] vroom_1.6.5       svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9   \n[61] R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_03.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nNOAA - National Centers for Environmental Information, Global Surface Summary of the Day - GSOD SAN JUAN L M MARIN INTERNATIONAL AIRPORT, PR US (78526011641.csv), 2014 - 2024\n\n\n\nCitation:\n\nNOAA National Centers of Environmental Information. 1999. Global Surface Summary of the Day - GSOD. 1.0. [SAN JUAN L M MARIN INTERNATIONAL AIRPORT, PR US (78526011641.csv), 2014 - 2024]. NOAA National Centers for Environmental Information. Accessed [2025-03-21].\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_05.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_05.html",
    "title": "China’s Rise: GDP Ranking Changes (1960-2020)",
    "section": "",
    "text": "Figure 1: A bump chart showing GDP ranking changes from 1960-2020 for major economies. China (in bold red) started at 5th place in 1960, dropped to 8th by 1980, began rising after joining the WTO (highlighted in pink), and reached 2nd place by 2020. The US remains consistently in 1st place throughout the period, while Japan and other economies show various ranking changes. GDP values in trillion USD for 2020 are displayed.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggbump,         # Bump Chart and Sigmoid Curves\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  WDI,            # World Development Indicators and Other World Bank Data\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get GDP data (current US$) for top economies\ngdp_data &lt;- WDI(\n  indicator = c(\"gdp\" = \"NY.GDP.MKTP.CD\"),                # GDP in current US$\n  country = c(\"US\", \"CN\", \"JP\", \"DE\", \"GB\", \"IN\", \"FR\", \"IT\", \n              \"BR\", \"CA\", \"KR\", \"RU\", \"AU\", \"ES\", \"MX\"),\n  start = 1960,\n  end = 2020\n)\n\n\n3. Examine the Data\n\nShow codeglimpse(gdp_data)\nskim(gdp_data)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Filter parameters\ncountries_to_keep &lt;- c(\"US\", \"CN\", \"JP\", \"DE\", \"GB\", \"IN\", \"FR\", \"IT\", \"KR\", \"BR\")\nyears_to_keep &lt;- c(1960, 1970, 1980, 1990, 2000, 2010, 2020)\n\n# Filter the data\ngdp_filtered &lt;- gdp_data |&gt;\n  filter(iso2c %in% countries_to_keep) |&gt;\n  filter(year %in% years_to_keep) |&gt;\n  filter(!is.na(gdp))\n\n# Calculate rankings for each year\ngdp_ranked &lt;- gdp_filtered |&gt;\n  group_by(year) |&gt;\n  mutate(rank = rank(-gdp, ties.method = \"first\")) |&gt;\n  ungroup()\n\n# Classify countries into highlighted vs. background\ngdp_ranked &lt;- gdp_ranked |&gt;\n  mutate(\n    # Only 3 highlighted countries (US, China, Japan)\n    highlight_group = case_when(\n      iso2c == \"US\" ~ \"US\",\n      iso2c == \"CN\" ~ \"China\",\n      iso2c == \"JP\" ~ \"Japan\",\n      TRUE ~ \"Other\"\n    ),\n    # Create a size variable for lines and points\n    line_size = case_when(\n      iso2c == \"CN\" ~ 2.5,              # China gets thickest line\n      iso2c %in% c(\"US\", \"JP\") ~ 1.5,   # US and Japan medium\n      TRUE ~ 0.8                        # Others thin\n    ),\n    point_size = case_when(\n      iso2c == \"CN\" ~ 5,                # China gets largest points\n      iso2c %in% c(\"US\", \"JP\") ~ 3.5,   # US and Japan medium\n      TRUE ~ 2                          # Others small\n    ),\n    # Alpha for background countries\n    line_alpha = case_when(\n      iso2c %in% c(\"US\", \"CN\", \"JP\") ~ 1,\n      TRUE ~ 0.5\n    ),\n    # Country labels\n    country_label = case_when(\n      iso2c == \"US\" ~ \"United\\nStates\",\n      iso2c == \"CN\" ~ \"China\",\n      iso2c == \"JP\" ~ \"Japan\",\n      iso2c == \"DE\" ~ \"Germany\",\n      iso2c == \"GB\" ~ \"United\\nKingdom\",\n      iso2c == \"IN\" ~ \"India\",\n      iso2c == \"FR\" ~ \"France\",\n      iso2c == \"IT\" ~ \"Italy\",\n      iso2c == \"KR\" ~ \"South\\nKorea\",\n      iso2c == \"BR\" ~ \"Brazil\",\n      TRUE ~ country\n    ),\n    # Format GDP in trillions \n    gdp_trillion = round(gdp / 1e12, 2),\n    # GDP label\n    gdp_label = paste0(\"$\", gdp_trillion, \"T\")\n  )\n\n# Left label dataset \nleft_labels &lt;- gdp_ranked |&gt; \n  filter(year == 1960) |&gt;\n  mutate(\n    # horizontal adjustments\n    hjust = 1,\n    nudge_x = -1.5,\n    nudge_y = 0\n   \n  )\n\n# Right label dataset \nright_labels &lt;- gdp_ranked |&gt; \n  filter(year == 2020) |&gt;\n  mutate(\n    label_line = str_glue(\"{ country_label } ({ gdp_label })\"),\n    # horizontal adjustments\n    hjust = 0,\n    nudge_x = 1.5,\n    nudge_y = 0\n  ) \n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette = c(\n  \"US\" = \"#0066CC\",      \n  \"China\" = \"#CC0000\",   \n  \"Japan\" = \"#FF9900\",   \n  \"Other\" = \"#999999\"   \n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"China's Rise: GDP Ranking Changes (1960-2020)\") \nsubtitle_text &lt;- str_glue(\"From 5th to 2nd: The WTO Effect on China's Economic Ascen&lt;br&gt;\n                          Values shown in trillion USD (2020)\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 05,\n  source_text =  \"{ WDI } World Bank data in R\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8),\n                              hjust = 1, vjust = 0.95, angle = 0),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(color = colors$text, size = rel(0.7)),\n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(gdp_ranked, aes(x = year, y = rank, group = country_label)) +\n  # Add background shading\n  annotate(\"rect\",\n    xmin = 1995, xmax = 2005, ymin = 0, ymax = 11,\n    fill = \"#FF8B8B\", alpha = 0.15\n  ) +\n  # Geoms\n  geom_bump(aes(color = highlight_group, size = line_size, alpha = line_alpha), smooth = 8) +\n  geom_point(aes(color = highlight_group, size = point_size, alpha = line_alpha)) +\n  geom_text(                                                                    # left side labels\n    data = left_labels,\n    aes(label = country_label, color = highlight_group, y = rank + nudge_y),\n    hjust = 1,\n    nudge_x = -2,\n    lineheight = 0.9,\n    size = 3.2,\n  ) +\n  geom_text(                                                                    # right side labels\n    data = right_labels,\n    aes(label = label_line, color = highlight_group, y = rank), \n    hjust = 0,\n    nudge_x = 2,\n    size = 2.8,\n    fontface = \"bold\"\n  ) +\n  # Annotate\n  annotate(\"text\",\n    x = 2001, y = 6.7, label = \"China joins WTO\", color = \"gray20\",\n    size = 3.2, fontface = \"italic\"\n  ) +\n  annotate(\"segment\",\n    x = 2000, xend = 2000, y = 6.5, yend = 6.1,\n    arrow = arrow(length = unit(0.2, \"cm\")), linewidth = 0.5, color = \"gray20\"\n  ) +\n  # Scales\n  scale_y_reverse(breaks = 1:10) +\n  scale_x_continuous(\n    breaks = c(1960, 1970, 1980, 1990, 2000, 2010, 2020),\n    limits = c(1955, 2029)\n  ) +\n  scale_color_manual(values = colors$palette) +\n  scale_size_identity() +\n  scale_alpha_identity() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    x = \"Year\",\n    y = \"Rank\",\n    caption = caption_text\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(1),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 05, \n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 WDI_2.7.9       ggrepel_0.9.6  \n [5] ggbump_0.1.0    scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1      pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] htmltools_0.5.8.1 yaml_2.3.10       pillar_1.9.0      magick_2.8.5     \n[25] commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4    \n[29] rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0       \n[33] colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3  \n[37] utf8_1.2.4        withr_3.0.2       timechange_0.3.0  rmarkdown_2.29   \n[41] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[45] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[49] glue_1.8.0        xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[53] rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_05.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nWorld Bank { World Bank data in R } indicator = GDP (current US$) (“NY.GDP.MKTP.CD”)\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_07.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_07.html",
    "title": "Shooting Performance Variability Across NBA Teams (2023-24)",
    "section": "",
    "text": "Figure 1: A boxplot showing field goal percentage distribution across NBA teams for the 2023-24 season. Teams are ordered vertically by median percentage, with Indiana at the top. Statistical outliers are highlighted as red dots. A dashed blue vertical line indicates the league mean FG%. The chart reveals which teams have more consistent shooting performance versus those with extreme outlier games.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get player stats for the 2023-2024 NBA season\nnba_teams_2024 &lt;- load_nba_team_box(seasons = 2024) \n\n\n3. Examine the Data\n\nShow codeglimpse(nba_teams_2024)\nskim(nba_teams_2024)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\nnba_teams_2024 &lt;- nba_teams_2024 |&gt; \n  filter(team_abbreviation != \"EAST\" & team_abbreviation != \"WEST\") |&gt; \n  mutate(\n    team_abbreviation = fct_reorder(team_abbreviation, field_goal_pct, median)\n  ) \n\n# outliers df        \noutliers_df &lt;- nba_teams_2024 |&gt; \n  mutate(\n    q1 = quantile(field_goal_pct, 0.25, na.rm = TRUE),\n    q3 = quantile(field_goal_pct, 0.75, na.rm = TRUE),\n    iqr = q3 - q1,\n    is_outlier = field_goal_pct &lt; (q1 - 1.5 * iqr) | \n    field_goal_pct &gt; (q3 + 1.5 * iqr),\n    .by = team_abbreviation\n    ) |&gt;\n  filter(is_outlier)\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(palette = NULL)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Shooting Performance Variability Across NBA Teams (2023-24)\") \nsubtitle_text &lt;- str_glue(\"Field goal percentage distribution with statistical outliers highlighted in red\")\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 07,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(\n  data = nba_teams_2024,\n  aes(y = team_abbreviation, x = field_goal_pct)\n) +\n  # Geoms\n  geom_boxplot(fill = \"lightgray\", alpha = 0.2, outlier.shape = NA) +\n  geom_jitter(height = 0.2, alpha = 0.2, color = \"darkgray\", size = 1.5) +\n  geom_point(\n    data = outliers_df,\n    color = \"red\", size = 2.5\n  ) +\n  geom_vline(\n    xintercept = mean(nba_teams_2024$field_goal_pct, na.rm = TRUE),\n    linetype = \"dashed\", color = \"blue\", alpha = 0.8\n  ) +\n  annotate(\n    \"text\", \n    x = mean(nba_teams_2024$field_goal_pct, na.rm = TRUE), \n    y = levels(nba_teams_2024$team_abbreviation)[length(levels(nba_teams_2024$team_abbreviation))],\n    label = \"League Mean FG%\",  \n    vjust = -2.1,\n    color = \"blue\", \n    size = 4, \n    alpha = 0.8,\n    fontface = \"bold\"\n  ) +\n  # Scales\n  scale_x_continuous(labels = scales::number_format(suffix =\"%\")) +\n  scale_y_discrete(\n    expand = expansion(0.05, 0.0)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    y = \"Team\",\n    x = \"Field Goal Percentage\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.4),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 30)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 07, \n  width = 8, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 hoopR_2.1.0     scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       progressr_0.15.1   \n[31] globals_0.16.3      cli_3.6.3           rmarkdown_2.29     \n[34] ragg_1.3.3          generics_0.1.3      RcppParallel_5.1.10\n[37] rstudioapi_0.17.1   httr_1.4.7          tzdb_0.4.0         \n[40] commonmark_1.9.2    chromote_0.4.0      rvest_1.0.4        \n[43] parallel_4.4.0      base64enc_0.1-3     vctrs_0.6.5        \n[46] jsonlite_1.8.9      hms_1.1.3           listenv_0.9.1      \n[49] systemfonts_1.1.0   magick_2.8.5        glue_1.8.0         \n[52] parallelly_1.43.0   gifski_1.32.0-1     codetools_0.2-20   \n[55] ps_1.8.1            stringi_1.8.4       gtable_0.3.6       \n[58] later_1.3.2         munsell_0.5.1       furrr_0.3.1        \n[61] pillar_1.9.0        htmltools_0.5.8.1   R6_2.5.1           \n[64] textshaping_0.4.0   rprojroot_2.0.4     evaluate_1.0.1     \n[67] markdown_1.13       gridtext_0.1.5      snakecase_0.11.1   \n[70] renv_1.0.3          Rcpp_1.0.13-1       svglite_2.1.3      \n[73] xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_07.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_09.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_09.html",
    "title": "NBA 2023-24: Players with the Highest and Lowest Impact",
    "section": "",
    "text": "Figure 1: A diverging bar chart titled “NBA 2023-24: Players with the Highest and Lowest Impact” showing Plus/Minus statistics for NBA players. The horizontal bars extend right (green) for positive impact and left (red) for negative impact. Nikola Jokić leads with +682, while Miles Bridges has the lowest at -633. The visualization includes 50 players who played minimum 15 minutes per game for at least 40 games.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\ntidyverse,      # Easily Install and Load the 'Tidyverse'\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  camcorder       # Record Your Plot History\n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get NBA player stats for 2023-24 season\nplayers_2024_raw &lt;- nba_leaguedashplayerstats(season = \"2023-24\")\nplayers_2024 &lt;- players_2024_raw$LeagueDashPlayerStats\n\n\n3. Examine the Data\n\nShow codeglimpse(players_2024)\nskim(players_2024)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\nplayers_2024 &lt;- players_2024 |&gt;\n  mutate(\n    PLUS_MINUS = as.numeric(PLUS_MINUS),\n    GP = as.numeric(GP),\n    MIN = as.numeric(MIN)\n  ) \n\n# Players with with at least 15 minutes per game and 40 games\nfiltered_players &lt;- players_2024 |&gt;\n  filter(MIN &gt;= 15, GP &gt;= 40) \n\n# plot df\nplot_data &lt;- filtered_players |&gt;\n  select(PLAYER_NAME, TEAM_ABBREVIATION, GP, MIN, PLUS_MINUS) |&gt;\n  arrange(desc(PLUS_MINUS)) |&gt; \n  # Get top and bottom 25 players by PLUS_MINUS\n  mutate(rank_group = case_when(\n    row_number() &lt;= 25 ~ \"Top 25\",\n    row_number() &gt; n() - 25 ~ \"Bottom 25\",\n    TRUE ~ \"Middle\"\n  )) |&gt;\n  filter(rank_group != \"Middle\") |&gt;\n  # Add player names with team abbreviation\n  mutate(\n    player_label = str_glue(\"{ PLAYER_NAME } ({ TEAM_ABBREVIATION } )\"),\n    player_label = fct_reorder(player_label, PLUS_MINUS),\n    highlight = ifelse(PLUS_MINUS &gt; 0, \"Positive Impact\", \"Negative Impact\")\n    )\n\n# labels df\ntop_5 &lt;- plot_data |&gt; \n  arrange(desc(PLUS_MINUS)) |&gt; \n  head(5)\n\nbottom_5 &lt;- plot_data |&gt; \n  arrange(PLUS_MINUS) |&gt; \n  head(5)\n\nlabel_data &lt;- bind_rows(top_5, bottom_5)\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(\n  palette = c(\"Negative Impact\" = \"#D74A49\", \"Positive Impact\" = \"#3F9852\")\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"NBA 2023-24: Players with the Highest and Lowest Impact\") \nsubtitle_text &lt;- str_wrap(\"Plus/Minus measures point differential when a player is on the court (min. 15 mins/game, 40+ games)\", \n                          width = 70)\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 09,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.68)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n \n    # Legend elements\n    legend.position = \"top\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(\n  data = plot_data,\n  aes(x = player_label, y = PLUS_MINUS, fill = highlight)) +\n  # Geoms\n  geom_hline(yintercept = 0, color = \"gray40\", linetype = \"solid\", linewidth = 0.5) +\n  geom_col() +\n  geom_text(\n    data = label_data,\n    aes(label = round(PLUS_MINUS, 0), \n        hjust = ifelse(PLUS_MINUS &gt; 0, -0.3, 1.3)),\n    color = \"black\", \n    size = 3\n  ) +\n  # Scales\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Player Impact\"\n  ) +\n  scale_y_continuous(\n    name = \"Plus/Minus\",\n    labels = function(x) paste0(ifelse(x &gt; 0, \"+\", \"\"), x),\n    breaks = seq(-600, 600, 300),\n    limits = c(-640, 690)\n  ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.55),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 09, \n  width = 8, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 hoopR_2.1.0     scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       globals_0.16.3      cli_3.6.3          \n[31] rmarkdown_2.29      ragg_1.3.3          generics_0.1.3     \n[34] RcppParallel_5.1.10 rstudioapi_0.17.1   httr_1.4.7         \n[37] tzdb_0.4.0          commonmark_1.9.2    chromote_0.4.0     \n[40] rvest_1.0.4         parallel_4.4.0      base64enc_0.1-3    \n[43] vctrs_0.6.5         jsonlite_1.8.9      hms_1.1.3          \n[46] listenv_0.9.1       systemfonts_1.1.0   magick_2.8.5       \n[49] glue_1.8.0          parallelly_1.43.0   gifski_1.32.0-1    \n[52] codetools_0.2-20    ps_1.8.1            stringi_1.8.4      \n[55] gtable_0.3.6        later_1.3.2         munsell_0.5.1      \n[58] furrr_0.3.1         pillar_1.9.0        htmltools_0.5.8.1  \n[61] R6_2.5.1            textshaping_0.4.0   rprojroot_2.0.4    \n[64] evaluate_1.0.1      markdown_1.13       gridtext_0.1.5     \n[67] snakecase_0.11.1    renv_1.0.3          Rcpp_1.0.13-1      \n[70] svglite_2.1.3       xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_09.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_11.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_11.html",
    "title": "NBA Teams: Distribution of Assist-to-Turnover Ratios",
    "section": "",
    "text": "Figure 1: A dotplot showing the distribution of assist-to-turnover ratios for NBA teams in the 2024 season. Teams are sorted vertically by median ratio, with Jazz at the top and Celtics at the bottom. Purple circles represent players, with larger circles indicating more players with that specific ratio value. Most players cluster between ratios of 1.0-2.5. Alternating gray background stripes highlight each team row. A vertical dashed line marks the league median.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data \n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get player stats for 2024 NBA season\nnba_players &lt;- load_nba_player_box(seasons = 2024)\n\n\n3. Examine the Data\n\nShow codeglimpse(nba_players)\nskim(nba_players)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Aggregate to get season stats per player\nplayer_season_stats &lt;- nba_players |&gt;\n  filter(!did_not_play) |&gt;\n  group_by(athlete_id, athlete_display_name, team_id, team_name) |&gt;\n  summarize(\n    games_played = n(),\n    total_minutes = sum(minutes, na.rm = TRUE),\n    avg_minutes = total_minutes / games_played,\n    total_assists = sum(assists, na.rm = TRUE),\n    total_turnovers = sum(turnovers, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Filter out players with minimal playing time\nfiltered_players &lt;- player_season_stats |&gt;             \n  filter(games_played &gt;= 20, avg_minutes &gt;= 10)\n\n# Calculate Assist-to-Turnover Ratio (capped at 5)\nfiltered_players &lt;- filtered_players |&gt;\n  mutate(AST_TO_Ratio = total_assists / pmax(total_turnovers, 1)) |&gt;\n  mutate(AST_TO_Ratio = pmin(AST_TO_Ratio, 5))\n\n# Get team names to use for grouping\nfiltered_players$Team &lt;- filtered_players$team_name\n\n# Create team summary stats\nteam_stats &lt;- filtered_players |&gt;\n  group_by(Team) |&gt;\n  summarize(\n    median_ratio = median(AST_TO_Ratio, na.rm = TRUE),\n    mean_ratio = mean(AST_TO_Ratio, na.rm = TRUE),\n    min_ratio = min(AST_TO_Ratio, na.rm = TRUE),\n    max_ratio = max(AST_TO_Ratio, na.rm = TRUE),\n    q25 = quantile(AST_TO_Ratio, 0.25),\n    q75 = quantile(AST_TO_Ratio, 0.75),\n    players = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(desc(median_ratio))\n\n# Order teams by median ratio\nteam_order &lt;- team_stats$Team\nfiltered_players$Team &lt;- factor(filtered_players$Team, levels = team_order)\n\n# Create background stripes df\nbackground_stripes &lt;- data.frame(\n  Team = team_order[seq(1, length(team_order), by = 2)],\n  xmin = rep(-Inf, length(team_order[seq(1, length(team_order), by = 2)])),\n  xmax = rep(Inf, length(team_order[seq(1, length(team_order), by = 2)])),\n  ymin = seq(1, length(team_order), by = 2) - 0.5,\n  ymax = seq(1, length(team_order), by = 2) + 0.5\n)\n\n# Prepare data for dot plot\ndotplot_data &lt;- filtered_players |&gt;\n  mutate(ratio_rounded = round(AST_TO_Ratio * 2) / 2) |&gt;\n  group_by(Team, ratio_rounded) |&gt;\n  summarize(count = n(), .groups = \"drop\")\n\ndotplot_data$Team &lt;- factor(dotplot_data$Team, levels = team_order)\n\n# Create median indicators df\nmedian_indicators &lt;- team_stats |&gt;\n  select(Team, median_ratio) |&gt;\n  mutate(Team = factor(Team, levels = team_order))\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(\n  palette = c(\"#6A0DAD\")  \n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"NBA Teams: Distribution of Assist-to-Turnover Ratios\",\n                          width = 60) \nsubtitle_text &lt;- str_wrap(\"2024 NBA Season | Teams sorted by median ratio | Circle size represents number of players\", \n                          width = 100)\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 11,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.68)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n\n    # Grid elements\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n \n    # Legend elements\n    legend.position = \"bottom\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot() +\n  # Geoms\n  geom_rect(\n    data = background_stripes,                                                  # Stripes\n    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),\n    fill = \"gray80\", alpha = 0.4\n    ) +\n  geom_vline(\n    xintercept = seq(0, 5, by = 0.5), \n    color = \"gray90\", linewidth = 0.3\n    ) +\n  geom_vline(xintercept = median(team_stats$median_ratio), \n             linetype = \"dashed\", color = \"gray50\", linewidth = 0.5) +\n  geom_point(\n    data = dotplot_data,\n    aes(x = ratio_rounded, y = as.numeric(Team), \n    size = count),\n    color = colors$palette,\n    alpha = 0.6\n    ) +\n  # Annotations\n  annotate(\n    \"richtext\", x = 4.6, y = 3, label = \"Top-ranked&lt;br&gt;teams have&lt;br&gt;more players&lt;br&gt;with higher&lt;br&gt;assist-to-&lt;br&gt;turnover ratios\", \n    hjust = 0, vjust = 0.5, size = 3, fill = NA, label.color = NA\n    ) +\n  annotate(\n    \"richtext\", x = 0, y = 1, \n    label = \"Most teams have &lt;span style='color:#2D708EFF;'&gt;clusters&lt;/span&gt; of&lt;br&gt;players with ratios between 1.0-2.5\",\n    hjust = 0, vjust = 0.5, size = 3, fill = NA, label.color = NA\n    ) +\n  annotate(\n    \"richtext\", x = 4.2, y = length(team_order) - 3.5,\n    label = \"Larger circles indicate&lt;br&gt;more players with that&lt;br&gt;specific ratio value\",\n    hjust = 0, vjust = 0, size = 3, fill = NA, label.color = NA\n    ) +\n  annotate(\n    \"text\", x = median(team_stats$median_ratio) + 0.05, y = length(team_order) + 1.1,\n    label = \"League median\", hjust = 0, size = 3, lineheight = 0.9\n    ) +\n  # Scales\n  scale_x_continuous(\n    breaks = seq(0, 5, 0.5),\n    limits = c(0, 5.2),\n    expand = expansion(add = c(0.1, 0))\n  ) +\n  scale_y_continuous(\n    breaks = 1:length(team_order), \n    labels = team_order,\n    expand = expansion(add = c(0.8, 0.8))\n    ) +\n  scale_size_continuous(\n    range = c(1, 9), \n    breaks = c(1, 3, 5, 7),\n    name = \"Number of Players\"\n    ) +\n  # Labs\n  labs(title = title_text,\n       subtitle = subtitle_text,\n       caption = caption_text,\n       x = \"Assist-to-Turnover Ratio (rounded to nearest 0.5)\",\n       y = NULL\n    ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(2),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(1),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 5, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 11, \n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 hoopR_2.1.0     scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       progressr_0.15.1    globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      markdown_1.13      \n[67] gridtext_0.1.5      snakecase_0.11.1    renv_1.0.3         \n[70] Rcpp_1.0.13-1       svglite_2.1.3       xfun_0.49          \n[73] pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_11.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_13.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_13.html",
    "title": "NBA Player Archetypes: The Relationship Between Defense and 3-Point Shooting",
    "section": "",
    "text": "Figure 1: A scatter plot showing the relationship between NBA players’ defensive contributions (steals plus blocks per game) and 3-point shooting percentages. Four distinct clusters identified through K-means clustering reveal player archetypes: Two-Way Stars (upper right), Defensive Specialists (upper left), Offensive Specialists (lower right), and Role Players (lower center). Notable players like Victor Wembanyama stand out as elite two-way performers. Dashed lines indicate league averages for both metrics, creating quadrants with annotations describing each player archetype’s characteristics.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  cluster,        # \"Finding Groups in Data\": Cluster Analysis Extended Rousseeuw etal\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 10,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get NBA player data for 2023-2024 season\nplayers_2024_list &lt;- nba_leaguedashplayerstats(season = \"2023-24\")\n\n# Extract the data frame from the response\nplayers_2024 &lt;- players_2024_list$LeagueDashPlayerStats\n\n\n3. Examine the Data\n\nShow codeglimpse(players_2024)\nskim(players_2024)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\nplayer_stats &lt;- players_2024 |&gt;\n  # Make sure numeric columns are actually numeric\n  mutate(\n    GP = as.numeric(GP),\n    MIN = as.numeric(MIN),\n    STL = as.numeric(STL),\n    BLK = as.numeric(BLK),\n    FG3_PCT = as.numeric(FG3_PCT),\n    FT_PCT = as.numeric(FT_PCT)\n  ) |&gt;\n  # Filter for players with meaningful minutes\n  filter(GP &gt;= 40, MIN &gt;= 15) |&gt;\n  # Calculate key metrics\n  mutate(\n    STL_per_game = STL / GP,\n    BLK_per_game = BLK / GP,\n    defensive_contribution = STL_per_game + BLK_per_game\n  ) |&gt;\n  # Select specific columns\n  select(\n    PLAYER_NAME, TEAM_ABBREVIATION, \n    GP, MIN, \n    STL_per_game, BLK_per_game, defensive_contribution,\n    FG3_PCT, FT_PCT\n  )\n\n# Cluster df \ncluster_data &lt;- player_stats |&gt;\n  filter(\n    !is.na(defensive_contribution),\n    !is.na(FG3_PCT),\n    !is.na(FT_PCT)\n  )\n\n# Scale the variables for clustering\nscaled_data &lt;- cluster_data |&gt;\n  select(defensive_contribution, FG3_PCT, FT_PCT) |&gt;\n  scale()\n\n# Apply k-means clustering with k=4\nset.seed(123) \nk &lt;- 4\nkm_result &lt;- kmeans(scaled_data, centers = k, nstart = 25)\n\n# Add cluster assignments back to the data\ncluster_data$cluster &lt;- as.factor(km_result$cluster)\n\n# Descriptive cluster labels\ncenters &lt;- as.data.frame(km_result$centers)\ncolnames(centers) &lt;- c(\"defensive_contribution\", \"FG3_PCT\", \"FT_PCT\")\n\n# Create more meaningful cluster labels\ncluster_labels &lt;- c()\nfor(i in 1:k) {\n  def_val &lt;- centers[i, \"defensive_contribution\"]\n  fg3_val &lt;- centers[i, \"FG3_PCT\"]\n  ft_val &lt;- centers[i, \"FT_PCT\"]\n  \n  if(def_val &gt; 0 && fg3_val &gt; 0 && ft_val &gt; 0) {\n    label &lt;- \"Two-Way Stars\" # Good at everything\n  } else if(def_val &gt; 0 && (fg3_val &lt; 0 || ft_val &lt; 0)) {\n    label &lt;- \"Defensive Specialists\" # Good defense, weaker shooting\n  } else if(def_val &lt; 0 && fg3_val &gt; 0 && ft_val &gt; 0) {\n    label &lt;- \"Offensive Specialists\" # Good shooting, weaker defense\n  } else {\n    label &lt;- \"Role Players\" # Average or below average\n  }\n  cluster_labels[i] &lt;- label\n}\n\n# Map the labels to clusters\ncluster_mapping &lt;- setNames(cluster_labels, 1:k)\ncluster_data$cluster_label &lt;- cluster_mapping[cluster_data$cluster]\n\n# Identify top players in each cluster (for labeling in the plot)\ntop_players &lt;- cluster_data |&gt;    \n  group_by(cluster) |&gt;\n  arrange(desc(defensive_contribution + FG3_PCT + FT_PCT)) |&gt;\n  slice_head(n = 3) |&gt;\n  ungroup()\n\n\n5. Visualization Parameters\n\nShow code### |- plot aesthetics ---- \ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"#D55E00\",\n    \"#CC79A7\",\n    \"#009E73\",\n    \"#0072B2\"\n    )  \n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"NBA Player Archetypes: The Relationship Between Defense and 3-Point Shooting\",\n                          width = 55) \nsubtitle_text &lt;- str_wrap(\"2023-2024 Season | Four Player Archetypes Identified via K-means Clustering\", \n                          width = 100)\n\n# Create caption\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 13,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.text.y = element_text(color = colors$text, size = rel(0.68)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n\n    # Legend elements\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(\n  cluster_data, \n  aes(x = FG3_PCT, y = defensive_contribution, \n      color = cluster_label)\n) +\n  # Geoms\n  geom_point(\n    alpha = 0.5, \n    size = 3\n  ) +\n  geom_text_repel( # Label top players\n    data = top_players,\n    aes(label = PLAYER_NAME),\n    size = 3,\n    seed = 123,\n    max.overlaps = 15,\n    box.padding = 0.5,\n    segment.color = \"grey50\"\n  ) +\n  geom_hline( # average lines \n    yintercept = mean(cluster_data$defensive_contribution),\n    linetype = \"dashed\",\n    color = \"grey50\",\n    alpha = 0.5\n  ) +\n  geom_vline(\n    xintercept = mean(cluster_data$FG3_PCT),\n    linetype = \"dashed\",\n    alpha = 0.5\n  ) +\n  # Scales\n  scale_y_continuous(\n    limits = c(-0.05, 5),\n    breaks = pretty_breaks()\n  ) +\n  scale_x_continuous(\n    limits = c(-0.05, 1),\n    breaks = pretty_breaks()\n  ) +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"3-Point Field Goal Percentage (FG3%)\",\n    y = \"Defensive Contribution (STL + BLK per game)\",\n    color = \"Player Archetype\"\n  ) +\n  # Annotate\n  annotate(\"text\", x = -0.05, y = 3.75, \n           label = \"Elite defenders rarely\\nshoot well from deep\", \n           size = 3.5, fontface = \"italic\", color = colors$palette[1], hjust = 0) +\n  \n  annotate(\"text\", x = 0.45, y = 3.65, \n           label = \"Two-Way Stars are rare\\nand highly valuable\", \n           size = 3.5, fontface = \"italic\", color = colors$palette[2], hjust = 0) +\n  \n  annotate(\"text\", x = 0.02, y = 0, \n           label = \"Role players contribute\\nin less measurable ways\", \n           size = 3.5, fontface = \"italic\", color = colors$palette[3], hjust = 0) +\n  \n  annotate(\"text\", x = 0.65, y = 1, \n           label = \"Elite shooters often\\nsacrifice defensive effort\", \n           size = 3.5, fontface = \"italic\", color = colors$palette[4], hjust = 0) +\n  \n  annotate(\"text\", x = 0.03, y = 4, label = \"Defensive Specialists\", \n           color = colors$palette[1], fontface = \"bold\", size = 4) +\n  \n  annotate(\"text\", x = 0.35, y = 3.8, label = \"Two-Way Stars\", \n           color = colors$palette[2], fontface = \"bold\", size = 4) +\n  \n  annotate(\"text\", x = 0.08, y = 0.25, label = \"Role Players\", \n           color = colors$palette[3], fontface = \"bold\", size = 4) +\n  \n  annotate(\"text\", x = 0.75, y = 1.3, label = \"Offensive Specialists\", \n           color = colors$palette[4], fontface = \"bold\", size = 4) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(2),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.8),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 20, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 13, \n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 cluster_2.1.6   ggrepel_0.9.6  \n [5] hoopR_2.1.0     scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       globals_0.16.3      cli_3.6.3          \n[31] rmarkdown_2.29      ragg_1.3.3          generics_0.1.3     \n[34] RcppParallel_5.1.10 rstudioapi_0.17.1   httr_1.4.7         \n[37] tzdb_0.4.0          commonmark_1.9.2    chromote_0.4.0     \n[40] rvest_1.0.4         parallel_4.4.0      base64enc_0.1-3    \n[43] vctrs_0.6.5         jsonlite_1.8.9      hms_1.1.3          \n[46] listenv_0.9.1       systemfonts_1.1.0   magick_2.8.5       \n[49] glue_1.8.0          parallelly_1.43.0   gifski_1.32.0-1    \n[52] codetools_0.2-20    ps_1.8.1            stringi_1.8.4      \n[55] gtable_0.3.6        later_1.3.2         munsell_0.5.1      \n[58] furrr_0.3.1         pillar_1.9.0        htmltools_0.5.8.1  \n[61] R6_2.5.1            textshaping_0.4.0   rprojroot_2.0.4    \n[64] evaluate_1.0.1      markdown_1.13       gridtext_0.1.5     \n[67] snakecase_0.11.1    renv_1.0.3          Rcpp_1.0.13-1      \n[70] svglite_2.1.3       xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_13.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_15.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_15.html",
    "title": "The Complicated Relationship Between Assists and Turnovers",
    "section": "",
    "text": "Figure 1: Scatter plot showing NBA 2023-24 season data comparing assists versus turnovers per 36 minutes (correlation = 0.64). Players are divided into four categories: Efficient Playmakers, High-Risk Playmakers, Low-Usage Ball Handlers, and Turnover-Prone. Key players like Haliburton, Wembanyama, and James are labeled, illustrating the complicated relationship between playmaking and ball security.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  paletteer,      # Comprehensive Collection of Color Palettes\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with ggplot2\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get player stats for 2023-2024 season\nnba_players &lt;- load_nba_player_box(seasons = 2024)\n\n\n3. Examine the Data\n\nShow codeglimpse(nba_players)\nskim(nba_players)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Calculate aggregate stats (assists and turnovers)\nplayer_stats &lt;- nba_players |&gt;  \n  group_by(athlete_display_name, athlete_position_name) |&gt;\n  summarize(\n    games = n(),\n    minutes = sum(minutes, na.rm = TRUE),\n    assists = sum(assists, na.rm = TRUE),\n    turnovers = sum(turnovers, na.rm = TRUE),\n    ast_per_36 = (assists / minutes) * 36,\n    tov_per_36 = (turnovers / minutes) * 36,\n    ast_to_ratio = assists / pmax(turnovers, 0.5),  \n    .groups = \"drop\"\n  ) |&gt;\n  filter(\n    minutes &gt;= 500,\n    !is.na(ast_per_36),\n    !is.na(tov_per_36),\n    is.finite(ast_per_36),  \n    is.finite(tov_per_36)\n  ) |&gt; \n  mutate(\n    high_ast = ast_per_36 &gt; median(ast_per_36),\n    high_tov = tov_per_36 &gt; median(tov_per_36),\n    playmaker_type = case_when(\n      high_ast & !high_tov ~ \"Efficient Playmakers\",\n      high_ast & high_tov ~ \"High-Risk Playmakers\",\n      !high_ast & !high_tov ~ \"Low-Usage Ball Handlers\",\n      !high_ast & high_tov ~ \"Turnover-Prone\"\n    )\n  )\n\n# Correlation\ncorrelation &lt;- cor(\n  player_stats$ast_per_36, \n  player_stats$tov_per_36, \n  use = \"complete.obs\"\n  )\n\n# Label df\nelite_players &lt;- player_stats |&gt;\n  filter(\n    minutes &gt; 1500 & (\n      # Elite point guards and playmakers\n      ast_per_36 &gt; quantile(player_stats$ast_per_36, 0.95) |\n        # Players with unusual assist/turnover combos\n        (ast_per_36 &gt; 7 & tov_per_36 &lt; 1.5) |\n        tov_per_36 &gt; quantile(player_stats$tov_per_36, 0.95) |\n        # Super-efficient playmakers\n        (ast_per_36 &gt; 6 & ast_to_ratio &gt; 4) |\n        # manually selected a few stars\n        athlete_display_name %in% c(\n          \"LeBron James\", \"Nikola Jokic\", \"Chris Paul\", \n          \"Victor Wembanyama\", \"Tyrese Haliburton\", \"Joel Embiid\"\n        )\n    )\n  ) |&gt;\n  # Top N \n  slice_max(order_by = minutes, n = 15)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Efficient Playmakers\" = \"#009E73\", \n    \"High-Risk Playmakers\" = \"#171738\",  \n    \"Low-Usage Ball Handlers\" = \"#593C8F\", \n    \"Turnover-Prone\" = \"#DB5461\" \n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"The Complicated Relationship Between Assists and Turnovers\",\n                          width = 60) \n\nsubtitle_text &lt;- str_glue(\n  \"NBA 2023-24 Season: Correlation =  { round(correlation, 2) }&lt;br&gt;\n  Playmakers who create more assists also tend to commit more turnovers\"\n)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 15,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"gray92\"),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(player_stats, \n       aes(x = ast_per_36, y = tov_per_36, color = playmaker_type)\n) +\n  # Geoms\n  geom_point(\n    aes(size = minutes), \n    alpha = 0.35\n    ) +\n  geom_hline(\n    yintercept = median(player_stats$tov_per_36), \n    linetype = \"dotted\", \n    color = \"gray50\",\n    alpha = 0.7\n  ) +\n  geom_vline(\n    xintercept = median(player_stats$ast_per_36), \n    linetype = \"dotted\", \n    color = \"gray50\",\n    alpha = 0.7\n  ) +\n  geom_smooth(\n    method = \"lm\", \n    formula = y ~ x,\n    se = FALSE, \n    color = \"gray50\", \n    linetype = \"dashed\",\n    alpha = 0.5,\n    linewidth = 0.5\n  ) +\n  geom_text_repel(\n    data = elite_players,\n    aes(label = athlete_display_name),\n    size = 3, \n    max.overlaps = 10,\n    box.padding = 0.3,\n    point.padding = 0.2,\n    segment.color = \"gray30\",\n    min.segment.length = 0.2,\n    force = 5, \n    seed = 123\n  ) +\n  # Scales\n  scale_x_continuous(\n    breaks = seq(0, 12, by = 2),\n    limits = c(0, max(player_stats$ast_per_36) * 1.05)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 5, by = 1),\n    limits = c(0, max(player_stats$tov_per_36) * 1.05)\n  ) +\n  scale_size_continuous(\n    name = \"Total Minutes Played\", \n    range = c(1.5, 7),\n    breaks = c(1000, 2000, 3000)\n  ) +\n  scale_color_manual(\n    values = colors$palette\n    ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Assists Per 36 Minutes\",\n    y = \"Turnovers Per 36 Minutes\",\n  ) +\n  # Annotate\n  annotate(\n    \"text\", \n    x = 11.5, \n    y = 1.8,\n    label = \"Median assists\", \n    fontface = \"italic\", \n    size = 2.8, \n    color = \"gray40\",\n    hjust = 0.5\n  ) +\n  annotate(\n    \"text\", \n    x = 3, \n    y = 4.2,\n    label = \"Median turnovers\", \n    fontface = \"italic\", \n    size = 2.8, \n    color = \"gray40\",\n    hjust = 0,\n    angle = 90\n  ) +\n  annotate(\n    \"text\", \n    x = 11, \n    y = 3.65,\n    label = \"2:1 Assist-to-Turnover Ratio\", \n    fontface = \"italic\", \n    size = 2.5, \n    color = \"gray30\",\n    angle = 27 \n  ) +\n  annotate(\n    \"text\", \n    x = 7.5,\n    y = 0.2,\n    label = \"Efficient Playmakers\", \n    fontface = \"bold\", \n    size = 3.5, \n    color = colors$palette[1]\n  ) +\n  annotate(\n    \"text\", \n    x = 10,\n    y = 4.05,\n    label = \"High-Risk Playmakers\", \n    fontface = \"bold\", \n    size = 3.5, \n    color = colors$palette[2]\n  ) +\n  annotate(\n    \"text\", \n    x = 1,\n    y = 0.2,\n    label = \"Low-Usage Ball Handlers\", \n    fontface = \"bold\", \n    size = 3.5, \n    color = colors$palette[3]\n  ) +\n  annotate(\n    \"text\", \n    x = 1,\n    y = 4.05,\n    label = \"Turnover-Prone\", \n    fontface = \"bold\", \n    size = 3.5, \n    color = colors$palette[4]\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.5),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.5,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 5, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 15, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggrepel_0.9.6   paletteer_1.6.0\n [5] hoopR_2.1.0     scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] rematch2_2.1.2      rlang_1.1.4         magrittr_2.0.3     \n [4] snakecase_0.11.1    furrr_0.3.1         compiler_4.4.0     \n [7] mgcv_1.9-1          systemfonts_1.1.0   vctrs_0.6.5        \n[10] rvest_1.0.4         pkgconfig_2.0.3     fastmap_1.2.0      \n[13] magick_2.8.5        utf8_1.2.4          promises_1.3.0     \n[16] rmarkdown_2.29      markdown_1.13       tzdb_0.4.0         \n[19] ps_1.8.1            ragg_1.3.3          xfun_0.49          \n[22] jsonlite_1.8.9      later_1.3.2         parallel_4.4.0     \n[25] R6_2.5.1            stringi_1.8.4       parallelly_1.43.0  \n[28] Rcpp_1.0.13-1       knitr_1.49          base64enc_0.1-3    \n[31] pacman_0.5.1        Matrix_1.7-0        splines_4.4.0      \n[34] timechange_0.3.0    tidyselect_1.2.1    rstudioapi_0.17.1  \n[37] yaml_2.3.10         codetools_0.2-20    websocket_1.4.2    \n[40] curl_6.0.0          processx_3.8.4      listenv_0.9.1      \n[43] lattice_0.22-6      withr_3.0.2         evaluate_1.0.1     \n[46] future_1.34.0       RcppParallel_5.1.10 xml2_1.3.6         \n[49] pillar_1.9.0        renv_1.0.3          generics_0.1.3     \n[52] rprojroot_2.0.4     chromote_0.4.0      hms_1.1.3          \n[55] commonmark_1.9.2    munsell_0.5.1       globals_0.16.3     \n[58] glue_1.8.0          tools_4.4.0         data.table_1.16.2  \n[61] grid_4.4.0          colorspace_2.1-1    nlme_3.1-164       \n[64] repr_1.1.7          cli_3.6.3           textshaping_0.4.0  \n[67] rsvg_2.6.1          fansi_1.0.6         svglite_2.1.3      \n[70] gtable_0.3.6        digest_0.6.37       progressr_0.15.1   \n[73] gifski_1.32.0-1     htmlwidgets_1.6.4   farver_2.1.2       \n[76] htmltools_0.5.8.1   lifecycle_1.0.4     httr_1.4.7         \n[79] gridtext_0.1.5     \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_15.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_17.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_17.html",
    "title": "Birds of a Feather: How NBA’s Bird Teams Show Identical Home Nest Advantage",
    "section": "",
    "text": "Figure 1: Bar chart titled “Birds of a Feather: How NBA’s Bird Teams Show Identical Home Nest Advantage” comparing Hawks and Pelicans win percentages. Both teams win exactly 54.3% of home games (teal bars) and 45.7% of away games (red bars). Arrows connect the identical percentages between teams, highlighting the perfect mirroring of their home court advantage pattern.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with ggplot2\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Define the bird teams using their NBA team IDs\npelicans_id &lt;- \"1610612740\"  # New Orleans Pelicans \nhawks_id &lt;- \"1610612737\"     # Atlanta Hawks \n\n# Get team game logs for the 2023-2024 season\npelicans_games &lt;- hoopR::nba_leaguegamelog(season = \"2023-24\", team_id_nullable = pelicans_id)\nhawks_games &lt;- hoopR::nba_leaguegamelog(season = \"2023-24\", team_id_nullable = hawks_id)\n  \n# Extract and prepare data\npelicans_data &lt;- pelicans_games$LeagueGameLog |&gt; mutate(team = \"Pelicans\")\nhawks_data &lt;- hawks_games$LeagueGameLog |&gt; mutate(team = \"Hawks\")\n\n# Combine datasets\nall_games &lt;- bind_rows(pelicans_data, hawks_data)\n\n\n3. Examine the Data\n\nShow codeglimpse(all_games)\nskim(all_games)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Add home/away indicator\nall_games &lt;- all_games |&gt;\n  mutate(location = if_else(MATCHUP |&gt; str_detect(\"@\"), \"Away\", \"Home\"))\n\n# Calculate metrics \nbird_analysis &lt;- all_games |&gt;\n  mutate(\n    game_date = as.Date(GAME_DATE, format = \"%m/%d/%Y\"),\n    FGA_num = as.numeric(FGA),\n    FTA_num = as.numeric(FTA),\n    TOV_num = as.numeric(TOV),\n    OREB_num = as.numeric(OREB),\n    MIN_num = as.numeric(gsub(\":\", \".\", MIN)),\n    PTS_num = as.numeric(PTS),\n    \n    pace = case_when(\n      is.na(MIN_num) | MIN_num == 0 ~ NA_real_,\n      TRUE ~ (FGA_num + TOV_num + 0.44 * FTA_num - OREB_num) / MIN_num * 48\n    ),\n    \n    efficiency = case_when(\n      is.na(FGA_num) | FGA_num == 0 ~ NA_real_,\n      TRUE ~ PTS_num / FGA_num\n    )\n  ) |&gt;\n  filter(!is.na(pace), !is.na(efficiency), !is.infinite(pace), !is.infinite(efficiency))\n\n# Calculate home vs away statistics\nhome_away_summary &lt;- bird_analysis |&gt;\n  group_by(team, location) |&gt;\n  summarize(\n    avg_pace = mean(pace, na.rm = TRUE),\n    avg_efficiency = mean(efficiency, na.rm = TRUE),\n    games_played = n(),\n    wins = sum(WL == \"W\", na.rm = TRUE),\n    win_pct = wins / games_played,\n    .groups = \"drop\"\n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Home\" = \"#008080\", \n    \"Away\" = \"#E03A3E\"\n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Birds of a Feather: How NBA's Bird Teams Show Identical Home Nest Advantage\",\n                          width = 55) \n\nsubtitle_text &lt;- str_wrap(\"Both Hawks and Pelicans win exactly 54.3% of home games and 45.7% of away games\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 17,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), margin = margin(r = 10)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray92\"),\n\n    # Legend elements\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    # legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(home_away_summary, aes(x = team, y = win_pct, fill = location)) +\n  # Geoms\n  geom_col(\n    position = \"dodge\", \n    width = 0.7\n    ) +\n  geom_text(\n    aes(label = scales::percent(win_pct, accuracy = 0.1)), \n    position = position_dodge(\n      width = 0.7), \n    vjust = -0.7, \n    size = 4, \n    fontface = \"bold\"\n    ) +\n  # Scales\n  scale_y_continuous(\n    labels = scales::percent, limits = c(0, 0.8), \n    breaks = seq(0, 0.8, 0.1)\n    ) +\n  scale_fill_manual(\n    values = colors$palette\n    ) +\n  # Annotate\n  annotate(\n    \"text\", x = 1.5, y = 0.72, \n    label = \"Both bird teams show identical\\nhome vs. away performance patterns\",\n    size = 4, fontface = \"italic\", color = \"gray30\"\n    ) +\n  annotate(\n    \"segment\", x = 1.25, xend = 1.75, y = 0.57, yend = 0.57, \n    arrow = arrow(ends = \"both\", length = unit(0.1, \"inches\")), \n    color = colors$palette[1]\n    ) +\n  annotate(\n    \"segment\", x = 1.25, xend = 1.75, y = 0.48, yend = 0.48, \n    arrow = arrow(ends = \"both\", length = unit(0.1, \"inches\")), \n    olor = colors$palette[2]\n    ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    y = \"Win Percentage\", \n    x = NULL,\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 17, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggrepel_0.9.6   hoopR_2.1.0    \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       globals_0.16.3      cli_3.6.3          \n[31] rmarkdown_2.29      ragg_1.3.3          generics_0.1.3     \n[34] RcppParallel_5.1.10 rstudioapi_0.17.1   httr_1.4.7         \n[37] tzdb_0.4.0          commonmark_1.9.2    chromote_0.4.0     \n[40] rvest_1.0.4         parallel_4.4.0      base64enc_0.1-3    \n[43] vctrs_0.6.5         jsonlite_1.8.9      hms_1.1.3          \n[46] listenv_0.9.1       systemfonts_1.1.0   magick_2.8.5       \n[49] glue_1.8.0          parallelly_1.43.0   gifski_1.32.0-1    \n[52] codetools_0.2-20    ps_1.8.1            stringi_1.8.4      \n[55] gtable_0.3.6        later_1.3.2         munsell_0.5.1      \n[58] furrr_0.3.1         pillar_1.9.0        htmltools_0.5.8.1  \n[61] R6_2.5.1            textshaping_0.4.0   rprojroot_2.0.4    \n[64] evaluate_1.0.1      markdown_1.13       gridtext_0.1.5     \n[67] snakecase_0.11.1    renv_1.0.3          Rcpp_1.0.13-1      \n[70] svglite_2.1.3       xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_17.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_19.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_19.html",
    "title": "NBA 3-Point Shooting Efficiency: Top 4 Teams",
    "section": "",
    "text": "Figure 1: A 2x2 grid showing 7-game rolling averages of 3-point shooting percentages for four NBA teams (Celtics, Suns, Thunder, and Timberwolves) during the 2023-2024 season. Each panel displays individual game data as gray dots with a colored trend line representing the rolling average.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  hoopR,          # Access Men's Basketball Play by Play Data\n  zoo,            # S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations)\n  ggh4x,          # Hacks for 'ggplot2'\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Load player box scores\nplayer_boxes &lt;- load_nba_player_box(seasons = 2024)\n\n\n3. Examine the Data\n\nShow codeglimpse(player_boxes)\nskim(player_boxes)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Calculate team season averages\nteam_season_stats &lt;- player_boxes |&gt;        \n  group_by(team_name) |&gt;\n  summarize(\n    games = n_distinct(game_id),\n    three_pt_made = sum(three_point_field_goals_made, na.rm = TRUE),\n    three_pt_attempts = sum(three_point_field_goals_attempted, na.rm = TRUE),\n    three_pt_pct = (three_pt_made / three_pt_attempts) * 100,\n    .groups = \"drop\"\n  ) |&gt;\n  filter(games &gt;= 70) |&gt;  # Ensure sufficient games \n  arrange(desc(three_pt_pct))\n\n# Top 4 teams by 3PT percentage\ntop4_teams &lt;- team_season_stats |&gt; \n  slice_head(n = 4) |&gt; \n  pull(team_name)\n\n# Process game-by-game data for \nteam_shooting &lt;- player_boxes |&gt;\n  filter(team_name %in% top4_teams) |&gt;\n  group_by(team_name, game_date) |&gt;\n  summarize(\n    three_point_made = sum(three_point_field_goals_made, na.rm = TRUE),\n    three_point_attempts = sum(three_point_field_goals_attempted, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(\n    three_pt_pct = (three_point_made / three_point_attempts) * 100,\n    game_date = as.Date(game_date)\n  ) |&gt;\n  filter(!is.na(three_pt_pct), !is.infinite(three_pt_pct))\n\n# Calculate team averages for reference lines\nteam_averages &lt;- team_shooting |&gt;\n  group_by(team_name) |&gt;\n  summarize(\n    avg_pct = mean(three_pt_pct, na.rm = TRUE),\n    .groups = \"drop\"\n    )\n\n# Calculate 7-game rolling average\nteam_rolling_data &lt;- team_shooting |&gt;\n  arrange(team_name, game_date) |&gt;\n  group_by(team_name) |&gt;\n  mutate(\n    rolling_avg_pct = rollmean(three_pt_pct, k = 7, fill = NA, align = \"right\"),\n    .groups = \"drop\"\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Celtics\" = \"#007932\",\n    \"Suns\" = \"#1D1160\", \n    \"Thunder\" =  \"#007cc2\",\n    \"Timberwolves\" = \"#236192\"\n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"NBA 3-Point Shooting Efficiency: Top 4 Teams\",\n                          width = 55) \n\nsubtitle_text &lt;- str_wrap(\"7-Game rolling averages showing shooting trends throughout the 2023-2024 season\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 19,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), margin = margin(r = 10)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray92\"),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_blank(),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Facet elements\n    strip.background = element_rect(fill = \"gray90\", color = NA),\n    strip.text = element_text(face = \"bold\", size = rel(1), margin = margin(10, 0, 10, 0)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(team_rolling_data, aes(x = game_date)) +\n  # Geoms\n  geom_point(aes(y = three_pt_pct), alpha = 0.3, size = 2, color = \"gray50\") +\n  geom_line(aes(y = rolling_avg_pct, color = team_name), linewidth = 2) +\n  geom_hline(\n    data = team_averages, aes(yintercept = avg_pct),\n    linetype = \"dashed\", color = \"gray30\", linewidth = 0.7\n  ) +\n  # Scales\n  scale_x_date(\n    date_breaks = \"2 month\",\n    date_labels = \"%b\",\n    limits = c(min(team_shooting$game_date), max(team_shooting$game_date))\n  ) +\n  scale_y_continuous(\n    limits = c(20, 60),\n    breaks = seq(20, 60, by = 10),\n    labels = function(x) paste0(x, \"%\")\n  ) +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"3-Point Shooting %\",\n  ) +\n  # Facet\n  facet_wrap2(\n    ~team_name,\n    ncol = 2,\n    strip = strip_themed(\n      background_x = elem_list_rect(fill = colors$palette[levels(factor(team_rolling_data$team_name))]),\n      text_x = elem_list_text(color = \"white\", face = \"bold\", size = 14)\n    )\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 19, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggh4x_0.2.8     zoo_1.8-12     \n [5] hoopR_2.1.0     scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.4         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] htmlwidgets_1.6.4   curl_6.0.0          xml2_1.3.6         \n[22] repr_1.1.7          websocket_1.4.2     withr_3.0.2        \n[25] grid_4.4.0          fansi_1.0.6         colorspace_2.1-1   \n[28] future_1.34.0       progressr_0.15.1    globals_0.16.3     \n[31] cli_3.6.3           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.4.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      lattice_0.22-6     \n[67] markdown_1.13       gridtext_0.1.5      snakecase_0.11.1   \n[70] renv_1.0.3          Rcpp_1.0.13-1       svglite_2.1.3      \n[73] xfun_0.49           pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_19.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_21.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_21.html",
    "title": "Rise and Fall of Trilobites: Fossil Records Over Time",
    "section": "",
    "text": "Figure 1: Line graph showing the rise and fall of trilobite fossils over time (540-250 million years ago). The data peaks in the Ordovician period around 480-450 Ma, then sharply declines after the Ordovician Extinction (444 Ma), continues at lower levels through the Silurian period, and diminishes further after the Devonian Extinction (372 Ma).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  paleobioDB,     # Download and Process Data from the Paleobiology Database # Download and Process Data from the Paleobiology Database\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2' \n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Search for fossil occurrences of trilobites \ntrilobites &lt;- pbdb_occurrences(\n  base_name = \"Trilobita\", \n  show = c(\"time\", \"coords\", \"phylo\"), \n  limit = \"all\"\n  )\n\n\n3. Examine the Data\n\nShow codeglimpse(trilobites)\nskim(trilobites)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\ntrilo_time_binned &lt;- trilobites |&gt;\n  filter(!is.na(eag), !is.na(lag)) |&gt;      \n  mutate(\n    mid_ma = (eag + lag) / 2,\n    bin_5ma = floor(mid_ma / 5) * 5 ,\n    bin_10ma = floor(mid_ma / 10) * 10\n  ) |&gt;\n  count(bin_5ma) |&gt;\n  arrange(desc(bin_5ma)) \n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"#D95F02\" ,\n    \"gray20\"\n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Rise and Fall of Trilobites: Fossil Records Over Time\",\n                          width = 55) \n\nsubtitle_text &lt;- str_wrap(\"Exploring the dramatic rise and fall of one of Earth's most successful early arthropod groups\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 21,\n  source_text =  \"{ paleobioDB } R package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Axis elements\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), margin = margin(r = 10)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.line.x = element_line(color = \"black\"),\n    axis.ticks.x = element_line(color = \"black\"),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray92\"),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_blank(),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Facet elements\n    strip.background = element_rect(fill = \"gray90\", color = NA),\n    strip.text = element_text(face = \"bold\", size = rel(1), margin = margin(10, 0, 10, 0)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(trilo_time_binned, aes(x = bin_5ma, y = n)) +\n  # Geoms\n  geom_area(fill = colors$palette[1], alpha = 0.2) +\n  geom_line(color = colors$palette[1], linewidth = 1.5) +\n  geom_point(color = colors$palette[1], size = 1.5, alpha = 0.7) +\n  geom_vline(xintercept = 444, linetype = \"dashed\", color = colors$palette[2], alpha = 0.4, linewidth = 0.7) +\n  geom_vline(xintercept = 372, linetype = \"dashed\", color = colors$palette[2], alpha = 0.4, linewidth = 0.7) +\n  # Annotate\n  annotate(\"text\",\n    x = 444, y = 5000,\n    label = \"Ordovician Extinction\",\n    color = colors$palette[2], hjust = 1.1, size = 3.5\n  ) +\n  annotate(\"text\",\n    x = 372, y = 5000,\n    label = \"Devonian Extinction\",\n    color = colors$palette[2], hjust = 1.1, size = 3.5\n  ) +\n  annotate(\"text\",\n    x = 475, y = -283.8,\n    label = \"Ordovician\", fontface = \"italic\", size = 4\n  ) +\n  annotate(\"text\",\n    x = 425, y = -283.8,\n    label = \"Silurian\", fontface = \"italic\", size = 4\n  ) +\n  annotate(\"text\",\n    x = 390, y = -283.8,\n    label = \"Devonian\", fontface = \"italic\", size = 4\n  ) +\n  # Scales\n  scale_x_reverse(\n    limits = c(520, 250),\n    breaks = seq(500, 250, by = -50),\n    minor_breaks = seq(500, 250, by = -10)\n  ) +\n  scale_y_continuous(\n    limits = c(-max(trilo_time_binned$n) * 0.1, max(trilo_time_binned$n) * 1.1),\n    expand = c(0, 0)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Millions of Years Ago (Ma)\",\n    y = \"Number of Recorded Fossil Occurrences\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 21, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1       camcorder_0.1.0  ggrepel_0.9.6    paleobioDB_1.0.0\n [5] scales_1.3.0     skimr_2.1.5      janitor_2.2.0    showtext_0.9-7  \n [9] showtextdb_3.0   sysfonts_0.8.9   ggtext_0.1.2     lubridate_1.9.3 \n[13] forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4      purrr_1.0.2     \n[17] readr_2.1.5      tidyr_1.3.1      tibble_3.2.1     ggplot2_3.5.1   \n[21] tidyverse_2.0.0 \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      rjson_0.2.23      xfun_0.49         htmlwidgets_1.6.4\n [5] tzdb_0.4.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     terra_1.7-83      repr_1.1.7       \n[21] codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10      \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  gtools_3.9.5     \n[29] tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4     labeling_0.4.3   \n[33] rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0       \n[37] colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3  \n[41] utf8_1.2.4        withr_3.0.2       timechange_0.3.0  rmarkdown_2.29   \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] glue_1.8.0        xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[57] rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_21.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nPaleobiology Database { paleobioDB } indicator = Trilobita)\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_23.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_23.html",
    "title": "Pharmaceutical Giants Stock Performance (2018-2025)",
    "section": "",
    "text": "Figure 1: Line chart showing pharmaceutical giants’ stock performance from 2018-2025 on a logarithmic scale. The chart displays five companies (LLY, ABBV, MRK, BMY, PFE) with Eli Lilly (LLY) showing the strongest growth, reaching nearly $1,000 by 2025. The COVID-19 pandemic period is highlighted with a pink vertical band in 2020. All companies experienced volatility during this time, with different recovery patterns afterward.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  tidyquant,      # Tidy Quantitative Financial Analysis # Tidy Quantitative Financial Analysis # Tidy Quantitative Financial Analysis # Tidy Quantitative Financial Analysis # Tidy Quantitative Financial Analysis\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Define timeframe\nend_date &lt;- Sys.Date()\nstart_date &lt;- end_date - years(7)\n\n# Pharmaceutical companies\npharma_symbols &lt;- c(\"PFE\", \"MRK\", \"ABBV\", \"LLY\", \"BMY\")\n\n# Get the stock data\npharma_data &lt;- tq_get(\n  pharma_symbols, \n  from = start_date,\n  to = end_date,\n  get = \"stock.prices\"\n  )\n\n\n3. Examine the Data\n\nShow codeglimpse(pharma_data)\nskim(pharma_data)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Get the last data point for each company for labeling\nlabel_data &lt;- pharma_data |&gt;  \n  group_by(symbol) |&gt;\n  filter(date == max(date)) |&gt;\n  ungroup()\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"PFE\" = \"#0000c6\",           \n    \"MRK\" = \"#00857c\",            \n    \"ABBV\" = \"#061d49\",          \n    \"LLY\" = \"#d52b1e\",        \n    \"BMY\" = \"#be2bba\"\n  )\n)\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"Pharmaceutical Giants Stock Performance (2018-2025)\",\n                          width = 55) \n\nsubtitle_text &lt;- str_wrap(\"Log scale reveals growth patterns during pre-pandemic, pandemic, and recovery periods\",\n                          width = 85)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 23,\n  source_text =  \"Yahoo Finance via { tidyquant }\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot() +\n  # Geoms\n  geom_line(\n    data = pharma_data, \n    aes(x = date, y = adjusted, color = symbol),\n    linewidth = 0.6\n  ) +\n  geom_text_repel(\n    data = label_data,\n    aes(x = date, y = adjusted, label = symbol, color = symbol),\n    nudge_x = 70,  \n    hjust = 0,\n    segment.size = 0.5,\n    direction = \"y\",\n    box.padding = 0.5,\n    segment.alpha = 0.6,\n    fontface = \"bold\",\n    size = 3.5\n  ) +\n  # Annotate\n  annotate(\n    \"rect\", \n    xmin = as.Date(\"2020-03-01\"), \n    xmax = as.Date(\"2020-12-01\"),\n    ymin = 10, \n    ymax = 1000,\n    alpha = 0.1, \n    fill = \"red\"\n  ) +\n  annotate(\n    \"text\", \n    x = as.Date(\"2020-07-01\"), \n    y = 15, \n    label = \"COVID-19\\nPandemic\", \n    color = \"darkred\",\n    size = 3\n  ) +\n  annotate(\n    \"label\", \n    x = as.Date(\"2018-04-01\"), \n    y = 900, \n    label = \"LLY = Eli Lilly\\nABBV = AbbVie\\nMRK = Merck\\nBMY = Bristol Myers Squibb\\nPFE = Pfizer\",\n    hjust = 0, \n    vjust = 1,\n    size = 3,\n    color = \"gray30\",\n    fill = \"white\",\n    alpha = 0.8,\n    label.size = 0.5\n  ) +\n  # Scale\n  scale_x_date(\n    date_breaks = \"1 year\", \n    date_labels = \"%Y\",\n    expand = expansion(mult = c(0.01, 0.08))\n  ) +\n  scale_y_log10(\n    labels = scales::dollar_format(accuracy = 1)\n  ) +\n  scale_color_manual(values = colors$palette) +\n  coord_cartesian(\n    xlim = c(start_date, end_date + days(10))\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Price (log scale)\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 23, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1                 camcorder_0.1.0           \n [3] ggrepel_0.9.6              PerformanceAnalytics_2.0.8\n [5] quantmod_0.4.26            TTR_0.24.4                \n [7] xts_0.14.1                 zoo_1.8-12                \n [9] tidyquant_1.0.11           scales_1.3.0              \n[11] skimr_2.1.5                janitor_2.2.0             \n[13] showtext_0.9-7             showtextdb_3.0            \n[15] sysfonts_0.8.9             ggtext_0.1.2              \n[17] lubridate_1.9.3            forcats_1.0.0             \n[19] stringr_1.5.1              dplyr_1.1.4               \n[21] purrr_1.0.2                readr_2.1.5               \n[23] tidyr_1.3.1                tibble_3.2.1              \n[25] ggplot2_3.5.1              tidyverse_2.0.0           \n\nloaded via a namespace (and not attached):\n [1] rlang_1.1.6         magrittr_2.0.3      furrr_0.3.1        \n [4] snakecase_0.11.1    compiler_4.4.0      systemfonts_1.1.0  \n [7] vctrs_0.6.5         quadprog_1.5-8      pkgconfig_2.0.3    \n[10] fastmap_1.2.0       magick_2.8.5        utf8_1.2.4         \n[13] rmarkdown_2.29      markdown_1.13       prodlim_2024.06.25 \n[16] tzdb_0.5.0          ragg_1.3.3          xfun_0.49          \n[19] jsonlite_1.8.9      recipes_1.2.1       parallel_4.4.0     \n[22] R6_2.5.1            stringi_1.8.4       rsample_1.3.0      \n[25] parallelly_1.43.0   rpart_4.1.23        Rcpp_1.0.13-1      \n[28] knitr_1.49          future.apply_1.11.3 base64enc_0.1-3    \n[31] pacman_0.5.1        Matrix_1.7-0        splines_4.4.0      \n[34] nnet_7.3-19         timechange_0.3.0    tidyselect_1.2.1   \n[37] rstudioapi_0.17.1   yaml_2.3.10         timeDate_4041.110  \n[40] codetools_0.2-20    curl_6.0.0          listenv_0.9.1      \n[43] lattice_0.22-6      withr_3.0.2         evaluate_1.0.1     \n[46] timetk_2.9.0        future_1.34.0       survival_3.5-8     \n[49] xml2_1.3.6          pillar_1.9.0        renv_1.0.3         \n[52] generics_0.1.3      rprojroot_2.0.4     hms_1.1.3          \n[55] commonmark_1.9.2    munsell_0.5.1       globals_0.16.3     \n[58] class_7.3-22        glue_1.8.0          tools_4.4.0        \n[61] data.table_1.16.2   gower_1.0.2         grid_4.4.0         \n[64] RobStatTM_1.0.11    ipred_0.9-15        colorspace_2.1-1   \n[67] repr_1.1.7          cli_3.6.4           textshaping_0.4.0  \n[70] rsvg_2.6.1          fansi_1.0.6         svglite_2.1.3      \n[73] lava_1.8.1          gtable_0.3.6        digest_0.6.37      \n[76] farver_2.1.2        gifski_1.32.0-1     htmlwidgets_1.6.4  \n[79] htmltools_0.5.8.1   lifecycle_1.0.4     hardhat_1.4.1      \n[82] gridtext_0.1.5      MASS_7.3-60.2      \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_23.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nYahoo Finance via { tidyquant } { tidyquant }\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_25.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_25.html",
    "title": "NBA Team Risk Matrix (2023-24 Season)",
    "section": "",
    "text": "Figure 1: NBA Team Risk Matrix visualization showing team performance uncertainty vs. win percentage for 2023-24 season. Teams are plotted in four quadrants: high-risk/unpredictable (upper left), good but unpredictable (upper right), consistently poor (lower left), and consistently good (lower right). Teams are color-coded by point differential (red=negative, blue=positive) with circle size representing blowout risk. Dallas shows the highest variability, while Boston has the best performance.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n   tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  hoopR,          # Access Men's Basketball Play by Play Data'\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get game results data for the 2023-24 season\ngames &lt;- nba_leaguegamefinder(season = \"2023-24\")\ngames_data &lt;- games$LeagueGameFinderResults\n\n\n3. Examine the Data\n\nShow codeglimpse(games_data)\nskim(games_data)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\ngames_data &lt;- games_data |&gt;  \n  mutate(\n    PLUS_MINUS = as.numeric(PLUS_MINUS),\n    GAME_DATE = as.Date(GAME_DATE),\n    PTS = as.numeric(PTS),\n    OPP_PTS = as.numeric(PTS) - as.numeric(PLUS_MINUS)\n  )\n\nteam_variability &lt;- games_data |&gt;\n  group_by(TEAM_NAME) |&gt;\n  summarize(\n    games_played = n(),\n    avg_points = mean(as.numeric(PTS)),\n    avg_point_diff = mean(PLUS_MINUS),\n    points_sd = sd(as.numeric(PTS)),\n    margin_sd = sd(PLUS_MINUS),\n    win_pct = sum(WL == \"W\") / n(),\n    blowout_risk = sum(PLUS_MINUS &lt;= -10) / games_played,\n    team_abbr = first(TEAM_ABBREVIATION),\n    .groups = \"drop\"\n  ) |&gt;\n  filter(games_played &gt;= 10) |&gt;\n  arrange(desc(margin_sd))\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"#C62828\", \"#EF6C00\", \"#B71C1C\", \"#2E7D32\",\n    \"#D32F2F\", \"#9E9E9E\", \"#1976D2\"\n    )\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"NBA Team Risk Matrix (2023-24 Season)\",\n                          width = 60) \n\nsubtitle_text &lt;- str_wrap(\"Mapping team performance uncertainty against win probability\",\n                          width = 60)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 25,\n  source_text =  \"ESPN via { hoopR } package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Legend elements\n    legend.position = \"top\",\n    legend.margin = margin(t = 5, b = 15),\n    legend.background = element_rect(fill = NA, color = NA),\n    legend.key = element_rect(fill = NA, color = NA),\n    legend.title = element_text(size = rel(0.71), face = \"bold\"),\n    legend.text = element_text(size = rel(0.64)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(team_variability, \n       aes(x = win_pct, y = margin_sd)) +\n  # Geoms\n  geom_hline(\n    yintercept = median(team_variability$margin_sd), \n    linetype = \"dashed\", color = \"gray70\", size = 0.5\n    ) +\n  geom_vline(\n    xintercept = 0.5, linetype = \"dashed\", \n    color = \"gray70\", size = 0.5\n    ) +\n  geom_point(\n    aes(size = blowout_risk, color = avg_point_diff), \n    alpha = 0.9, stroke = 0.5\n    ) +\n  geom_text_repel(\n    aes(label = team_abbr, color = avg_point_diff),\n    size = 3.5, fontface = \"bold\", box.padding = 0.35,\n    min.segment.length = 0.2, segment.alpha = 0.5,\n    force = 1, max.overlaps = 15, seed = 123\n    ) +\n  # Annotate\n  annotate(\n    \"text\", x = 0.25, y = max(team_variability$margin_sd) - 1.3, \n    label = \"HIGH RISK / UNPREDICTABLE\", color = colors$palette[1], fontface = \"bold\", size = 4\n    ) +\n  annotate(\n    \"text\", x = 0.75, y = max(team_variability$margin_sd) - 1.3, \n    label = \"GOOD BUT UNPREDICTABLE\", color = colors$palette[2], fontface = \"bold\", size = 4\n    ) +\n  annotate(\n    \"text\", x = 0.25, y = median(team_variability$margin_sd) - 0.5, \n    label = \"CONSISTENTLY POOR\", color = colors$palette[3], fontface = \"bold\", size = 4\n    ) +\n  annotate(\n    \"text\", x = 0.75, y = median(team_variability$margin_sd) - 0.5, \n    label = \"CONSISTENTLY GOOD\", color = colors$palette[4], fontface = \"bold\", size = 4\n    ) +\n  annotate(\n    \"text\", x = 0.3, y = 11.5, \n    label = \"Circle size represents likelihood of 10+ point loss\", \n    color = \"#333333\", size = 3, fontface = \"italic\"\n    ) +\n  # Scales\n  scale_color_gradient2(\n    low = colors$palette[5], mid = colors$palette[6], high = colors$palette[7],\n    midpoint = 0, \n    name = \"Average Point Differential\",\n    breaks = c(-10, -5, 0, 5, 10),\n    labels = c(\"-10\", \"-5\", \"0\", \"+5\", \"+10\"),\n    guide = guide_colorbar(\n      title.position = \"top\",\n      title.hjust = 0.5,\n      barwidth = 12,\n      barheight = 0.7,\n      frame.colour = NA,\n      ticks.colour = \"black\"\n    )\n  ) +\n  scale_size_continuous(\n    range = c(2.5, 7),\n    guide = \"none\"\n  ) +\n  scale_x_continuous(\n    labels = percent_format(accuracy = 1), \n    limits = c(0.15, 0.85),\n    breaks = seq(0.2, 0.8, by = 0.1)\n  ) +\n  scale_y_continuous(\n    limits = c(min(team_variability$margin_sd) * 0.95, max(team_variability$margin_sd) * 1.05)\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Win Percentage\",\n    y = \"Performance Uncertainty\\n(Point Differential Standard Deviation)\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 25, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 hoopR_2.1.0     ggrepel_0.9.6  \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    farver_2.1.2        fastmap_1.2.0      \n [4] pacman_0.5.1        promises_1.3.0      digest_0.6.37      \n [7] timechange_0.3.0    lifecycle_1.0.4     rsvg_2.6.1         \n[10] processx_3.8.4      magrittr_2.0.3      compiler_4.4.0     \n[13] rlang_1.1.6         tools_4.4.0         utf8_1.2.4         \n[16] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[19] labeling_0.4.3      htmlwidgets_1.6.4   curl_6.0.0         \n[22] xml2_1.3.6          repr_1.1.7          websocket_1.4.2    \n[25] withr_3.0.2         grid_4.4.0          fansi_1.0.6        \n[28] colorspace_2.1-1    future_1.34.0       globals_0.16.3     \n[31] cli_3.6.4           rmarkdown_2.29      ragg_1.3.3         \n[34] generics_0.1.3      RcppParallel_5.1.10 rstudioapi_0.17.1  \n[37] httr_1.4.7          tzdb_0.5.0          commonmark_1.9.2   \n[40] chromote_0.4.0      rvest_1.0.4         parallel_4.4.0     \n[43] base64enc_0.1-3     vctrs_0.6.5         jsonlite_1.8.9     \n[46] hms_1.1.3           listenv_0.9.1       systemfonts_1.1.0  \n[49] magick_2.8.5        glue_1.8.0          parallelly_1.43.0  \n[52] gifski_1.32.0-1     codetools_0.2-20    ps_1.8.1           \n[55] stringi_1.8.4       gtable_0.3.6        later_1.3.2        \n[58] munsell_0.5.1       furrr_0.3.1         pillar_1.9.0       \n[61] htmltools_0.5.8.1   R6_2.5.1            textshaping_0.4.0  \n[64] rprojroot_2.0.4     evaluate_1.0.1      markdown_1.13      \n[67] gridtext_0.1.5      snakecase_0.11.1    renv_1.0.3         \n[70] Rcpp_1.0.13-1       svglite_2.1.3       xfun_0.49          \n[73] pkgconfig_2.0.3    \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_25.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nESPN via { hoopR } package: hoopR\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_27.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_27.html",
    "title": "S&P 500 Price Uncertainty and Noise",
    "section": "",
    "text": "Figure 1: S&P 500 price chart showing historical performance from 2022-2025, featuring a smooth trend line (signal) overlaid with actual price movements (noise). A dashed vertical line marks the present, followed by forecast uncertainty bands at 50%, 80%, and 95% confidence levels. The signal-to-noise ratio is 7.5.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  quantmod,       # Quantitative Financial Modelling Framework\n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# Get S&P 500 data (just last 2 years to keep it faster)\ngetSymbols(\"^GSPC\", from = \"2022-01-01\")\n\n[1] \"GSPC\"\n\nShow code# Convert to data frame and prepare data\nsp500_df &lt;- GSPC |&gt;  \n  as.data.frame() |&gt;\n  rownames_to_column(var = \"date\") |&gt;\n  mutate(date = as.Date(date)) |&gt;\n  select(date, GSPC.Adjusted) |&gt;\n  rename(price = GSPC.Adjusted)  \n\n\n3. Examine the Data\n\nShow codeglimpse(sp500_df)\nskim(sp500_df)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\n# Calculate log returns\nsp500_df &lt;- sp500_df |&gt;\n  arrange(date) |&gt;\n  mutate(log_return = c(NA, diff(log(price))))\n\n# Decompose the signal into trend and noise components\n# Use loess smoothing to extract the trend\nloess_fit &lt;- loess(price ~ as.numeric(date), data = sp500_df, span = 0.15)\nsp500_df$trend &lt;- predict(loess_fit)\nsp500_df$noise &lt;- sp500_df$price - sp500_df$trend\n\n# Calculate noise metrics\nnoise_sd &lt;- sd(sp500_df$noise, na.rm = TRUE)\nnoise_range &lt;- max(sp500_df$noise, na.rm = TRUE) - min(sp500_df$noise, na.rm = TRUE)\nsignal_to_noise &lt;- sd(sp500_df$trend, na.rm = TRUE) / noise_sd\n\n# Calculate historical volatility (standard deviation of returns)\nvol &lt;- sd(sp500_df$log_return, na.rm = TRUE)\n\n# Create forecast data\nlast_date &lt;- max(sp500_df$date)\nlast_price &lt;- sp500_df |&gt; filter(date == last_date) |&gt; pull(price)\nforecast_days &lt;- 60\n\n# Create date sequence for weekdays only\nall_dates &lt;- seq.Date(from = last_date + days(1), \n                      by = \"day\", \n                      length.out = forecast_days * 1.5) # Add buffer for weekends\nforecast_dates &lt;- all_dates[!weekdays(all_dates) %in% c(\"Saturday\", \"Sunday\")]\nforecast_dates &lt;- head(forecast_dates, forecast_days)\n\n# Simple random walk simulation for forecasting\nset.seed(123)\nn_simulations &lt;- 1000\nsimulations &lt;- matrix(nrow = length(forecast_dates), ncol = n_simulations)\n\nfor (i in 1:n_simulations) {\n  # Start with last known price\n  price &lt;- last_price\n  # Generate random returns based on historical volatility\n  random_returns &lt;- rnorm(length(forecast_dates), mean = 0, sd = vol)\n  \n  for (j in 1:length(forecast_dates)) {\n    # Apply random return\n    price &lt;- price * exp(random_returns[j])\n    simulations[j, i] &lt;- price\n  }\n}\n\n# Calculate percentiles for confidence intervals\nforecast_df &lt;- data.frame(\n  date = forecast_dates,\n  mean = rowMeans(simulations),\n  lower_95 = apply(simulations, 1, quantile, probs = 0.025),\n  lower_80 = apply(simulations, 1, quantile, probs = 0.1),\n  lower_50 = apply(simulations, 1, quantile, probs = 0.25),\n  upper_50 = apply(simulations, 1, quantile, probs = 0.75),\n  upper_80 = apply(simulations, 1, quantile, probs = 0.9),\n  upper_95 = apply(simulations, 1, quantile, probs = 0.975)\n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"#8C1C13\", \"#BF4342\", \"#E7D7C1\", \"#1A4D2E\"\n    )\n  )\n\n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_wrap(\"S&P 500 Price Uncertainty and Noise\",\n                          width = 70) \n\nsubtitle_text &lt;- str_wrap(\"Visualizing price trend, random variations, and forecast uncertainty\",\n                          width = 80)\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 27,\n  source_text =  \"Yahoo Finance via { quantmod }\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(r = 10)),\n    axis.title.x = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(t = 10)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major.x = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme) \n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot() +\n  # Geom\n  geom_line( # tend line\n    data = sp500_df, aes(x = date, y = trend), \n    color = colors$palette[4], linewidth = 0.9\n    ) +\n  geom_line( # noise around trend\n    data = sp500_df, aes(x = date, y = price), \n    color = colors$palette[4], linewidth = 0.4, alpha = 0.6\n    ) +\n  geom_ribbon(\n    data = forecast_df,  # 95% prediction interval\n    aes(x = date, ymin = lower_95, ymax = upper_95), \n    fill = colors$palette[1], alpha = 0.15\n    ) +\n  geom_ribbon(\n    data = forecast_df,  # 80% prediction interval\n    aes(x = date, ymin = lower_80, ymax = upper_80), \n    fill = colors$palette[2], alpha = 0.2\n    ) +\n  geom_ribbon(\n    data = forecast_df,  # 50% prediction interval\n    aes(x = date, ymin = lower_50, ymax = upper_50), \n    fill = colors$palette[3], alpha = 0.3,\n    ) +\n  geom_line(\n    data = forecast_df,  # Mean forecast\n    aes(x = date, y = mean), \n    color = colors$palette[1], linetype = \"dashed\", linewidth = 0.5\n    ) +\n   geom_vline(\n    xintercept = as.numeric(last_date), \n    linetype = \"dashed\", color = \"gray50\"\n    ) +\n  # Annotation\n  annotate(\n    \"text\", x = as.Date(\"2022-04-01\"), y = max(sp500_df$price), \n           label = \"Historical Performance\", hjust = 0, \n           fontface = \"bold\", color = colors$palette[4], size = 3.5\n    ) +\n  annotate(\n    \"text\", x = as.Date(\"2022-04-01\"), y = max(sp500_df$price) * 0.98, \n    label = paste0(\"Trend (signal) with noise overlay\"), \n    hjust = 0, color = colors$palette[4], size = 3\n    ) +\n  annotate(\n    \"text\", x = last_date + days(110), y = max(forecast_df$upper_95) * 0.95, \n    label = \"95%\", color = colors$palette[1], fontface = \"bold\", size = 3.5\n    ) +\n  annotate(\n    \"text\", x = last_date + days(110), y = max(forecast_df$upper_80), \n    label = \"80%\", color = colors$palette[1], fontface = \"bold\", size = 3.5,\n    vjust = 5\n    ) +\n  annotate(\n    \"text\", x = last_date + days(110), y = max(forecast_df$upper_50), \n    label = \"50%\", color = colors$palette[1], fontface = \"bold\", size = 3.5,\n    vjust = 5\n    ) +\n  annotate(\n    \"text\", x = forecast_dates[length(forecast_dates)/4], y = min(forecast_df$lower_95) * 0.97, \n    label = paste0(\"Signal-to-noise ratio: \", round(signal_to_noise, 1)), \n    hjust = 0.5, fontface = \"italic\", size = 3\n    ) +\n  # Scales\n  scale_y_continuous(\n    labels = scales::dollar_format()\n    ) +\n  scale_x_date(\n    date_breaks = \"6 months\", date_labels = \"%b %Y\"\n    ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Price (USD)\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(2),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 14)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 27, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 quantmod_0.4.26 TTR_0.24.4     \n [5] xts_0.14.1      zoo_1.8-12      ggrepel_0.9.6   scales_1.3.0   \n [9] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n[13] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[17] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[21] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 lattice_0.22-6   \n [5] tzdb_0.5.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       pillar_1.9.0     \n[25] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[29] stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.4        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] timechange_0.3.0  rmarkdown_2.29    ragg_1.3.3        hms_1.1.3        \n[45] evaluate_1.0.1    knitr_1.49        markdown_1.13     rlang_1.1.6      \n[49] gridtext_0.1.5    Rcpp_1.0.13-1     glue_1.8.0        xml2_1.3.6       \n[53] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9   \n[57] R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_27.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nYahoo Finance via { quantmod } quantmod\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_29.html",
    "href": "data_visualizations/30DayChartChallenge/2025/30dcc_2025_29.html",
    "title": "Meteorite Mass Distribution and Uncertainty",
    "section": "",
    "text": "Figure 1: A halfeye plot showing meteorite mass distribution by class (H Chondrite, L Chondrite, Pallasite, and Iron) with confidence intervals. Each class is split by discovery type (Observed Fall in purple, Found Later in teal).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,          # Compact and Flexible Summaries of Data\n  scales,         # Scale Functions for Visualization\n  lubridate,      # Make Dealing with Dates a Little Easier\n  ggdist,         # Visualizations of Distributions and Uncertainty \n  camcorder       # Record Your Plot History\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  = 8,\n    height = 8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codemeteorite_landings &lt;- read_csv(\n  here::here(\n    \"data/30DayChartChallenge/2025/Meteorite_Landings_20240731.csv\")) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(meteorite_landings)\nskim(meteorite_landings)\n\n\n4. Tidy Data\n\nShow code### |- Tidy ----\nmeteorites &lt;- meteorite_landings |&gt; \n  mutate(\n    fall = if_else(tolower(fall) == \"fell\", \"Observed Fall\", \"Found Later\"),\n    mass_g = as.numeric(mass_g),\n    year = as.numeric(year),\n    class_simplified = case_when(\n      str_detect(recclass, \"^H\") ~ \"H Chondrite\",\n      str_detect(recclass, \"^L\") ~ \"L Chondrite\",\n      str_detect(recclass, \"^LL\") ~ \"LL Chondrite\",\n      str_detect(recclass, \"Iron\") ~ \"Iron\",\n      str_detect(recclass, \"Pallasite\") ~ \"Pallasite\",\n      TRUE ~ \"Other\"\n    )\n  ) |&gt;\n  filter(\n    !is.na(mass_g) & !is.na(year) & !is.na(recclass),\n    class_simplified %in% c(\"H Chondrite\", \"L Chondrite\", \"Iron\", \"Pallasite\"),\n    mass_g &gt;= 10 & mass_g &lt;= 100000\n  ) \n\n# Class statistics \nclass_stats &lt;- meteorites |&gt;\n  group_by(class_simplified) |&gt;\n  summarize(\n    median_mass = median(mass_g),\n    count = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(desc(median_mass))\n\n# Reorder class factor levels based on median mass\nmeteorites &lt;- meteorites |&gt;\n  mutate(\n    class_simplified = factor(\n      class_simplified, \n      levels = class_stats$class_simplified)\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Observed Fall\" = \"#593C8F\", \"Found Later\" = \"#1B9AAA\", \"Other\" = 'gray'\n    )\n  )          \n \n### |-  titles and caption ----\n# text\ntitle_text    &lt;- str_glue(\"Meteorite Mass Distribution and Uncertainty\")\n\nsubtitle_text &lt;- str_glue(\"Observed falls show less uncertainty than found meteorites across all classes\")\n\ncaption_text &lt;- create_dcc_caption(\n  dcc_year = 2025,\n  dcc_day = 29,\n  source_text =  \"Meteorite Landings. University of Rochester\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Legend\n    legend.position = \"bottom\",\n    \n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.y = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(r = 10)),\n    axis.title.x = element_text(color = colors$text, size = rel(0.8), \n                                hjust = 0.5, margin = margin(t = 10)),\n    \n    axis.line.x = element_line(color = \"gray50\", linewidth = .2),\n    \n    # Grid elements\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray65\", linewidth = 0.05),\n    panel.grid.major.x = element_line(color = \"gray65\", linewidth = 0.05),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme) \n\n\n6. Plot\n\nShow code### |-  Plot ----\np &lt;- ggplot(meteorites, aes(x = class_simplified, y = mass_g, fill = fall)) +\n  # Geoms\n  stat_halfeye(\n    aes(fill = fall),\n    .width = c(0.50, 0.80, 0.95),\n    interval_alpha = 0.8,\n    slab_alpha = 0.7,\n    point_alpha = 1.0,\n    scale = 0.8,\n    position = position_dodge(width = 0.6),\n    color = \"black\"\n  ) +\n  # Scales\n  scale_y_log10(\n    labels = function(x) paste0(x / 1000, \" kg\"),\n    breaks = c(10, 100, 1000, 10000, 100000)\n  ) +\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Discovery Type\"\n  ) +\n  scale_x_discrete(\n    labels = function(x) {\n      counts &lt;- class_stats$count[match(x, class_stats$class_simplified)]\n      paste0(x, \"\\n(n= \", scales::comma(counts), \")\")\n    }\n  ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Mass (kilograms, log scale)\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.9),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 0.8,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      lineheight = 0.65,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 10, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"30daychartchallenge\", \n  year = 2025, \n  day = 29, \n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      camcorder_0.1.0 ggdist_3.3.2    scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6         xfun_0.49            htmlwidgets_1.6.4   \n [4] tzdb_0.5.0           vctrs_0.6.5          tools_4.4.0         \n [7] generics_0.1.3       curl_6.0.0           parallel_4.4.0      \n[10] gifski_1.32.0-1      fansi_1.0.6          pacman_0.5.1        \n[13] pkgconfig_2.0.3      distributional_0.5.0 lifecycle_1.0.4     \n[16] farver_2.1.2         compiler_4.4.0       textshaping_0.4.0   \n[19] munsell_0.5.1        repr_1.1.7           codetools_0.2-20    \n[22] snakecase_0.11.1     htmltools_0.5.8.1    yaml_2.3.10         \n[25] crayon_1.5.3         pillar_1.9.0         magick_2.8.5        \n[28] commonmark_1.9.2     tidyselect_1.2.1     digest_0.6.37       \n[31] stringi_1.8.4        labeling_0.4.3       rsvg_2.6.1          \n[34] rprojroot_2.0.4      fastmap_1.2.0        grid_4.4.0          \n[37] colorspace_2.1-1     cli_3.6.4            magrittr_2.0.3      \n[40] base64enc_0.1-3      utf8_1.2.4           withr_3.0.2         \n[43] bit64_4.5.2          timechange_0.3.0     rmarkdown_2.29      \n[46] bit_4.5.0            ragg_1.3.3           hms_1.1.3           \n[49] evaluate_1.0.1       knitr_1.49           markdown_1.13       \n[52] rlang_1.1.6          gridtext_0.1.5       Rcpp_1.0.13-1       \n[55] glue_1.8.0           xml2_1.3.6           renv_1.0.3          \n[58] vroom_1.6.5          svglite_2.1.3        rstudioapi_0.17.1   \n[61] jsonlite_1.8.9       R6_2.5.1             systemfonts_1.1.0   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in 30dcc_2025_29.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nPandit, Aabha; Romanowski, Alois; Owen, Heather (2024). Meteorite Landings. University of Rochester.\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_05.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_05.html",
    "title": "World Happiness Report 2024",
    "section": "",
    "text": "Original\nThe original visualization comes from the World Happiness Report 2024, Figure 2.1, showing country rankings by life evaluations in 2021-2023.\nYou can view the interactive visualization here on Tableau Public.\n\n\nOriginal visualization from World Happiness Report 2024\n\nSource: World Happiness Report 2024\nMakeover\n\n\n\n\n\nFigure 1: A beeswarm plot showing the distribution of different factors contributing to happiness scores across countries. Factors include Generosity, Low Corruption, Health, Freedom, Social Support, GDP, and overall Happiness Score. Each point represents a country, with Finland and Afghanistan often appearing as extremes. Values are color-coded from blue (low) to brown (high), with red diamond markers showing mean values for each factor.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\ntidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    readxl,         # Read Excel Files\n    ggbeeswarm,     # Categorical Scatter (Violin Point) Plots \n    scico,          # Colour Palettes Based on the Scientific Colour-Maps \n    ggrepel         # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n)\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codeworld_happiness_2024 &lt;- read_excel(\n  here::here('data/DataForFigure2.1 with sub bars 2024.xlsx')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(world_happiness_2024)\nskim(world_happiness_2024)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nhappiness_long &lt;- world_happiness_2024 |&gt;\n  select(\n    # Rename columns\n    country_name,\n    \"Happiness Score\" = ladder_score,\n    \"GDP\" = explained_by_log_gdp_per_capita,\n    \"Social Support\" = explained_by_social_support,\n    \"Health\" = explained_by_healthy_life_expectancy,\n    \"Freedom\" = explained_by_freedom_to_make_life_choices,\n    \"Generosity\" = explained_by_generosity,\n    \"Low Corruption\" = explained_by_perceptions_of_corruption\n  ) |&gt;\n  # Pivot longer\n  pivot_longer(\n    -country_name,\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) |&gt;\n  # add metric mea\n  group_by(metric) |&gt;\n  mutate(\n    metric_mean = mean(value, na.rm = TRUE)\n  ) |&gt;\n  ungroup() |&gt;\n  # Factor reorder by mean\n  mutate(\n    metric = fct_reorder(metric, metric_mean, .desc = TRUE)\n  )\n\n# data labels df\nlabel_data &lt;- bind_rows(\n  # Get minimum values\n  happiness_long |&gt;\n    group_by(metric) |&gt;\n    slice_min(order_by = value, n = 1, with_ties = FALSE),\n  \n  # Get maximum values\n  happiness_long |&gt;\n    group_by(metric) |&gt;\n    slice_max(order_by = value, n = 1, with_ties = FALSE)\n  ) |&gt;\n  ungroup() |&gt;\n  distinct(metric, country_name, value)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors()\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"World Happiness Report 2024\")\nsubtitle_text &lt;- str_glue(\"Figure 2.1: Distribution of Contributing Factors to Life Evaluations\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 05,\n    source_text = \"World Happiness Report Data Dashboard | The World Happiness Report\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n      # Legend\n      legend.position = c(0.8, 1.1),    \n      legend.justification = c(0.5, 1),\n      legend.margin = margin(b = 5),\n      legend.title = element_text(size = rel(0.7)),\n      legend.text = element_text(size = rel(0.6)),\n      legend.direction = \"horizontal\",\n      \n      # Axis formatting\n      axis.title = element_text(color = colors$text, size = rel(1), face = \"bold\"),\n      axis.text.y = element_text(color = colors$text, size = rel(0.95), face = \"bold\"),\n      \n      # Grid customization\n      panel.grid.minor = element_blank(),\n      panel.grid.major.y = element_blank(),\n    \n      # Plot margins \n      plot.margin = margin(t = 20, r = 20, b = 20, l = 20)\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(happiness_long, aes(x = metric, y = value)) +\n  # Geom\n  geom_hline(\n    yintercept = seq(0, 8, by = 2),\n    color = \"gray90\",\n    linewidth = 0.5\n  ) +\n  geom_quasirandom(\n    aes(color = value),\n    width = 0.4,\n    size = 2.5,\n    alpha = 0.7,\n    shape = 21,\n    stroke = 0.5\n  ) +\n  geom_text_repel(\n    data = label_data,\n    aes(label = country_name),\n    size = 3,\n    fontface = \"plain\",\n    max.overlaps = Inf,\n    box.padding = 0.5,\n    point.padding = 0.3,\n    segment.color = \"gray40\",\n    segment.size = 0.3,\n    min.segment.length = 0,\n    seed = 123,           \n    direction = \"both\",   \n    force = 1,           \n    force_pull = 0.5     \n  ) +\n  geom_point(                     # Mean indicators\n    data = distinct(happiness_long, metric, metric_mean),\n    aes(y = metric_mean),\n    color = \"red\",\n    fill = \"white\",\n    size = 3,\n    shape = 23\n  ) +\n  # Scales\n  scale_x_discrete() +\n  scale_y_continuous(\n    expand = expansion(mult = c(0.35, 0)),\n    breaks = seq(0, 8, by = 2),\n    limits = c(0, 9)) +\n  scale_color_scico(\n    palette = \"roma\",\n    direction = -1,\n    guide = guide_colorbar(\n      title.position = \"top\",\n      barwidth = 10,\n      barheight = 1,\n      ticks.linewidth = 1,\n      title.hjust = 0.5\n    )\n  ) +\n  coord_flip(clip = 'off') +\n  # Labs\n  labs(\n    x = NULL,\n    y = \"Value\",\n    color = \"Value\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size   = rel(2),\n      family = fonts$title,\n      face   = \"bold\",\n      color  = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size   = rel(0.95),\n      family = fonts$subtitle,\n      color  = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size   = rel(0.6),\n      family = fonts$caption,\n      color  = colors$caption,\n      hjust  = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot (\n  p, type = \"makeovermonday\", \n  year = 2025, week = 05, width = 10, height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggrepel_0.9.6    scico_1.5.0      ggbeeswarm_0.7.2 readxl_1.4.3    \n [5] camcorder_0.1.0  here_1.0.1       glue_1.8.0       scales_1.3.0    \n [9] skimr_2.1.5      janitor_2.2.0    showtext_0.9-7   showtextdb_3.0  \n[13] sysfonts_0.8.9   ggtext_0.1.2     lubridate_1.9.3  forcats_1.0.0   \n[17] stringr_1.5.1    dplyr_1.1.4      purrr_1.0.2      readr_2.1.5     \n[21] tidyr_1.3.1      tibble_3.2.1     ggplot2_3.5.1    tidyverse_2.0.0 \n\nloaded via a namespace (and not attached):\n [1] beeswarm_0.4.0    gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4\n [5] tzdb_0.4.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  vipor_0.4.7       htmltools_0.5.8.1 yaml_2.3.10      \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1       \n[33] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[37] cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[41] withr_3.0.2       timechange_0.3.0  rmarkdown_2.29    cellranger_1.1.0 \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] xml2_1.3.6        renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1\n[57] jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_05.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nArticle:\n\nWorld Happiness Report 2024: Figure 2.1: Country Rankings by Life Evaluations in 2021-2023 (Tab 2)\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 05: World Happiness Report 2024\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_07.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_07.html",
    "title": "Most Popular Valentine’s Candy Across U.S. States (2024)",
    "section": "",
    "text": "Original\nThe original visualization Most Popular Valentine’s Candy by State comes from Candystore.com\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: A horizontal stacked bar chart showing Valentine’s candy preferences across U.S. states in 2024. Each bar represents a candy type, with segments indicating the number of states ranking it as 1st, 2nd, or 3rd choice. Conversation Hearts leads with 46 states, followed by Heart-Shaped Box of Chocolates with 37 states. The remaining candies, including M&M’s, Hershey Kisses, and others, received fewer state rankings.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    camcorder       # Record Your Plot History \n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codesv_candies_raw &lt;- read_csv(\n  here::here('data/MakeoverMonday_ SV_day.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(sv_candies_raw)\nskim(sv_candies_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nsv_candies_clean &lt;- sv_candies_raw |&gt;\n  rename_with(~str_remove(., \"^x\"), starts_with(\"x\"))\n\n# Create long format data\ncandies_long &lt;- sv_candies_clean |&gt;\n  pivot_longer(\n    cols = ends_with(\"2024\"),\n    names_to = \"rank\",\n    values_to = \"candy\"\n  ) |&gt;\n  # Clean up rank names\n  mutate(rank = case_when(\n    rank == \"1st_place_2024\" ~ \"1st Place\",\n    rank == \"2nd_place_2024\" ~ \"2nd Place\",\n    rank == \"3rd_place_2024\" ~ \"3rd Place\"\n  ),\n  rank = factor(rank, levels = c(\"1st Place\", \"2nd Place\", \"3rd Place\"))\n  )\n\n# Prepare data with totals\ncandies_with_counts &lt;- candies_long |&gt;\n  mutate(rank = factor(rank, levels = c(\"1st Place\", \"2nd Place\", \"3rd Place\"))) |&gt; \n  count(candy, rank) |&gt;\n  group_by(candy) |&gt;  \n  mutate(\n    total = sum(n)\n  ) |&gt;\n  ungroup() |&gt;\n  arrange(-total, candy)\n\n# Create total summary data\ntotal_summary &lt;- candies_with_counts |&gt; \n  group_by(candy) |&gt; \n  summarize(\n    total = sum(n),\n    y = total,\n    rank = \"1st Place\"  \n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"1st Place\" = \"#FFB6C1\",    \n                                       \"2nd Place\" = \"#FF69B4\",     \n                                       \"3rd Place\" = \"#C71585\"))\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Most Popular Valentine's Candy Across U.S. States (2024)\")\nsubtitle_text &lt;- str_glue(\"Number of states ranking each candy as their 1st, 2nd, or 3rd choice\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 07,\n    source_text = \"Candystore.com\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n    \n    panel.spacing.x       = unit(2, 'lines'),\n    panel.spacing.y       = unit(1, 'lines'),\n    panel.grid.major.x    = element_line(color = alpha(colors[5], 0.2), linewidth = 0.2),\n    panel.grid.major.y    = element_blank(),\n    panel.grid.minor      = element_blank(),\n    \n    legend.position = \"top\"\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(candies_with_counts, \n       aes(x = reorder(candy, total), \n           y = n,\n           fill = rank)) +  \n  \n  # Geoms\n  geom_col() +\n  geom_text(aes(label = n),\n            position = position_stack(vjust = 0.5),\n            color = \"white\",\n            size = 3) +\n  geom_text(data = total_summary,\n            aes(y = y, label = paste0(\"(\", total, \")\")),\n            hjust = -0.2,\n            color = colors$text,\n            size = 3) +\n  \n  # Scales\n  scale_x_discrete() +\n  scale_y_continuous(\n    expand = expansion(mult = c(0, 0.1))\n  ) +\n  coord_flip() +\n  scale_fill_manual(values = colors$palette) +\n  \n  # Labs\n  labs(\n    x = NULL,\n    y = \"Number of States\",\n    fill = \"Ranking\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size   = rel(1.6),\n      family = fonts$title,\n      face   = \"bold\",\n      color  = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size   = rel(1),\n      family = fonts$subtitle,\n      color  = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size   = rel(0.6),\n      family = fonts$caption,\n      color  = colors$caption,\n      hjust  = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 07,\n  width = 8, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1       \n[33] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[37] cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[41] withr_3.0.2       bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29   \n[45] bit_4.5.0         ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[49] knitr_1.49        markdown_1.13     rlang_1.1.4       gridtext_0.1.5   \n[53] Rcpp_1.0.13-1     xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[57] rstudioapi_0.17.1 vroom_1.6.5       jsonlite_1.8.9    R6_2.5.1         \n[61] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_07.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nArticle:\n\nMost Popular Valentine’s Candy by State: Most Popular Valentine’s Candy by State\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 07: Candystore.com\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_09.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_09.html",
    "title": "Population Growth Patterns Across Regions",
    "section": "",
    "text": "Original\nThe original visualization All Countries and Economies comes from data.world.org\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: A horizon plot showing population growth rates across different regions from 1960 to 2050. The visualization uses green shades for positive growth and red shades for decline. Eastern and Southern Africa show consistently high growth rates (green), while Europe and North America trend towards decline (red) in later years.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    readxl,         # Read Excel Files\n    ggHoriPlot,     # Horizon Plots for 'ggplot2'\n    camcorder       # Record Your Plot History \n)\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code#' The raw data for the week MakeoverMonday challenge can be downloaded \n#' here: https://data.world/makeovermonday/2025w9-world-population-estimates-projections\n#' \n#' Due to GitHub file size limitation, filter the initial dataset for\n#' the `Population growth (annual %)` indicator only.\n#' The working csv file was saved as `population_growth_raw.csv`\n\n# Initial raw data\n# population_estimates_raw &lt;- read_excel(\n#   'data/2025/Population Estimates.xlsx') |&gt; \n#   clean_names()\n\n# Subset for population_growth only\n# population_estimates_raw$indicator_name |&gt; unique() |&gt; sort()\n\n# populatio_growth_raw &lt;- population_estimates_raw |&gt; \n#   filter(indicator_name == \"Population growth (annual %)\") \n\n# write_csv(x = population_growth_raw, file = 'data/population_growth_raw.csv')\n\npopulation_growth_raw &lt;- read_csv(\n  here::here('data/population_growth_raw.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(population_growth_raw)\nskim(population_growth_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\npopulation_growth_tidy &lt;- population_growth_raw |&gt; \n  pivot_longer(\n    cols = starts_with(\"x\"),     # Select all columns starting with \"x\"\n    names_to = \"year\",           # Create a new column called \"year\"\n    names_prefix = \"x\",          # Remove the \"x\" from the column names\n    values_to = \"growth_rate\"\n    ) |&gt;  \n  filter(str_detect(country_name, \"^(Africa|Asia|Europe|Latin America|North America)\")) |&gt; \n  mutate(\n    year = as.numeric(year),\n    country_name = case_when(\n      country_name == \"Africa Eastern and Southern\" ~ \"Eastern & Southern Africa\",\n      country_name == \"Africa Western and Central\" ~ \"Western & Central Africa\",\n      country_name == \"Latin America & Caribbean\" ~ \"Latin America & Caribbean\",\n      TRUE ~ country_name\n    ),\n    country_name = str_wrap(country_name, width = 30),\n    # Order regions for better visual flow\n    country_name = factor(country_name, levels = rev(unique(country_name)))\n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"#31a354\",  # High Growth \n  \"#78c679\",  # Medium Growth \n  \"#d9f0a3\",  # Low Growth \n  \"#fdae61\",  # Low Decline \n  \"#f16913\",  # Medium Decline \n  \"#d73027\"   # High Decline \n  )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Population Growth Patterns Across Regions\")\nsubtitle_text &lt;- str_wrap(\"Visualizing growth rate trends from 1960 to 2050. Darker shades represent stronger growth (green) or decline (red), with the horizon line indicating zero growth.\", width = 90)\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 09,\n    source_text = \"World Population Estimates & Projections\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    legend.position = \"top\",\n    legend.title = element_text(size = rel(0.79)),\n    legend.text = element_text(size = rel(0.71)),\n    \n    axis.title = element_text(size = rel(1.14)),  \n    axis.text = element_text(size = rel(0.86)),  \n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", size = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n    \n    strip.text.y = element_text(size = rel(0.7), angle = 0), \n    \n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(1, \"lines\"),  \n    panel.spacing.y = unit(0, \"lines\"),\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(data = population_growth_tidy) + \n  \n  # Geoms\n  geom_horizon(\n    aes(x = year, y = growth_rate),\n    origin = \"midpoint\", \n    horizonscale = 6, \n    show.legend = TRUE\n  ) +\n  \n  # Scales\n  scale_x_continuous(\n    breaks = seq(1960, 2050, by = 20),\n    expand = c(0.02, 0.02)\n  ) +\n  scale_y_continuous() +\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Growth Rate\",\n    labels = c(\"High Growth\", \"Medium Growth\", \"Low Growth\",\n               \"Low Decline\", \"Medium Decline\", \"High Decline\")\n  ) +\n  \n  # Labs\n  labs(\n    x = \"Year\",\n    y = NULL,\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n  \n  # Facet\n  facet_grid(country_name ~ ., scales = \"free_y\", space = \"free_y\") +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size   = rel(2.5),\n      family = fonts$title,\n      face   = \"bold\",\n      color  = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size   = rel(1.0),\n      family = fonts$subtitle,\n      color  = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size   = rel(0.6),\n      family = fonts$caption,\n      color  = colors$caption,\n      hjust  = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 09,\n  width = 10, \n  height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0  ggHoriPlot_1.0.1 readxl_1.4.3     here_1.0.1      \n [5] glue_1.8.0       scales_1.3.0     skimr_2.1.5      janitor_2.2.0   \n [9] showtext_0.9-7   showtextdb_3.0   sysfonts_0.8.9   ggtext_0.1.2    \n[13] lubridate_1.9.3  forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4     \n[17] purrr_1.0.2      readr_2.1.5      tidyr_1.3.1      tibble_3.2.1    \n[21] ggplot2_3.5.1    tidyverse_2.0.0 \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pacman_0.5.1     \n[13] pkgconfig_2.0.3   lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0   \n[17] textshaping_0.4.0 munsell_0.5.1     repr_1.1.7        codetools_0.2-20 \n[21] snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3     \n[25] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[29] digest_0.6.37     stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1       \n[33] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[37] cli_3.6.3         magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4       \n[41] withr_3.0.2       bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29   \n[45] bit_4.5.0         cellranger_1.1.0  ragg_1.3.3        hms_1.1.3        \n[49] evaluate_1.0.1    knitr_1.49        markdown_1.13     rlang_1.1.4      \n[53] gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6        renv_1.0.3       \n[57] vroom_1.6.5       svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9   \n[61] R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_09.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nArticle:\n\nWorld Population Estimates & Projections: All Countries and Economies\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 09: World Population Estimates & Projections\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_11.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_11.html",
    "title": "The Transformation of the Global Electric Vehicle Market (2013-2023)",
    "section": "",
    "text": "Original\nThe original visualization Global electric car stock, 2013-2023 comes from International Energy Agency (IEA)\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: The visualization shows the transformation of the global electric vehicle market from 2013-2023. The top section features stacked area charts displaying vehicle stock in millions for BEVs and PHEVs, with regions color-coded (China in red, Europe in blue, ROW in purple, USA in green). China dominates both markets, particularly after 2018. The bottom section presents heatmaps of year-over-year growth percentages by region and powertrain type, with darker blues indicating higher growth rates. Notable patterns include China’s exceptional BEV growth (256% in 2015) and rapid PHEV expansion after 2021. The visualization highlights how the 2021-2023 period added 40M EVs, three times the entire 2013-2020 period.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n      tidyverse,      # Easily Install and Load the 'Tidyverse'\n      ggtext,         # Improved Text Rendering Support for 'ggplot2'\n      showtext,       # Using Fonts More Easily in R Graphs\n      janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n      skimr,          # Compact and Flexible Summaries of Data\n      scales,         # Scale Functions for Visualization\n      glue,           # Interpreted String Literals\n      here,           # A Simpler Way to Find Your Files\n      lubridate,      # Make Dealing with Dates a Little Easier\n      ggpubr,         # 'ggplot2' Based Publication Ready Plots\n      patchwork,      # The Composer of Plots\n      camcorder,      # Record Your Plot History \n      ggrepel,        # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n      directlabels,   # Direct Labels for Multicolor Plots\n      gghighlight     # Highlight Lines and Points in 'ggplot2'\n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  12,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code#' The raw data for the week MakeoverMonday challenge can be downloaded \n#' here: https://data.world/makeovermonday/2025-week-10-river-water-quality/workspace/project-summary?agentid=makeovermonday&datasetid=2025-week-10-river-water-quality\n#' \n\nelectric_car_raw &lt;- read_csv(\n  here::here('data/IEA-EV-dataEV salesHistoricalCars.csv')) |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(electric_car_raw)\nskim(electric_car_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nev_stock &lt;- electric_car_raw |&gt;\n  filter(parameter == \"EV stock\", \n         mode == \"Cars\",\n         category == \"Historical\") |&gt;\n  # Create a simplified region \n  mutate(\n    region_group = case_when(\n      region == \"China\" ~ \"China\",\n      region %in% c(\"EU27\", \"UK\", \"EFTA\", \"Europe\") ~ \"Europe\", \n      region == \"USA\" ~ \"USA\",\n      TRUE ~ \"ROW\"   # Rest of the world\n  ))\n\n# P1. Area Chart Data ----\n\n# A. market data\nev_market_data &lt;- ev_stock |&gt;\n  filter(year &gt;= 2013, year &lt;= 2023) |&gt;\n  filter(powertrain %in% c(\"BEV\", \"PHEV\")) |&gt;       # Include only BEV and PHEV\n  summarize(\n    total = sum(value, na.rm = TRUE), \n    .by = c(year, region_group, powertrain)\n    ) |&gt;\n  # Calculate important metrics for annotations\n  mutate(\n    annual_powertrain_total = sum(total),\n    share_of_powertrain = total / annual_powertrain_total * 100,\n    .by = c(year, powertrain)\n  ) |&gt;\n  # Calculate year-over-year growth rates\n  arrange(year) |&gt;\n  mutate(\n    yoy_growth = (total / lag(total) - 1) * 100,\n    growth_category = case_when(\n      is.na(yoy_growth) ~ \"First year\",\n      yoy_growth &gt; 100 ~ \"High growth (&gt;100%)\",\n      yoy_growth &gt; 50 ~ \"Strong growth (50-100%)\",\n      yoy_growth &gt; 25 ~ \"Moderate growth (25-50%)\",\n      yoy_growth &gt; 0 ~ \"Low growth (0-25%)\",\n      TRUE ~ \"Decline\"\n    ),\n    .by = c(region_group, powertrain)\n  ) \n\n# B. Annotation data for key insights\nannotations &lt;- tibble(\n  year = c(2018, 2021, 2019.5, 2022),\n  powertrain = c(\"BEV\", \"BEV\", \"PHEV\", \"PHEV\"),\n  y_pos = c(15000000, 30000000, 8500000, 23000000),\n  label = c(\n    \"China takes BEV leadership\\naccelerating electrification\",\n    \"Post-COVID surge:\\n2021-2023 added 40M EVs\\n(3x the entire 2013-2020 period)\",\n    \"Europe grows PHEV share\\ndriven by policy incentives\",\n    \"China begins rapid PHEV\\nexpansion from 2021\"\n  ),\n  hjust = c(0.5, 0.5, 0.5, 0.5),\n  vjust = c(1, 0, 1, 0)\n)\n\n# C. Growth highlights data\ngrowth_highlights &lt;- ev_market_data |&gt;\n  filter(!is.na(yoy_growth), yoy_growth &gt; 100, year &gt;= 2017) |&gt;\n  group_by(region_group, powertrain) |&gt;\n  filter(yoy_growth == max(yoy_growth)) |&gt;\n  ungroup() |&gt;\n  arrange(desc(yoy_growth)) |&gt;\n  mutate(\n    label = paste0(\"+\", round(yoy_growth), \"%\"),\n    year = year - 0.2,\n    total = total + 4000000 # move up the label\n  )\n\n# D. Data for direct labeling of regions at the end (2023)\ndirect_labels &lt;- ev_market_data |&gt;\n  filter(year == 2023) |&gt;\n  # Calculate cumulative positions for stacked areas\n  arrange(desc(region_group)) |&gt;  # Reverse order to match stacking\n  mutate(\n    y_pos = cumsum(total) - 0.5 * total,  # Center of each segment\n    label = region_group,\n    .by = powertrain\n  ) \n\n# E. Milestone data\nmilestones &lt;- ev_market_data |&gt;\n  group_by(powertrain) |&gt;\n  summarize(\n    total_2023 = sum(total[year == 2023]),\n    total_2013 = sum(total[year == 2013]),\n    growth_factor = total_2023 / total_2013,\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(\n    label = paste0(powertrain, \" growth:\\n\", round(growth_factor), \"x in 10 years\")\n  )\n\n# P2. Growth Heatmap ----\n\n# A. Reshape growth data for heatmap\ngrowth_heatmap_data &lt;- ev_stock |&gt;\n  filter(year &gt;= 2014, year &lt;= 2023) |&gt;    # Start from 2014 to calculate YoY growth\n  filter(powertrain %in% c(\"BEV\", \"PHEV\")) |&gt;\n  summarize(\n    total = sum(value, na.rm = TRUE), \n    .by = c(region_group, powertrain, year)\n    ) |&gt;\n  arrange(year) |&gt;\n  mutate(\n    yoy_growth = (total / lag(total) - 1) * 100,\n    growth_category = case_when(\n      is.na(yoy_growth) ~ NA_character_,\n      yoy_growth &gt; 100 ~ \"High growth (&gt;100%)\",\n      yoy_growth &gt; 50 ~ \"Strong growth (50-100%)\",\n      yoy_growth &gt; 25 ~ \"Moderate growth (25-50%)\",\n      yoy_growth &gt; 0 ~ \"Low growth (0-25%)\",\n      TRUE ~ \"Decline\"\n    ),\n    .by = c(region_group, powertrain)\n  ) |&gt;\n  filter(!is.na(yoy_growth)) \n\n# change \"ROW\" to \"Rest of the world\" \ngrowth_heatmap_data &lt;- growth_heatmap_data |&gt;\n  mutate(region_label = case_when(\n    region_group == \"ROW\" ~ \"Rest of world\",\n    TRUE ~ as.character(region_group)\n  ),\n  # Create an ordered factor for growth categories\n  growth_category_ordered = factor(\n    growth_category,\n    levels = c(\n      \"High growth (&gt;100%)\", \n      \"Strong growth (50-100%)\", \n      \"Moderate growth (25-50%)\", \n      \"Low growth (0-25%)\",\n      \"Decline\"  \n    )\n  ))\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"China\" = \"#E41A1C\",\n  \"Europe\" = \"#377EB8\", \n  \"USA\" = \"#4DAF4A\",\n  \"ROW\" = \"#984EA3\",\n  \"High growth (&gt;100%)\" = \"#084081\",    \n  \"Strong growth (50-100%)\" = \"#4292C6\", \n  \"Moderate growth (25-50%)\" = \"#9ECAE1\",\n  \"Low growth (0-25%)\" = \"#DEEBF7\"  \n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Transformation of the Global Electric Vehicle Market (2013-2023)\")\nsubtitle_text &lt;- str_glue(\"Growth patterns reveal China's dominance and the accelerating global adoption of electric vehicles\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 11,\n    source_text = \"International Energy Agency (IEA)\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Weekly-specific modifications\n    legend.position = \"top\",\n    legend.title = element_text(size = rel(0.79)),\n    legend.text = element_text(size = rel(0.71)),\n    \n    axis.title = element_text(size = rel(1.14)),  \n    axis.text = element_text(size = rel(0.86)),  \n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n    \n    strip.text.y = element_text(size = rel(0.7), angle = 0), \n    \n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(1, \"lines\"),  \n    panel.spacing.y = unit(0, \"lines\"),\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n# P1. Area Chart ----\narea_chart &lt;- ggplot(\n  ev_market_data,\n  aes(x = year, y = total, fill = region_group)\n  ) +\n  # Geom\n  geom_area(\n    alpha = 0.9, position = \"stack\"\n  ) +\n  geom_line(\n    aes(color = region_group, group = region_group), \n    position = \"stack\", \n    color = \"white\", \n    linewidth = 0.3\n  ) +\n  geom_textbox(                 # Annotations\n    data = annotations,\n    aes(x = year, y = y_pos, label = label),\n    box.color = \"white\",\n    fill = \"white\",\n    alpha = 0.7,\n    width = unit(0.15, \"npc\"),\n    hjust = 0.5,\n    vjust = 0.5,\n    size = 3,\n    box.padding = unit(c(5, 5, 5, 5), \"pt\"),\n    color = \"black\"\n  ) +\n  geom_label(                   # growth label\n    data = growth_highlights,\n    aes(label = label, color = region_group),\n    fill = \"white\",\n    alpha = 0.9,\n    fontface = \"bold\",\n    label.size = 0.1,\n    nudge_x = -0.2,\n  ) +\n  geom_text(                       # direct label (right)\n    data = direct_labels,\n    aes(x = 2023.2, y = y_pos, label = label, color = region_group),\n    hjust = 0,\n    fontface = \"bold\",\n    size = 3.5\n  ) +\n  geom_segment(                    # connecting lines to direct labels\n    data = direct_labels,\n    aes(\n      x = 2023, \n      xend = 2023.15, \n      y = y_pos, \n      yend = y_pos,\n      color = region_group\n    ),\n    linewidth = 0.5\n  ) +\n  # Scales\n  scale_y_continuous(\n    labels = label_number(scale = 1/1000000, suffix = \"M\"),\n    expand = expansion(mult = c(0.05, 0.2))  \n  ) +\n  scale_x_continuous(\n    breaks = seq(2013, 2023, by = 2),\n    expand = expansion(mult = c(0.01, 0.06)),  \n    sec.axis = sec_axis(\n      ~ ., \n      breaks = c(2013, 2023),\n      labels = c(\"2013\", \"2023\")\n    )\n  ) +\n  scale_fill_manual(values = colors$palette) +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    subtitle = \"BEVs have dominated global adoption with China leading growth, while PHEVs show different regional adoption patterns\",\n    x = NULL,\n    y = \"Vehicle Stock (millions)\"\n  ) +\n  # Facets\n  facet_wrap(~ powertrain, ncol = 1, scales = \"free_y\") +\n  # Theme\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t = 10, r = 30, b = 10, l = 10),  \n    strip.text = element_text(face = \"bold\", size = rel(0.86), margin = margin(b = 5)),\n    panel.spacing.y = unit(1.5, \"cm\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    \n    plot.subtitle = element_text(\n      size = rel(0.78),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      margin = margin(b = 10)\n    )\n  )\n  \n# P2. Growth Heatmap ---- \ngrowth_heatmap &lt;- ggplot(\n  growth_heatmap_data,\n  aes(x = year, y = fct_rev(region_label), fill = growth_category_ordered)\n  ) +\n  # Geoms\n  geom_tile(\n    color = \"white\", linewidth = 0.7\n    ) +\n  geom_text(\n    aes(label = paste0(round(yoy_growth), \"%\")),\n    color = ifelse(growth_heatmap_data$growth_category %in% \n                     c(\"High growth (&gt;100%)\", \"Strong growth (50-100%)\"), \"white\", \"black\"),\n    size = 3,\n    fontface = \"bold\"\n  ) +\n  # Scales\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Year-over-Year Growth\",\n    guide = guide_legend(\n      title.position = \"top\",\n      nrow = 1,\n      label.theme = element_text(size = 9),\n      reverse = FALSE\n    ),\n    drop = FALSE      # Drop any unused levels\n  ) +\n  scale_x_continuous(\n    breaks = 2015:2023, \n    expand = expansion(mult = c(0, 0))\n  ) +\n  # Legend\n  guides(\n    fill = guide_legend(\n      title = \"Year-over-Year Growth\",\n      nrow = 1,\n      byrow = TRUE,\n      override.aes = list(\n        size = 3\n      ),\n      title.theme = element_text(face = \"bold\", size = 10),\n      label.theme = element_text(size = 9)\n    )\n  ) +\n  # Labels \n  labs(\n    subtitle = \"Year-over-year growth percentages reveal intensity of adoption across regions\",\n    x = NULL,\n    y = NULL\n  ) +\n  # Facet \n  facet_wrap(~ powertrain, ncol = 1) +\n  # Theme\n  theme(\n    plot.margin = margin(t = 10, r = 15, b = 10, l = 10),\n    panel.grid = element_blank(),\n    panel.spacing.y = unit(1.5, \"cm\"),\n    strip.text = element_text(face = \"bold\", size = rel(0.86), margin = margin(b = 5)),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    legend.key.size = unit(0.8, \"lines\"),\n    \n    plot.subtitle = element_text(\n      size = rel(0.78),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      margin = margin(b = 10)\n  ))\n\n# Combined Plots ----\ncombined_plot &lt;- (area_chart/ growth_heatmap ) +\n  plot_layout(heights = c(1.2, 1)) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size   = rel(1.6),\n        family = fonts$title,\n        face   = \"bold\",\n        color  = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size   = rel(0.95),\n        family = fonts$subtitle,\n        color  = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.65),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 11,\n  width = 10, \n  height = 12\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] gghighlight_0.4.1      directlabels_2024.1.21 ggrepel_0.9.6         \n [4] camcorder_0.1.0        patchwork_1.3.0        ggpubr_0.6.0          \n [7] here_1.0.1             glue_1.8.0             scales_1.3.0          \n[10] skimr_2.1.5            janitor_2.2.0          showtext_0.9-7        \n[13] showtextdb_3.0         sysfonts_0.8.9         ggtext_0.1.2          \n[16] lubridate_1.9.3        forcats_1.0.0          stringr_1.5.1         \n[19] dplyr_1.1.4            purrr_1.0.2            readr_2.1.5           \n[22] tidyr_1.3.1            tibble_3.2.1           ggplot2_3.5.1         \n[25] tidyverse_2.0.0        pacman_0.5.1          \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      digest_0.6.37     \n [5] timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1         magrittr_2.0.3    \n [9] compiler_4.4.0     rlang_1.1.4        tools_4.4.0        utf8_1.2.4        \n[13] yaml_2.3.10        knitr_1.49         ggsignif_0.6.4     labeling_0.4.3    \n[17] htmlwidgets_1.6.4  curl_6.0.0         bit_4.5.0          xml2_1.3.6        \n[21] repr_1.1.7         abind_1.4-8        withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   parallel_4.4.0     ggplotify_0.1.2    yulab.utils_0.1.8 \n[37] base64enc_0.1-3    vctrs_0.6.5        jsonlite_1.8.9     carData_3.0-5     \n[41] car_3.1-3          gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2       \n[45] rstatix_0.7.2      Formula_1.2-5      systemfonts_1.1.0  magick_2.8.5      \n[49] gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4      gtable_0.3.6      \n[53] quadprog_1.5-8     munsell_0.5.1      pillar_1.9.0       htmltools_0.5.8.1 \n[57] R6_2.5.1           rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1    \n[61] markdown_1.13      backports_1.5.0    gridtext_0.1.5     broom_1.0.7       \n[65] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[69] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_11.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 11: Electric Car Sales\n\n\n\nArticle\n\n\nTrend in Electric Cars: Electric Car Sales\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_13.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_13.html",
    "title": "Focus to Collaboration Ratio Across Industries",
    "section": "",
    "text": "Original\nThe original visualization Work Productivity comes from Work Productivity\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: Bar chart showing Focus to Collaboration Ratio across industries. Financial Services has the highest ratio (1.73:1), followed by Professional Services (1.60:1) and Cross-Industry (1.52:1). Insurance is balanced exactly at 1.50:1, while Healthcare is the most collaboration-oriented at 1.43:1. Bars represent deviation from the balanced 1.5:1 ratio, with hour differences noted for each industry.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    camcorder       # Record Your Plot History \n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code#' The raw data for the week MakeoverMonday challenge can be downloaded \n#' https://data.world/makeovermonday/2025w12-precipitation-anomalies\n#' \n#' Article\n#' https://ourworldindata.org/grapher/global-precipitation-anomaly\n\nproductivity_raw &lt;- read_csv(\n  here::here('data/Work productivy Activtrak Report.csv')) |&gt; \n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(productivity_raw)\nskim(productivity_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\n\nproductivity_data &lt;- productivity_raw |&gt;         \n  # Convert total time hours string to numeric for basic metrics\n  mutate(\n    total_time_numeric = case_when(\n      industry == \"Cross-Industry\" ~ 8 + 54/60,\n      industry == \"Fin Serv\" ~ 9,\n      industry == \"Healthcare\" ~ 8 + 42/60,\n      industry == \"Insurance\" ~ 8 + 41/60,\n      industry == \"Prof. Servs.\" ~ 8 + 52/60\n    ),\n    # basic metrics\n    non_productive_time = total_time_numeric - productive_time_hrs,\n    work_activities_time = focus_time_hrs + collaboration_time_hrs,\n    focus_collaboration_ratio = focus_time_hrs / collaboration_time_hrs,\n    productive_time_percent = (productive_time_hrs / total_time_numeric) * 100,\n    \n    # derived metrics\n    ratio_deviation = focus_collaboration_ratio - 1.5,\n    industry_label = paste0(industry, \" (\", format(round(focus_collaboration_ratio, 2), nsmall=2), \":1)\"),\n    dominance = case_when(\n      abs(ratio_deviation) &lt; 0.001 ~ \"Balanced\",\n      ratio_deviation &gt; 0 ~ \"More Focused\",\n      TRUE ~ \"More Collaborative\"\n    ),\n    hours_diff = focus_time_hrs - collaboration_time_hrs,\n    hours_diff_label = paste0(\"Difference: \", format(round(abs(hours_diff), 1), nsmall=1), \" hrs\"),\n    annotation = paste0(\n      focus_time_hrs, \" hrs focus / \", \n      collaboration_time_hrs, \" hrs collaboration\"\n    ),\n    industry_order = rank(-focus_collaboration_ratio)\n  )\n\n# Annotation for Insurance\ninsurance_annotation &lt;- tibble(\n  x = 0.15,\n  y = which(productivity_data$industry == \"Insurance\"),\n  label = \"No bar shown because ratio is exactly 1.5:1\\n(6.9 hrs focus ÷ 4.6 hrs collaboration),\\nplacing it precisely at the baseline\"\n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n\"More Collaborative\" = \"#fc8d62\",  \n  \"Balanced\" = \"#8da0cb\",            \n  \"More Focused\" = \"#66c2a5\"  \n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_wrap(\"Focus to Collaboration Ratio Across Industries\", width = 80)\nsubtitle_text &lt;- str_glue(\"How industries balance individual work vs. teamwork (centered at 1.5:1 ratio)&lt;br&gt;&lt;br&gt;\",\n                          \"A ratio &gt; 1.5:1 indicates more focus-oriented work culture&lt;br&gt;\",\n                          \"A ratio &lt; 1.5:1 indicates more collaboration-oriented work culture\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 13,\n    source_text = \"Activtrak\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Legend formatting\n    legend.position = \"top\",\n    legend.title = element_text(face = \"bold\"),\n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(1.14)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(face = \"bold\", size = rel(1)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Margin\n    plot.margin = margin(20, 30, 20, 20)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n\np &lt;- ggplot(\n  productivity_data,\n  aes(\n    x = reorder(industry_label, -industry_order),\n    y = ratio_deviation\n  )\n) +\n  # Geoms\n  geom_rect(\n    aes(\n      xmin = as.numeric(factor(reorder(industry_label, -industry_order))) - 0.5,\n      xmax = as.numeric(factor(reorder(industry_label, -industry_order))) + 0.5,\n      ymin = -Inf,\n      ymax = Inf\n    ),\n    fill = \"gray95\",\n    color = NA,\n    alpha = 0.3\n  ) +\n  geom_rect(\n    data = productivity_data |&gt; filter(dominance == \"Balanced\"),\n    aes(\n      xmin = as.numeric(factor(reorder(industry_label, -industry_order))) - 0.5,\n      xmax = as.numeric(factor(reorder(industry_label, -industry_order))) + 0.5,\n      ymin = -Inf,\n      ymax = Inf\n    ),\n    fill = \"gray90\",\n    color = NA,\n    alpha = 0.5\n  ) +\n  geom_hline(\n    yintercept = 0,\n    color = alpha(\"black\", 0.5),\n    linewidth = 0.2,\n    linetype = \"solid\"\n  ) +\n  geom_col(\n    aes(fill = dominance),\n    width = 0.7\n  ) +\n  geom_point(\n    data = productivity_data |&gt; filter(dominance == \"Balanced\"),\n    aes(x = reorder(industry_label, -industry_order), y = 0),\n    color = colors$palette[\"Balanced\"],\n    size = 4,\n    shape = 18 # Diamond shape\n  ) +\n  geom_text(\n    aes(\n      label = sprintf(\"%.2f:1\", focus_collaboration_ratio),\n      y = ifelse(ratio_deviation &gt;= 0,\n        pmax(ratio_deviation / 2, 0.02),\n        pmin(ratio_deviation / 2, -0.02)\n      )\n    ),\n    color = \"black\",\n    fontface = \"bold\",\n    size = 4\n  ) +\n  geom_text(\n    aes(\n      label = hours_diff_label,\n      y = 0\n    ),\n    hjust = -0.1,\n    vjust = 2.7,\n    size = 3,\n    color = \"black\",\n    alpha = 0.7\n  ) +\n  geom_text(\n    data = insurance_annotation,\n    aes(x = x, y = y, label = label),\n    hjust = 0,\n    vjust = 0.5,\n    size = 2.8,\n    fontface = \"italic\",\n    color = \"black\",\n    alpha = 0.8\n  ) +\n  geom_vline(\n    xintercept = 0,\n    color = \"black\",\n    linewidth = 0.7,\n    linetype = \"dashed\"\n  ) +\n  annotate(\n    \"text\",\n    x = 0,\n    y = 5.7,\n    label = \"Balanced (1.5:1)\",\n    hjust = 0.5,\n    vjust = 1,\n    size = 3,\n    fontface = \"italic\",\n    color = \"black\",\n    alpha = 0.7\n  ) +\n  # Scales\n  scale_x_discrete(position = \"top\") +\n  scale_y_continuous(\n    limits = c(-0.1, 0.3),\n    breaks = seq(-0.1, 0.3, by = 0.05),\n    labels = function(x) sprintf(\"%+.2f\", x)\n  ) +\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Work Style\"\n  ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Deviation from balanced ratio (1.5:1)\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(2.4),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(1),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size   = rel(0.75),\n      family = fonts$caption,\n      color  = colors$caption,\n      hjust  = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 13,\n  width = 10, \n  height = 10\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[21] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3      pillar_1.9.0     \n[25] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[29] stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0    \n[33] grid_4.4.0        colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3   \n[37] base64enc_0.1-3   utf8_1.2.4        withr_3.0.2       bit64_4.5.2      \n[41] timechange_0.3.0  rmarkdown_2.29    bit_4.5.0         ragg_1.3.3       \n[45] hms_1.1.3         evaluate_1.0.1    knitr_1.49        markdown_1.13    \n[49] rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6       \n[53] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 vroom_1.6.5      \n[57] jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_13.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 13: Work Productivity\n\n\n\nArticle\n\n\nProductivity Benchmarks Report 1H 2024: Cross-Industry & Location Insights: Productivity Benchmarks Report 1H 2024\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_19.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_19.html",
    "title": "The Uneven Landscape of Asian Restaurants in the U.S.",
    "section": "",
    "text": "Original\nThe original visualization Asian Restaurant in the US comes from 71% of Asian restaurants in the U.S. serve Chinese, Japanese or Thai food\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: A data visualization titled ‘The Uneven Landscape of Asian Restaurants in the U.S.’ showing two main charts. The top chart displays the composition of Asian restaurants by cuisine type, with Chinese (39%), Japanese (28%), and Thai (11%) dominating. The bottom chart shows representation gaps, highlighting how Japanese (+21%), Chinese (+15%), and Thai (+9%) cuisines are over-represented compared to their population percentages, while Filipino (-19%) and Indian (-14%) cuisines are significantly under-represented. Key insights explain that only 12% of U.S. restaurants serve Asian food and that the three dominant cuisines represent only one-third of Asian Americans.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    readxl,         # Read Excel Files\n    patchwork,      # The Composer of Plots\n    camcorder       # Record Your Plot History \n  )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\n## Original Chart\n# Asian Restaurant in the US\n# https://data.world/makeovermonday/2025-w19-asian-restaurants-in-the-us\n\n##  Article\n# Pew Research Center \"71% of Asian restaurants in the U.S. serve Chinese, Japanese or Thai food\"\n# https://www.pewresearch.org/short-reads/2023/05/23/71-of-asian-restaurants-in-the-u-s-serve-chinese-japanese-or-thai-food/\n\nsheet1_raw &lt;- read_excel(\n  here::here('data/MakeoverMonday/2025/MakeoverMonday 2025 W19_ Asian Restaurants in the US.xlsx'),\n                                   sheet = 1) |&gt; \n  clean_names()\n\nsheet2_raw &lt;- read_excel(\n  here::here('data/MakeoverMonday/2025/MakeoverMonday 2025 W19_ Asian Restaurants in the US.xlsx'),\n                                   sheet = 2) |&gt; \n  clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(sheet1_raw)\nglimpse(sheet2_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\nsheet2_clean &lt;- sheet2_raw |&gt;\n  mutate(percent_of_asian_restaurants = case_when(\n    percent_of_asian_restaurants == \"&lt;1\" ~ \"0.5\",\n    TRUE ~ percent_of_asian_restaurants\n  )) |&gt;\n  mutate(percent_of_asian_restaurants = as.numeric(percent_of_asian_restaurants))\n\n# Add Asian population percentages based on Pew Research Center data\n# Source: \"71% of Asian restaurants in the U.S. serve Chinese, Japanese or Thai food\"\n# Published by Pew Research Center on May 23, 2023\npopulation_data &lt;- tibble(\n  category = c(\"Chinese\", \"Japanese\", \"Thai\", \"Indian\", \"Vietnamese\", \"Korean\", \n               \"Filipino\", \"Pakistani\", \"Mongolian\", \"Burmese\", \"Other Asian/Unspecified\"),\n  percent_of_asian_population = c(24, 7, 2, 21, 11, 9, 20, 3, 0.1, 0.9, 2)\n)\n\n# Combine datasets\nsheet2_combined &lt;- sheet2_clean |&gt;\n  left_join(population_data, by = \"category\") |&gt; \n  mutate(\n    percent_of_all_restaurants = percent_of_asian_restaurants * sheet1_raw$percent_of_all_us_restaurants[1] / 100,\n    representation_ratio = percent_of_asian_restaurants / percent_of_asian_population,\n    representation_diff = percent_of_asian_restaurants - percent_of_asian_population,\n    representation_status = ifelse(representation_diff &gt; 0, \"over represented\", \"under represented\")\n  )\n\n# plot 1 data: composition \ncomposition_data &lt;- sheet2_combined |&gt;\n  filter(category != \"Other Asian/Unspecified\") |&gt;\n  arrange(desc(percent_of_asian_restaurants)) |&gt;\n  mutate(label_text = paste0(percent_of_asian_restaurants, \"%\"))\n\n# plot 2 data: diverging bars\ndiverging_data &lt;- sheet2_combined |&gt;\n  filter(\n    category != \"Other Asian/Unspecified\",\n    percent_of_asian_restaurants &gt;= 1\n    ) |&gt;\n  # Create a temporary data frame with the needed calculations\n  mutate(\n    hjust_value = ifelse(representation_diff &gt; 0, -0.2, 1.2)\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"over represented\" =  \"#4CAF50\",   \n  \"under represented\" = \"#FF9800\", \n  \"neutral\" = \"#BDBDBD\" \n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_wrap(\"The Uneven Landscape of Asian Restaurants in the U.S.\", width = 80)\nsubtitle_text &lt;- str_wrap(\"Comparing restaurant presence with Asian American population distribution\",\n                          width = 85)\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 19,\n    source_text = \"Pew Research Center\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Legend formatting\n    legend.position = \"top\",\n    legend.title = element_text(face = \"bold\"),\n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(0.85)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(face = \"bold\", size = rel(0.85)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Margin\n    plot.margin = margin(10, 10, 10, 10)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |-  Plot 1  ----\n# Composition bar chart     \ncomposition_plt &lt;- composition_data |&gt;\n  ggplot(aes(x = reorder(category, percent_of_asian_restaurants), \n             y = percent_of_asian_restaurants,\n             fill = representation_status)\n         ) +\n  # Geoms\n  geom_col() +\n  geom_text(aes(label = label_text), \n            hjust = -0.2, size = 3.5) +\n  # Scales\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Representation\"\n  ) +\n  scale_y_continuous(limits = c(0, 45), labels = function(x) paste0(x, \"%\")) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = \"Composition of Asian Restaurants in the U.S.\",\n    subtitle = \"Percentage of Asian restaurants by cuisine type\",\n    x = NULL,\n    y = \"Percentage of Asian Restaurants\"\n  ) +\n  # Theme\n  theme(\n    legend.position = \"plot\",\n    panel.grid.major.y = element_blank(),\n    plot.title = element_text(size = 12, face = \"bold\"),\n    plot.subtitle = element_text(size = 9, color = \"gray50\")\n  )\n\n### |-  Plot 2  ----\n# Diverging bar chart\ndiverging_plt &lt;- diverging_data |&gt;\n  ggplot(aes(x = reorder(category, representation_diff), \n             y = representation_diff,\n             fill = representation_status)\n         ) +\n  # Geoms\n  geom_col() +\n  geom_hline(yintercept = 0, linewidth = 0.5, color = 'gray20') +\n  geom_text(\n    aes(label = paste0(ifelse(representation_diff &gt; 0, \"+\", \"\"), \n                       round(representation_diff, 1), \"%\"),\n        hjust = hjust_value),\n    size = 3\n  ) +\n  # Scales\n  scale_fill_manual(\n    values = colors$palette,\n    name = \"Representation\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, \"%\"),\n    limits = c(-23, 25)\n  ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = \"Over and Under-Representation of Asian Cuisines\",\n    subtitle = \"Difference between restaurant percentage and population percentage\",\n    x = NULL,\n    y = \"Representation Gap (%)\"\n  ) +\n  # Theme\n  theme(\n    legend.position = \"top\",\n    legend.title = element_text(size = 9),\n    legend.text = element_text(size = 8),\n    panel.grid.major.y = element_blank(),\n    plot.title = element_text(size = 12, face = \"bold\"),\n    plot.subtitle = element_text(size = 9, color = \"gray50\")\n  )\n\n### |-  Plot 3  ----\n# title panel\ntitle_panel &lt;- ggplot() + \n  # Scales\n  xlim(0, 1) + ylim(0, 1) +\n  # Annotate\n  annotate(\n    \"text\", x = 0, y = 0.6, \n    label = title_text,\n    hjust = 0, vjust = 0,\n    color = colors$title, size = 9, \n    fontface = \"bold\", family = fonts$title\n  ) +\n  annotate(\n    \"text\", x = 0, y = 0.2, \n    label = subtitle_text,\n    hjust = 0, vjust = 0,\n    size = 5, color = \"gray50\", family = fonts$subtitle\n  ) +\n  # Theme\n  theme_void() +\n  theme(\n    plot.margin = margin(20, 10, 10, 10),\n    plot.background  = element_rect(fill = colors$background, color = colors$background),\n    panel.background = element_rect(fill = colors$background, color = colors$background),\n  )\n\n### |-  Plot 4  ----\n# empty panel\nempty_panel &lt;- ggplot() + \n  # Theme\n  theme_void() \n\n### |-  Plot 5  ----\n# insights panel\ninsights_panel &lt;- ggplot() + \n  # Scales\n  xlim(0, 1) + ylim(0, 1) +  \n  # Annotate\n  annotate(\n    \"text\", x = 0.05, y = 0.95, \n    label = \"Key Insights:\",\n    hjust = 0, vjust = 1,\n    size = 4.5, fontface = \"bold\"\n  ) +\n  annotate(\n    \"text\", x = 0.05, y = 0.82, \n    label = \"• Only 12% of all U.S. restaurants serve Asian food\",\n    hjust = 0, vjust = 1,\n    size = 3.2\n  ) +\n  annotate(\n    \"text\", x = 0.05, y = 0.67, \n    label = \"• Chinese, Japanese, and Thai cuisines dominate the Asian restaurant\\n  scene (78%) despite representing only one-third of Asian Americans\",\n    hjust = 0, vjust = 1,\n    size = 3.2\n  ) +\n  annotate(\n    \"text\", x = 0.05, y = 0.47, \n    label = \"• Japanese (+21%) and Thai (+9%) cuisines have the highest\\n  over-representation compared to their population shares\",\n    hjust = 0, vjust = 1,\n    size = 3.2\n  ) +\n  annotate(\n    \"text\", x = 0.05, y = 0.32, \n    label = \"• Filipino cuisine shows the largest representation gap: only 1% of Asian\\n  restaurants despite Filipinos comprising 20% of Asian Americans\",\n    hjust = 0, vjust = 1,\n    size = 3.2\n  ) +\n  annotate(\n    \"text\", x = 0.05, y = 0.17, \n    label = \"• Indian cuisine shows the second-largest representation gap (-14%),\\n  with far fewer restaurants than their population would suggest\",\n    hjust = 0, vjust = 1,\n    size = 3.2\n  ) +\n  # Theme\n  theme_void() +\n  theme(\n    plot.margin = margin(0, 5, 0, 5),  \n    plot.background  = element_rect(fill = colors$background, color = colors$background),\n    panel.background = element_rect(fill = colors$background, color = colors$background),\n  )\n\n### |-  Final Plot  ----\n# combined plot\ncombined_plot &lt;- title_panel +   # P1\n  insights_panel +               # P2\n  composition_plt +              # P3\n  diverging_plt +                # P4\n  empty_panel +                  # P5\n  plot_layout(\n    design = \"\n    AAAAA\n    BCCCC\n    BDDDD\n    EEEEE\n    \",\n    widths = c(4.8, 1, 1, 1, 1),\n    heights = c(0.8, 2, 2, 0.4)\n  ) \n\ncombined_plot &lt;- combined_plot +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n          panel.spacing = unit(15, \"pt\"),\n          plot.title = element_text(\n            size = rel(1.5),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n          ),\n          plot.subtitle = element_text(\n            size = rel(0.85),\n            family = fonts$subtitle,\n            color = colors$subtitle,\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 15)\n          ),\n          plot.caption = element_markdown(\n            size   = rel(0.65),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n          )\n        )\n    )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 19,\n  width = 10, \n  height = 10\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 patchwork_1.3.0 readxl_1.4.3    here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.5.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         gifski_1.32.0-1    fansi_1.0.6        pkgconfig_2.0.3   \n[13] ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0     farver_2.1.2      \n[17] munsell_0.5.1      repr_1.1.7         codetools_0.2-20   snakecase_0.11.1  \n[21] htmltools_0.5.8.1  yaml_2.3.10        pillar_1.9.0       magick_2.8.5      \n[25] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[29] labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[33] grid_4.4.0         colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3    \n[37] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        timechange_0.3.0  \n[41] rmarkdown_2.29     cellranger_1.1.0   hms_1.1.3          evaluate_1.0.1    \n[45] knitr_1.49         markdown_1.13      gridGraphics_0.5-1 rlang_1.1.6       \n[49] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[53] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[57] fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_19.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 19: Asian Restaurant in the US\n\n\n\nArticle\n\n\nPew Research Center: 71% of Asian restaurants in the U.S. serve Chinese, Japanese or Thai food\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_21.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_21.html",
    "title": "The Enduring Legacy of PC Gaming Excellence",
    "section": "",
    "text": "Original\nThe original visualization Best Games of All Time comes from Metacritic\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: This data visualization compares top-rated games across platforms. Left panel shows a treemap where PC dominates with 212 games versus various console platforms (PlayStation, Xbox, Nintendo). Right panel displays a scatter plot of Metacritic scores (90-100) from 1990s-2025, showing PC games (blue dots) consistently achieving high ratings across decades, with several standout titles above 97 points, while console games (gray dots) have occasional high-performers but less consistent excellence.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    lubridate,      # Make Dealing with Dates a Little Easier\n    ggrepel,        # Automatically Position Non-Overlapping Text Labels with ggplot2\n    treemapify,     # Draw Treemaps in 'ggplot2'\n    marquee,        # Markdown Parser and Renderer for R Graphic\n    patchwork       # The Composer of Plots\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  12,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\n## Original Chart\n# Metacritic Best Games of All Time\n# https://data.world/makeovermonday/2025w21-metacritic-best-games-of-all-time\n\n## Article\n# Metacritic Best Games of All Time\n# https://www.metacritic.com/browse/game/\n\nmetacritic_top_games_raw &lt;- read_csv(\n  here::here('data/MakeoverMonday/2025/metacritic_top_games.csv')) |&gt; \n  janitor::clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(metacritic_top_games_raw)\nskimr::skim(metacritic_top_games_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\n# Split the platforms into separate rows\ngames_platforms &lt;- metacritic_top_games_raw |&gt;\n  separate_rows(platforms, sep = \", \") |&gt;\n  mutate(\n    platform_type = case_when(\n      platforms %in% c(\"PC\") ~ \"PC\",\n      platforms %in% c(\"iOS (iPhone/iPad)\") ~ \"Mobile\",\n      TRUE ~ \"Console\"\n    ),\n    release_year = year(release_date),\n    decade = paste0(floor(release_year / 10) * 10, \"s\"),\n    publisher_group = ifelse(publisher %in% c(\"Nintendo\", \"Rockstar Games\"), publisher, \"Other\")\n  )\n\n# Comprehensive tidy dataset\ngames_tidy &lt;- metacritic_top_games_raw |&gt;\n  mutate(\n    release_year = year(release_date),\n    decade = paste0(floor(release_year / 10) * 10, \"s\"),\n    genre_primary = case_when(\n      str_detect(genre, \"Action\") ~ \"Action\",\n      str_detect(genre, \"Shooter\") ~ \"Shooter\",\n      str_detect(genre, \"Platform\") ~ \"Platformer\",\n      str_detect(genre, \"Sports\") ~ \"Sports\",\n      str_detect(genre, \"Fighting\") ~ \"Fighting\",\n      TRUE ~ genre\n    ),\n    # Short title for visualization\n    short_title = case_when(\n      str_length(title) &gt; 20 ~ paste0(str_sub(title, 1, 17), \"...\"),\n      TRUE ~ title\n    )\n  )\n\n# P1. treemap data----\ntreemap_data &lt;- games_platforms |&gt;\n  count(platforms) |&gt;\n  mutate(\n    platform_group = case_when(\n      platforms == \"PC\" ~ \"PC\",\n      TRUE ~ \"Console\"\n    ),\n    platform_label = paste0(platforms, \"\\n(\", n, \")\")\n  )\n\n# P2. dot plot data -----\ndotplot_data &lt;- games_tidy |&gt;\n  mutate(\n    platform_group = case_when(\n      str_detect(platforms, \"PC\") ~ \"PC\",\n      TRUE ~ \"Console\"\n    ),\n    is_top_game = metascore &gt;= 97,\n    should_label = case_when(\n      # Only label the very top PC games\n      (platform_group == \"PC\" & metascore &gt;= 97) ~ TRUE,\n      # Only label the very top Console games\n      (platform_group == \"Console\" & metascore &gt;= 98) ~ TRUE,\n      TRUE ~ FALSE\n    )\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"PC\" = \"#1F77B4\",     \n  \"Console\" = \"#A9A9A9\"\n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Enduring Legacy of PC Gaming Excellence\")\nsubtitle_text &lt;- \"While consoles produce occasional standout hits, PC gaming demonstrates sustained quality and unmatched volume\\n\n{#1F77B4 **_PC games_**} demonstrate sustained excellence, while {#A9A9A **_console games_**} include some standout titles\"\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 21,\n    source_text = \"Metacritic\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Legend formatting\n    legend.position = \"plot\",\n    legend.title = element_text(face = \"bold\"),\n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(0.85)),\n    axis.title.y = element_text(face = \"bold\", size = rel(0.85)),\n    axis.text.y = element_text(face = \"bold\", size = rel(0.85)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Margin\n    plot.margin = margin(20, 20, 20, 20)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# P1. Treemap ----\np1 &lt;- ggplot(treemap_data, aes(area = n, fill = platform_group, label = platform_label)) +\n  # Geoms\n  geom_treemap(\n    color = \"white\",\n    size = 1.5\n  ) +\n  geom_treemap_text(\n    aes(label = platforms),\n    colour = \"white\",\n    place = \"centre\",\n    size = 11,\n    fontface = \"bold\",\n    padding.y = grid::unit(4, \"mm\")\n  ) +\n  geom_treemap_text(\n    aes(label = paste0(\"n = \", n)),\n    colour = \"white\",\n    place = \"bottom\",\n    size = 8,\n    padding.y = grid::unit(4, \"mm\")\n  ) +\n  # Scales\n  scale_fill_manual(values = colors$palette) +\n  coord_equal() +\n  # Labs\n  labs(\n    title = \"PC: The Single Most Prolific Platform for Top-Rated Games\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    )\n  )\n\n# P2. dot plot -----\np2 &lt;- ggplot(dotplot_data, aes(x = release_date, y = metascore)) +\n  # Geoms\n  geom_hline(yintercept = c(90, 95), linetype = \"dashed\", color = \"gray80\", alpha = 0.7) +\n  # Annotate\n  annotate(\"rect\",\n    xmin = as.Date(\"1997-01-01\"), xmax = as.Date(\"2000-01-01\"),\n    ymin = 89.5, ymax = 100, fill = \"gray90\", alpha = 0.5\n  ) +\n  annotate(\"rect\",\n    xmin = as.Date(\"2000-01-01\"), xmax = as.Date(\"2010-01-01\"),\n    ymin = 89.5, ymax = 100, fill = \"gray85\", alpha = 0.5\n  ) +\n  annotate(\"rect\",\n    xmin = as.Date(\"2010-01-01\"), xmax = as.Date(\"2021-01-01\"),\n    ymin = 89.5, ymax = 100, fill = \"gray90\", alpha = 0.5\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"1998-07-01\"), y = 90.5, label = \"1990s\",\n    color = \"gray50\", size = 3, fontface = \"bold\", alpha = 0.7\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2005-01-01\"), y = 90.5, label = \"2000s\",\n    color = \"gray50\", size = 3, fontface = \"bold\", alpha = 0.7\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2015-01-01\"), y = 90.5, label = \"2010s\",\n    color = \"gray50\", size = 3, fontface = \"bold\", alpha = 0.7\n  ) +\n\n  # Geoms\n  geom_point(\n    aes(\n      color = platform_group,\n      alpha = if_else(platform_group == \"PC\", 0.9, 0.6)\n    ),\n    size = 3,\n    stroke = 0.2\n  ) +\n  geom_text_repel(\n    data = dotplot_data |&gt; filter(should_label),\n    aes(label = short_title, color = platform_group),\n    size = 2.8,\n    fontface = \"bold\",\n    box.padding = 0.5,\n    point.padding = 0.3,\n    force = 2,\n    segment.color = \"gray60\",\n    segment.size = 0.2,\n    segment.alpha = 0.8,\n    max.overlaps = 15,\n    seed = 42\n  ) +\n  # Scales\n  scale_color_manual(values = colors$palette) +\n  scale_alpha_identity() +\n  scale_x_date(\n    date_breaks = \"5 years\",\n    date_labels = \"%Y\",\n    expand = expansion(mult = c(0.02, 0.02))\n  ) +\n  scale_y_continuous(\n    breaks = seq(90, 100, by = 2.5),\n    limits = c(89.5, 100),\n    labels = function(x) paste0(x)\n  ) +\n  # Labs\n  labs(\n    title = \"PC Games Show Consistent Quality Across Three Decades\",\n    x = \"Release Year\",\n    y = \"Metascore\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    )\n  )\n\n# Combined Plot ----\ncombined_plot &lt;- (p1 | plot_spacer() | p2) +\n  plot_layout(\n    widths = c(1, 0.005, 1),\n    guides = \"collect\"\n  ) +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_markdown(\n        size = rel(2.4),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_marquee(\n        size = rel(1),\n        family = fonts$subtitle,\n        color = alpha(colors$subtitle, 0.9),\n        lineheight = 0.9,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size = rel(0.6),\n        family = fonts$caption,\n        color = colors$caption,\n        hjust = 0.5,\n        margin = margin(t = 10)\n      ),\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 21,\n  width = 12, \n  height = 8\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0  marquee_0.1.0    treemapify_2.5.6 ggrepel_0.9.6   \n [5] here_1.0.1       glue_1.8.0       scales_1.3.0     showtext_0.9-7  \n [9] showtextdb_3.0   sysfonts_0.8.9   ggtext_0.1.2     lubridate_1.9.3 \n[13] forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4      purrr_1.0.2     \n[17] readr_2.1.5      tidyr_1.3.1      tibble_3.2.1     ggplot2_3.5.1   \n[21] tidyverse_2.0.0  pacman_0.5.1    \n\nloaded via a namespace (and not attached):\n [1] ggfittext_0.10.2   gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4 \n [5] tzdb_0.5.0         yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    ggplotify_0.1.2    skimr_2.1.5       \n[17] lifecycle_1.0.4    compiler_4.4.0     farver_2.1.2       textshaping_0.4.0 \n[21] munsell_0.5.1      repr_1.1.7         janitor_2.2.0      codetools_0.2-20  \n[25] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[29] pillar_1.9.0       camcorder_0.1.0    magick_2.8.5       commonmark_1.9.2  \n[33] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      rsvg_2.6.1        \n[37] rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1  \n[41] cli_3.6.4          magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4        \n[45] withr_3.0.2        bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29    \n[49] bit_4.5.0          hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[53] markdown_1.13      gridGraphics_0.5-1 rlang_1.1.6        gridtext_0.1.5    \n[57] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         vroom_1.6.5       \n[61] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[65] fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_21.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 21: Metacritic Best Games of All Time\n\n\n\nArticle\n\n\nMetacritic: Best Games of All Time\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2024/swd_2024_10 - Ex_046.html",
    "href": "data_visualizations/SWD Challenge/2024/swd_2024_10 - Ex_046.html",
    "title": "WakeUp Coffee Sales Summary",
    "section": "",
    "text": "Update: This post has been updated based on valuable feedback from the #SWDchallenge community. The changes include:\n\nReordering the table by Sales Volume to bring Account J, which has the largest negative percentage change, to the top for better emphasis.\nAdjusting the color scheme to differentiate between positive and negative growth values more clearly, ensuring a more intuitive visual representation.\nHighlighting Accounts J and H to emphasize the largest decrease and the highest growth, respectively.\n\nOriginal\nThe goal of this month’s Storytelling with Data challenge is to apply emphasis to the table shown below.\n\n\n\n\n\nFigure 1: Original table\n\n\nAdditional information can be found HERE\nMakeover\n\n\n\n\n\nFigure 2: Here is the WakeUp Coffee Sales Summary for the top 10 accounts by sales volume for the 4 weeks ending January 31st. Account H experienced the highest growth (+37.90%) with sales totaling $11,645. Account D had the highest sales volume at $547,265. Accounts J and E both showed significant declines, with -8.70% and -4.70%, respectively. The table includes sales volume, percentage change versus prior period, average number of UPCs, percentage of ACV selling, and price per pound.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nCode```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,   # Easily Install and Load the 'Tidyverse'\n  ggtext,      # Improved Text Rendering Support for 'ggplot2'\n  showtext,    # Using Fonts More Easily in R Graphs\n  janitor,     # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,       # Compact and Flexible Summaries of Data\n  scales,      # Scale Functions for Visualization\n  glue,        # Interpreted String Literals\n  gt,          # Easily Create Presentation-Ready Display Tables\n  readxl       # Read Excel Files\n)\n```\n\n\n2. Read in the Data\n\nCode```{r}\n#| label: read\n\nsales_data &lt;- read_excel(\n  here::here(\"data/data_ex_046.xlsx\"),\n  range = \"B8:G18\", \n  trim_ws = TRUE\n  ) |&gt; \n  clean_names() |&gt; \n  glimpse()\n```\n\n\n3. Examine the Data\n\nCode```{r}\n#| label: examine\n\nglimpse(sales_data)  \n```\n\n\n6. Plot\n\nCode```{r}\n#| label: plot\n\n### |- Create a gt table ----\nsales_table &lt;- sales_data |&gt;\n  arrange(desc(sales_volume)) |&gt;  # Reorder by Sales Volume descending\n  gt() |&gt;\n  tab_header(\n    title = md(\"**WakeUp Coffee Sales Summary**\"),\n    subtitle = \"Top 10 Accounts by Sales Volume: 4-week sales ending January 31st\"\n  ) |&gt;\n  fmt_currency(\n    columns = c(sales_volume, price_per_pound),\n    currency = \"USD\"\n  ) |&gt;\n  fmt_percent(\n    columns = c(percent_change_vs_prior),\n    scale_values = TRUE\n  ) |&gt;\n  fmt_number(\n    columns = c(avg_number_of_up_cs),\n    decimals = 1\n  ) |&gt;\n  text_transform(\n    locations = cells_body(columns = percent_change_vs_prior),\n    fn = function(x) {\n      dplyr::case_when(\n        x &gt; 0 ~ paste0(\"\\U2191 \", x), # Up arrow for positive values\n        x &lt; 0 ~ paste0(\"\\U2193 \", x), # Down arrow for negative values,\n        TRUE ~ as.character(x)\n      )\n    }\n  ) |&gt;\n  # Emphasize Accounts H and J\n  tab_style(\n    style = list(\n      cell_fill(color = \"#D3E4CD\"),\n      cell_text(color = \"black\")\n    ),\n    locations = cells_body(\n      rows = account %in% c(\"J\",\"H\")\n    )\n  ) |&gt;\n  # Now add the color gradient for the % Change column\n  data_color(\n    columns = c(percent_change_vs_prior),\n    fn = col_bin(\n      bins = c(-0.1, -0.04, 0, 0.065, 0.4), \n      palette = c(\"#CA0020\", \"#F4A582\", \"#92C5DE\", \"#0571B0\"),\n      na.color = \"transparent\"  \n    )\n  ) |&gt;\n  cols_align(\n    align = \"right\",\n    columns = c(sales_volume, percent_change_vs_prior, avg_number_of_up_cs, percent_acv_selling, price_per_pound)\n  ) |&gt;\n  cols_label(\n    account = \"Account\",\n    sales_volume = \"Sales Volume ($)\",\n    percent_change_vs_prior = \"% Change vs Prior\",\n    avg_number_of_up_cs = \"Avg # of UPCs\",\n    percent_acv_selling = \"% ACV Selling\",\n    price_per_pound = \"Price per Pound ($)\"\n  ) |&gt;\n  tab_options(\n    table.font.size = \"small\",\n    data_row.padding = px(5)\n  ) |&gt;\n  tab_source_note(\n    source_note = html(\"&lt;span style='font-size: 10px;'&gt;UPC is the Universal Product Code, the barcode symbology.&lt;br&gt;ACV is All-Commodity Volume, measured as a percentage from 0 to 100.&lt;/span&gt;\")\n  ) |&gt;\n  tab_footnote(\n    footnote = md(\"**Account H shows the highest positive growth (+37.90%)**, **Account D has the highest sales volume ($547,265)**, **Account J shows the largest decrease (-8.70%)**&lt;/span&gt;\"),\n    locations = cells_title(groups = \"title\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(font = \"Arial\"),\n    locations = list(\n      cells_title(groups = c(\"title\", \"subtitle\")),\n      cells_column_labels(columns = everything()),\n      cells_body(columns = everything()),\n      cells_stub(rows = everything()),\n      cells_source_notes()\n    )\n  ) |&gt;\n  tab_style(\n    style = cell_text(size = px(24)),\n    locations = cells_title(groups = \"title\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(size = px(16)),\n    locations = cells_title(groups = \"subtitle\")\n  ) |&gt;\n  tab_style(\n    style = cell_text(size = px(14)),\n    locations = list(\n      cells_column_labels(columns = everything()), # Column labels\n      cells_body(columns = everything()),          # Data cells\n      cells_stub(rows = everything()),             # Row labels (stub)\n      cells_source_notes()                         # Source notes\n    )\n  )\n\n# Print the table\nsales_table\n```\n\n\n7. Save\n\nCode```{r}\n#| label: save\n\n### |-  plot image ----  \n\n# Save the table as a PNG\ngtsave(\n  data = sales_table, \n  path = \"data_visualizations/SWD Challenge/2024/\",\n  filename = \"swd_2024_10 - Ex_046.png\"\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_10 - Ex_046.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/SWD Challenge/2024/thumbnails/swd_2024_10 - Ex_046.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2024/swd_2024_11.html",
    "href": "data_visualizations/SWD Challenge/2024/swd_2024_11.html",
    "title": "Eurovision: Sweden and Ireland Lead with the Most Wins",
    "section": "",
    "text": "Original\nThe goal of this month’s #SWDchallenge is to make a good graph. For my submission, I decided to revisit a #dataviz from early in my journey. The chart below was my submission for the 2022 #TidyTuesday week 20 challenge. The goal back then was to visualize the countries with more than three Eurovision wins.\n\n\n\n\n\nFigure 1: Original chart\n\n\nAdditional information about this month’s #SWDchallenge can be found HERE\nMakeover\n\n\n\n\n\nFigure 2: Line chart showing cumulative Eurovision wins by country from 1956 to 2024. Sweden and Ireland lead with 7 wins each, with Ireland’s most recent win in 1996 and Sweden’s in 2023. Other countries have fewer wins, depicted in gray.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nCode```{r}\n#| label: load\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  tidytuesdayR,      # Access the Weekly 'TidyTuesday' Project Dataset\n  ggrepel            # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n) \n\n### |- figure size ---- \ncamcorder::gg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 10,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n\n### |- resolution ---- \nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nCode```{r}\n#| label: read\n\neurovision &lt;- tidytuesdayR::tt_load(2022, week = 20)$eurovision %&gt;% \n  clean_names() \n```\n\n\n3. Examine the Data\n\nCode```{r}\n#| label: examine\n\nglimpse(eurovision)\nskim(eurovision)\ncolnames(eurovision)\n```\n\n\n4. Tidy Data\n\nCode```{r}\n#| label: tidy\n\n# Winners from 1956 to 2003\nwinners_1956_2003_tbl &lt;- eurovision |&gt; \n  filter(year &lt; 2004,\n         section == 'final',\n         winner == TRUE) |&gt; \n  select(year, host_city, artist_country, total_points, winner) |&gt; \n  arrange(desc(year)) |&gt; \n  drop_na()\n\n# Winners from 2004 to 2022\nwinners_2004_2022_tbl &lt;- eurovision |&gt; \n  filter(section == 'grand-final',\n         winner == TRUE) |&gt; \n  select(year, host_city, artist_country, total_points, winner) |&gt; \n  arrange(desc(year)) |&gt; \n  drop_na()\n\n# Winners for 2023 and 2024\nwinners_2023_2024_tbl &lt;- tibble(\n  year = c(2023, 2024),\n  host_city = c(\"Liverpool\", \"Malmö\"),  \n  artist_country = c(\"Sweden\", \"Switzerland\"),\n  total_points = c(583, 591),  # Placeholder points, adjust based on real data if available\n  winner = TRUE\n)\n \n# Combine all winners\nwinners_combined_tbl &lt;- bind_rows(winners_1956_2003_tbl, winners_2004_2022_tbl, winners_2023_2024_tbl) |&gt;\n  arrange(year) |&gt;\n  drop_na()\n\n# Calculate cumulative wins by year\ncumulative_data &lt;- winners_combined_tbl |&gt;\n  group_by(year, artist_country) |&gt;\n  summarise(total_points = sum(total_points), .groups = \"drop\") |&gt;\n  arrange(year) |&gt;\n  group_by(artist_country) |&gt;\n  mutate(cumulative_wins = row_number()) |&gt;\n  ungroup()\n\n# Define key countries to highlight\nkey_countries &lt;- c(\"Sweden\", \"Ireland\")\n\n# Get the most recent year for each key country\nlatest_year_data &lt;- cumulative_data |&gt; \n  filter(artist_country %in% key_countries) |&gt; \n  group_by(artist_country) |&gt; \n  filter(year == max(year)) |&gt; \n  ungroup()\n```\n\n\n5. Visualization Parameters\n\nCode```{r}\n#| label: params\n\n### |- plot aesthetics ---- \nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- c(\"#FF007F\", \"#004080\")\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#SWDchallenge: Nov 2024 &bull; Source: TidyTuesday 2023 week 20&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\ntitle_text    &lt;- str_glue(\"Eurovision: Sweden and Ukraine Lead with the Most Wins\")\nsubtitle_text &lt;- str_glue(\"Tracking Eurovision Wins by Country from 1956 to 2024&lt;br&gt;&lt;br&gt;\n                          **Total Wins Since Inception**\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n# |- fonts ----\nfont_add('fa6-brands', here::here(\"fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")                 \nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")   \nfont_add_google(\"Noto Sans\", regular.wt = 400,family = \"caption\")\nshowtext_auto(enable = TRUE)  \n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = \"plot\",\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n  axis.line.x           = element_line(color = \"#252525\", linewidth = .3),\n  axis.ticks.x          = element_line(color = text_col),  \n  axis.title            = element_text(face = \"bold\"),\n  panel.grid.minor      = element_blank(),\n  panel.grid.major      = element_blank(),\n  panel.grid.major.y    = element_line(color = \"grey85\", linewidth = .4),\n)  \n```\n\n\n6. Plot\n\nCode```{r}\n#| label: plot\n\n#  Line Chart \ncumulative_line_chart &lt;-\n  # Geoms\n  ggplot(\n    cumulative_data,\n    aes(x = year, y = cumulative_wins, group = artist_country, color = artist_country)\n  ) +\n  geom_line(\n    data = cumulative_data |&gt; filter(!artist_country %in% key_countries),\n    linewidth = 0.25, color = \"gray20\", alpha = 0.3, linetype = \"solid\"\n  ) +\n  geom_line(\n    data = cumulative_data |&gt; filter(artist_country %in% key_countries),\n    linewidth = 1.2\n  ) +\n  geom_point(\n    data = latest_year_data,\n    aes(color = artist_country), size = 4, shape = 21, fill = \"white\", stroke = 2\n  ) +\n  geom_text(\n    data = latest_year_data,\n    aes(label = str_glue(\"{artist_country} ({cumulative_wins})\\n{year}\")),\n    vjust = -0.5,\n    hjust = 0.2, nudge_x = 1, size = 4, fontface = \"bold\", lineheight = 1\n  ) +\n\n  # Scales\n  scale_x_continuous(\n    breaks = pretty_breaks(n = 5),\n    limits = c(min(cumulative_data$year), max(cumulative_data$year) + 5)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 8, by = 2),\n    limits = c(0, 8)\n  )+\n  scale_color_manual(values = col_palette) +\n  coord_cartesian(clip = \"off\") +\n  \n  # Labs\n  labs(\n    x = \"Year\",\n    y = \"\",\n    color = \"Country\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = \"title\",\n      face = \"bold\",\n      color = title_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(1.1),\n      family = \"subtitle\",\n      color = subtitle_col,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = \"caption\",\n      color = caption_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 1,\n      margin = margin(t = 15, b = 5)\n    )\n  )\n\n\n# Show plot\ncumulative_line_chart\n```\n\n\n7. Save\n\nCode```{r}\n#| label: save\n\n### |-  plot image ----  \n\n# Save the plot again\nggsave(\n  filename = here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_11.png\"),\n  plot   = cumulative_line_chart,\n  width  =  10,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n \n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/SWD Challenge/2024/swd_2024_11.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/SWD Challenge/2024/thumbnails/swd_2024_11.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_01 - Ex_037.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_01 - Ex_037.html",
    "title": "Energy Drink Brand Comparison: Activity Support Drives High Scores",
    "section": "",
    "text": "Original\nThe goal of this month’s Storytelling with Data exercise is to use space and alignment effectively.\n\n\n\n\n\nFigure 1: Original chart\n\n\nAdditional information can be found HERE\nMakeover\n\n\n\n\n\nFigure 2: A connected dot plot comparing consumer ratings of three energy drink brands (Lime Rush, Neon Pulse, and Storm Fuel) across 10 attributes. The visualization shows ‘Supports an active day’ scoring highest (~95%) across all brands, while ‘Healthy energy source’ shows the largest variation between brands, with Lime Rush scoring significantly lower (4%) than its competitors.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow codeif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  camcorder          # Record Your Plot History\n) \n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow coderaw_data &lt;- read_csv(\n  here::here(\"data/lets_practice_exercise_037.csv\")) |&gt; clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(raw_data )\n\n\n4. Tidy Data\n\nShow codetidy_energy_drinks &lt;- raw_data |&gt;\n  pivot_longer(\n    cols = c(storm_fuel, neon_pulse, lime_rush),\n    names_to = \"brand\",\n    values_to = \"score\"\n  ) |&gt;\n  mutate(\n    brand = str_to_title(str_replace(brand, \"_\", \" \")),\n    # Reorder consumer likeability for more logical presentation\n    consumer_likeability = factor(consumer_likeability,\n      levels = c(\n        \"Won't buy\", \"Definitely buy\", \"Might buy\",\n        \"Bold and exciting name\", \"Refreshing options\",\n        \"Reliable energy boost\", \"Eye-catching design\",\n        \"Reasonably priced\", \"Healthy energy source\",\n        \"Supports an active day\"\n      )\n    )\n  )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"#2c3e50\", \"#e74c3c\", \"#3498db\"))\n\n### |-  titles and caption ----\ntitle_text   &lt;- str_glue(\"Energy Drink Brand Comparison: Activity Support Drives High Scores\") \n\nsubtitle_text &lt;- str_glue(\"'Supports an active day' ranks highest across all brands, while health claims show largest variation\")\n\n# Create caption\ncaption_text &lt;- create_swd_caption(\n  year = 2025,\n  month = \"Jan\",\n  source_text = \"Let's Practice! Exercise 3.7\"\n)\n\n\n# |- fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n            \n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n      legend.position     = \"top\",\n      plot.margin         = margin(t = 10, r = 20, b = 10, l = 20),\n      axis.title.x        = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = colors$text, family = fonts$text, face = \"bold\", hjust = 0.5),\n      axis.title.y        = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = colors$text, family = fonts$text, face = \"bold\", hjust = 0.5),\n      axis.text           = element_text(size = rel(0.9), color = colors$text),\n      axis.line.x         = element_line(color = \"#252525\", linewidth = .3),\n      axis.ticks.x        = element_line(color = colors$text),  \n      axis.title          = element_text(face = \"bold\"),\n      panel.grid.minor    = element_blank(),\n      panel.grid.major    = element_blank(),\n      panel.grid.major.y  = element_line(color = \"grey85\", linewidth = .4)\n      )\n)\n      \n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow codep &lt;- ggplot(\n  data = tidy_energy_drinks,\n  aes(x = score, y = consumer_likeability, group = consumer_likeability, color = brand)\n  ) +\n  \n  # Geoms\n  geom_line(color = \"gray85\", linewidth = 0.8) +\n  geom_point(size = 3.5) +\n\n  # Scales\n  scale_x_continuous(\n    limits = c(0, 100),\n    breaks = seq(0, 100, by = 20)\n  ) +\n  scale_y_discrete() +\n  scale_color_manual(values = colors$palette) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Score\",\n    y = NULL,\n    color = \"Brand: \",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n  ) + \n  \n  # Theme\n  theme(\n    plot.title = element_markdown(\n      size = rel(1.7),\n      family = \"title\",\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(1.05),\n      family = \"subtitle\",\n      color = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = \"caption\",\n      color = colors$caption,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 15, b = 5)\n    )\n  ) \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot(p, type = 'swd', year = 2025, month = 01, exercise = 37, \n                    width = 10, height = 10)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 janitor_2.2.0   here_1.0.1      glue_1.8.0     \n [5] scales_1.3.0    showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1\n[21] yaml_2.3.10       pillar_1.9.0      crayon_1.5.3      magick_2.8.5     \n[25] commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4    \n[29] rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0       \n[33] colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3    utf8_1.2.4       \n[37] withr_3.0.2       bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29   \n[41] bit_4.5.0         ragg_1.3.3        hms_1.1.3         evaluate_1.0.1   \n[45] knitr_1.49        markdown_1.13     rlang_1.1.4       gridtext_0.1.5   \n[49] Rcpp_1.0.13-1     xml2_1.3.6        renv_1.0.3        svglite_2.1.3    \n[53] rstudioapi_0.17.1 vroom_1.6.5       jsonlite_1.8.9    R6_2.5.1         \n[57] systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_01 - Ex_037.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nStorytelling with Data Excercise | use space and alignment effectively: Download the data\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_02 - Ex_055.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_02 - Ex_055.html",
    "title": "TrueNut’s Market Dominance in Powdered Nut Butter",
    "section": "",
    "text": "Original\nThe goal of this month’s Storytelling with Data exercise is to go crazy or keep it simple (marimekko chart).\n\n\n\n\n\nFigure 1: Original chart\n\n\nAdditional information can be found HERE\nMakeover\n\n\n\n\n\nFigure 2: A dual-panel visualization titled TrueNut’s Market Dominance in Powdered Nut Butter. The left panel shows a quadrant chart positioning TrueNut as a market leader with 100% category coverage and high market share, NutBrite as a specialist with high coverage but lower share, and GoldenSpread as a limited player with low coverage and share. The right panel displays a dumbbell chart showing sales by product category, with TrueNut leading in most categories, particularly in Peanut Butter ($71.9M) and Hazelnut Spread ($73.81M).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow codeif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  camcorder,         # Record Your Plot History,\n  paletteer,         # Comprehensive Collection of Color Palettes\n  patchwork          # The Composer of Plots # The Composer of Plots # The Composer of Plots\n) \n\n### |- figure size ---- \ngg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 12,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow coderaw_data &lt;- read_csv(\n  here::here(\"data/swdexercise055.csv\")\n  ) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(raw_data)\n\n\n4. Tidy Data\n\nShow code# P1. Market Share Data ----\n\n# Transform raw data to long format with company identifiers\nlong_data &lt;- raw_data |&gt;\n  # Remove the total market row\n  filter(x1 != \"Total Market\") |&gt;\n  # Convert from wide to long format\n  pivot_longer(\n    cols = c(true_nut_sales, nut_brite_sales, golden_spread_sales),\n    names_to = \"company\", \n    values_to = \"sales\"\n  ) |&gt;\n  # Clean company names and calculate percentages\n  mutate(\n    # Use case_when instead of recode for better readability\n    company = case_when(\n      company == \"true_nut_sales\" ~ \"TrueNut\",\n      company == \"nut_brite_sales\" ~ \"NutBrite\",\n      company == \"golden_spread_sales\" ~ \"GoldenSpread\",\n      TRUE ~ company  # Fallback for unexpected values\n    ),\n    # Calculate percentage of category total\n    percentage = sales / total_sales * 100\n  )\n\n# Calculate overall company totals\ncompany_totals &lt;- raw_data |&gt;\n  # Sum sales for each company\n  summarise(\n    TrueNut = sum(true_nut_sales),\n    NutBrite = sum(nut_brite_sales),\n    GoldenSpread = sum(golden_spread_sales)\n  ) |&gt;\n  # Convert to long format\n  pivot_longer(\n    cols = everything(), \n    names_to = \"company\", \n    values_to = \"sales\"\n  ) |&gt;\n  # Calculate market share percentages\n  mutate(percentage = sales / sum(sales) * 100)\n\n# Calculate category coverage for each company\ncoverage &lt;- long_data |&gt;\n  # Only count categories where the company has sales\n  filter(sales &gt; 0) |&gt;\n  # Count unique categories per company\n  group_by(company) |&gt;\n  summarise(\n    categories_covered = n_distinct(x1),\n    # Calculate as percentage of all categories\n    coverage_percent = categories_covered / n_distinct(long_data$x1) * 100\n  )\n\n# Join company totals with coverage data\nposition_data &lt;- left_join(company_totals, coverage, by = \"company\")\n\n# Define quadrant labels with semantic positioning\nquadrant_labels &lt;- tibble(\n  # Define quadrant centers\n  quadrant = c(\"Specialists\", \"Limited Players\", \"Market Leaders\", \"Volume Players\"),\n  x = c(25, 25, 75, 75),     \n  y = c(65, 20, 65, 20),\n  # Add clear descriptions\n  description = c(\n    \"(Niche categories, strong coverage)\",\n    \"(Low share, few categories)\",\n    \"(Strong share, wide coverage)\",\n    \"(High share, category focused)\"\n  )\n) |&gt;\n  # Convert to label format expected by ggplot\n  rename(label = quadrant)\n\n# P2. Market by Product Category Data ----\n\n# Calculate category statistics and establish ordering\ncategory_stats &lt;- long_data |&gt; \n  # Group by category\n  group_by(x1) |&gt;\n  # Get key category metrics (just once per category)\n  summarize(\n    total_sales = first(total_sales),\n    .groups = \"drop\"  \n  ) |&gt;\n  # Sort by total sales descending\n  arrange(desc(total_sales))\n\n# Create ordered factor for consistent category display\ncategory_order &lt;- category_stats |&gt; pull(x1)\n\n# Prepare the main plotting data with ordered categories\nplot_data &lt;- long_data |&gt;\n  # Create ordered factor with categories in descending sales order\n  mutate(\n    # Reverse for bottom-to-top ordering in the plot\n    x1 = factor(x1, levels = rev(category_order))\n  ) |&gt;\n  # Only include meaningful sales values\n  filter(sales &gt; 0.01)  \n\n# Create the label data from filtered plot data\nlabel_data &lt;- plot_data |&gt; \n  # Format sales values as currency with millions indicator\n  mutate(\n    label = paste0(\"$\", round(sales, 2), \"M\")\n  )\n\n# Simplified category totals reference (using earlier calculation)\ncategory_totals &lt;- category_stats |&gt;\n  # Apply the same factor ordering\n  mutate(x1 = factor(x1, levels = rev(category_order)))\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(\n  palette = paletteer:::paletteer_d(\"ltc::trio4\")\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"TrueNut's Market Dominance in Powdered Nut Butter\")\n\nsubtitle_text &lt;- str_glue(\"Strategic position and category performance across a $386M market\")\n\n# Create caption\ncaption_text &lt;- create_swd_exe_caption(\n  year = 2025,\n  month = \"Feb\",\n  source_text =  \"Let's Practice! Exercise 5.5\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n    \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code# P1. Market Position Chart ----\np1 &lt;- ggplot(position_data, aes(x = percentage, y = coverage_percent)) +\n  # Geoms\n  geom_rect(xmin = 0, xmax = 50, ymin = 0, ymax = 50, fill = \"gray95\", alpha = 0.5) +\n  geom_rect(xmin = 50, xmax = 100, ymin = 0, ymax = 50, fill = \"gray95\", alpha = 0.5) +\n  geom_rect(xmin = 0, xmax = 50, ymin = 50, ymax = 100, fill = \"gray95\", alpha = 0.5) +\n  geom_rect(xmin = 50, xmax = 100, ymin = 50, ymax = 100, fill = \"gray95\", alpha = 0.5) +\n  geom_hline(yintercept = 50, linetype = \"dashed\", color = \"gray50\") +\n  geom_vline(xintercept = 50, linetype = \"dashed\", color = \"gray50\") +\n  geom_point(aes(color = company), size = 6, alpha = 0.8) +\n  geom_text(aes(label = company), color = \"gray20\", \n            fontface = \"bold\", size = 3.5, vjust = 3) +\n  geom_text(\n    data = quadrant_labels,\n    aes(x = x, y = y, label = label),\n    size = 4,\n    color = \"gray40\",\n    fontface = \"bold\",\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n  geom_text(\n    data = quadrant_labels,\n    aes(x = x, y = y - 4, label = description),  \n    size = 3,\n    color = \"gray50\",\n    fontface = \"italic\",\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n  # Scales\n  scale_x_continuous(\n    labels = percent_format(scale = 1), limits = c(0, 100)\n    ) +\n  scale_y_continuous(\n    labels = percent_format(scale = 1), limits = c(0, 100)\n    ) +\n  scale_color_manual(values = colors$palette) +\n  coord_cartesian(clip = \"off\") +\n  # Labs  \n  labs(\n    title = \"Company Market Position Analysis\",\n    subtitle = \"Comparison of market share vs. category coverage\",\n    x = \"Market Share\\n(% of total sales)\",\n    y = \"Category Coverage\\n(% of product categories)\"\n  ) \n\n# P2. Market by Product Category Chart ----\np2 &lt;- ggplot() +\n  # Geoms\n  geom_segment(\n    data = category_totals,\n    aes(y = x1, yend = x1, x = 0, xend = max(total_sales) * 1.05),\n    color = \"gray85\", linewidth = 0.5\n  ) +\n  geom_point(\n    data = plot_data,\n    aes(x = sales, y = x1, color = company),\n    size = 4, alpha = 0.9,\n    show.legend = TRUE\n  ) +\n  geom_text(\n    data = label_data,\n    aes(x = sales, y = x1, label = label),\n    vjust = -0.9, \n    size = 3,\n    show.legend = FALSE  \n  ) +\n  geom_text(\n    data = category_totals,\n    aes(x = max(total_sales) * 1.1, y = x1, label = paste0(\"Total: $\", total_sales, \"M\")),\n    hjust = 0, vjust = 0.3, size = 3, color = \"gray30\",\n    show.legend = FALSE\n  ) +\n  # Scales\n  scale_x_continuous(\n    labels = dollar_format(suffix = \"M\"),\n    limits = c(-10, max(category_totals$total_sales) * 1.3),\n    expand = c(0.01, 0)\n  ) +\n  scale_color_manual(values = colors$palette) +\n  # Labs\n  labs(\n    title = \"Nut Butter Market Analysis by Product Category\",\n    subtitle = \"Sales comparison across product categories by company\",\n    x = \"Sales ($ Millions)\",\n    y = NULL,\n  ) +\n  # Theme\n  theme(\n    legend.position = \"top\",\n    legend.title = element_blank(),\n    legend.key.size = unit(0.8, \"lines\"),  \n  )\n\n# Combined Charts -----\n\n# Combined Plot -----\ncombined_plot &lt;- (p1 + p2) +\n  plot_layout(widths = c(1, 1))   \n\ncombined_plot &lt;- combined_plot +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text( \n        size = rel(2.2),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(0.95),  \n        family = fonts$subtitle,\n        color = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.65),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    ))\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(\n  combined_plot, type = 'swd', year = 2025, month = 02, exercise = 055,\n  width = 12, height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 paletteer_1.6.0 camcorder_0.1.0 janitor_2.2.0  \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      codetools_0.2-20   snakecase_0.11.1  \n[21] htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3       pillar_1.9.0      \n[25] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[29] stringi_1.8.4      rematch2_2.1.2     labeling_0.4.3     rsvg_2.6.1        \n[33] rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1  \n[37] cli_3.6.3          magrittr_2.0.3     utf8_1.2.4         withr_3.0.2       \n[41] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     bit_4.5.0         \n[45] hms_1.1.3          evaluate_1.0.1     knitr_1.49         markdown_1.13     \n[49] gridGraphics_0.5-1 rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1     \n[53] xml2_1.3.6         renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1 \n[57] vroom_1.6.5        jsonlite_1.8.9     R6_2.5.1           fs_1.6.5          \n[61] prismatic_1.1.2    systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_02-Ex_055.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nData Sources:\n\n\nData Sources:\n\nStorytelling with Data Exercise | go crazy or keep it simple: Download the data\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_02.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_02.html",
    "title": "Five Major U.S. Fresh Vegetable Crops (2000-2022)",
    "section": "",
    "text": "Figure 1: A streamgraph visualization showing harvested acres of five major U.S. fresh vegetable crops from 2000 to 2022. The graph reveals layers of production with Sweet Corn and Tomatoes dominating at over 60K acres each by 2020. Smaller production areas are shown for Squash, Spinach, and Potatoes. The visualization uses color-coding and connecting lines with dots to identify each vegetable type. An upward trend in overall production is notable after 2010.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow codeif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  camcorder,         # Record Your Plot History\n  ggstream           # Create Streamplots in 'ggplot2'\n) \n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codevegatables_raw &lt;- read_csv(\n  here::here(\"data/NASS - 52F3230D-BDBF-3D09-902C-7125CCE63C9F.csv\")\n  ) |&gt; \n  clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(vegatables_raw)\nskim(vegatables_raw)\n\n\n4. Tidy Data\n\nShow codevegatables_clean &lt;- vegatables_raw |&gt;\n  # Select only the relevant columns \n  select(year, commodity, value) |&gt;\n  # Handle special codes \n  filter(\n    value != \"(D)\",  # Withheld to avoid disclosing data\n    value != \"(Z)\",  # Less than half unit\n    value != \"(S)\",  # Insufficient reports\n    value != \"(NA)\", # Not available\n    value != \"(X)\"   # Not applicable\n  ) |&gt;\n  mutate(\n    value = as.numeric(value),\n    # Format commodity names\n    commodity = case_when(\n      commodity == \"SWEET CORN\" ~ \"Sweet Corn\",\n      commodity == \"POTATOES\" ~ \"Potatoes\",\n      commodity == \"TOMATOES\" ~ \"Tomatoes\",\n      TRUE ~ str_to_title(commodity)\n    )\n  ) |&gt;\n  # Remove any remaining NA values \n  filter(!is.na(value)) |&gt;\n  # Group and summarize\n  group_by(year, commodity) |&gt;\n  summarise(total_acres = sum(value, na.rm = TRUE), .groups = 'drop') |&gt; \n  ungroup()\n\n\n# Tibble for manual label positions\nlabel_positions &lt;- tibble(\n  commodity = c(\"Potatoes\", \"Spinach\", \"Squash\", \"Sweet Corn\", \"Tomatoes\"),\n  # X positions for vertical alignment\n  x_position = c(2002, 2005, 2008, 2011, 2013),\n  # Label positions - extending beyond the streams\n  y_position = c(25000, 35000, 45000, 60000, -60000),  \n  # Stream connection points - where the lines should touch the streams\n  y_start = c(19000, 10000, 8000, 8000, -30000)    \n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"Potatoes\"   = \"#C4A484\",   \n  \"Spinach\"    = \"#165B33\",     \n  \"Squash\"     = \"#FFB01F\",      \n  \"Sweet Corn\" = \"#F7E03D\",   \n  \"Tomatoes\"   = \"#E41B17\"    \n  )\n)\n\n### |-  titles and caption ----\ntitle_text   &lt;- str_glue(\"Five Major U.S. Fresh Vegetable Crops (2000-2022)\") \nsubtitle_text &lt;- str_glue(\"A streamgraph showing harvested acres across different vegetables\")\n\n# Create caption\ncaption_text &lt;- create_swd_caption(\n    year = 2025,\n    month = \"Feb\",\n    source_text = \"Data Source: USDA Agricultural Statistics Service\"\n  )\n\n\n# |- fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis formatting\n    axis.title   = element_text(color = colors$text, face = \"bold\", size = rel(0.72)),\n    axis.text    = element_text(color = colors$text, size = rel(0.9)),\n    axis.line.x  = element_line(color = \"#252525\", linewidth = .3),\n    axis.ticks.x = element_line(color = colors$text),  \n\n    # Grid customization\n    panel.grid.minor   = element_blank(),\n    panel.grid.major   = element_blank(),\n    panel.grid.major.y = element_line(color = \"grey85\", linewidth = .4),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 20, b = 10, l = 20),\n    \n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow codep &lt;- ggplot(vegatables_clean, \n       aes(x = year, \n           y = total_acres, \n           fill = commodity, \n           group = commodity)) +\n  geom_stream(\n    type = \"mirror\",\n    bw = 0.85,\n    extra_span = 0.2\n  ) +\n  # Add vertical connecting lines\n  geom_segment(\n    data = label_positions,\n    aes(\n      x = x_position,\n      y = y_start,\n      xend = x_position,\n      yend = y_position\n    ),\n    color = colors$text,\n    linewidth = 0.3,\n    linetype = \"solid\"\n  ) +\n  # Add points at stream intersections\n  geom_point(\n    data = label_positions,\n    aes(\n      x = x_position,\n      y = y_start\n    ),\n    color = colors$text,\n    size = 1.5\n  ) +\n  # Add labels\n  geom_text(\n    data = label_positions,\n    aes(\n      x = x_position,\n      y = y_position,\n      label = commodity\n    ),\n    size = 4.5,\n    fontface = \"bold\",\n    color = colors$text,\n    vjust = ifelse(label_positions$y_position &lt; 0, 1.2, -0.2)  \n  ) +\n  # Add trend annotation\n  annotate(\n    \"text\", \n    x = 1999, \n    y = -53000, \n    label = str_glue(\"Overall vegetable production grew\\n\n                     significantly after 2010,dominated\\n\n                     by sweet corn and tomatoes with\\n\n                     over 60K acres each\"),\n    lineheight = 0.55,\n    size = 4,\n    fontface = \"italic\",\n    hjust = 0\n  ) +\n  # Scales\n  scale_fill_manual(values = colors$palette) +\n  scale_x_continuous(\n    breaks = seq(2000, 2025, 5),\n    expand = c(0.02, 0)\n  ) +\n  scale_y_continuous(\n    labels = scales::label_number(scale = 1/1000, suffix = \"K\"),\n    expand = c(0.02, 0),\n    position = \"right\",\n    sec.axis = dup_axis(  # Add secondary axis for better title placement\n      name = NULL,\n      labels = NULL\n    )\n  ) +\n  # Labs\n  labs(\n    x = \"Year\",\n    y = NULL,\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n  ) +\n  # Add custom y-axis title using annotate\n  annotate(\n    \"text\",\n    x = 1998,  \n    y = 0,     \n    label = \"Acres Harvested\\n(Thousands)\",\n    angle = 90,\n    fontface = \"bold\", \n    size = 3.5,\n    vjust = 0.5,\n    hjust = 0.5,\n    color = \"gray30\"\n  ) + \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.7),\n      family = fonts$title,\n      face   = \"bold\",\n      color  = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color  = colors$subtitle,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.65),\n      family = fonts$caption,\n      color  = colors$caption,\n      lineheight = 1.1,\n      hjust = 0.5,\n      halign = 0.5,\n      margin = margin(t = 15, b = 5)\n    ),\n  )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot(\n  p, type = 'swd', year = 2025, month = 02, \n  width = 8, height = 8\n  )\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggstream_0.1.0  camcorder_0.1.0 skimr_2.1.5     janitor_2.2.0  \n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.4.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3      pillar_1.9.0     \n[25] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[29] stringi_1.8.4     labeling_0.4.3    rsvg_2.6.1        rprojroot_2.0.4  \n[33] fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1  cli_3.6.3        \n[37] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[41] bit64_4.5.2       timechange_0.3.0  rmarkdown_2.29    bit_4.5.0        \n[45] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[49] markdown_1.13     rlang_1.1.4       gridtext_0.1.5    Rcpp_1.0.13-1    \n[53] xml2_1.3.6        renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1\n[57] vroom_1.6.5       jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_02.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nData Sources:\n\nUSDA National Agricultural Statistics Service: USDA National Agricultural Statistics Service\nUSDA National Agricultural Statistics Service (Quick Stats): USDA National Agricultural Statistics Service (Quick Stats\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_05.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_05.html",
    "title": "Disaster Death Distributions: 1950-2020",
    "section": "",
    "text": "Original\nThis month’s Storytelling with Data exercise aims to find a graph or slide that is ripe for improvement. Consider what you want to improve within the visual and implement those changes. Then, select an AI tool that can create visuals from prompts and a starting image. Ask the tool to consider the original image and prompt it to outline potential improvements.\n\n\n\n\n\nFigure 1: Original chart\n\n\nAdditional information can be found HERE\nAI (claude.ai)\nPrompt Title: Improve this chart on natural disaster deaths\nPrompt:\nThis is a historical stacked bar chart showing the decadal average number of deaths from natural disasters globally, segmented by disaster type (e.g., droughts, floods, earthquakes). The original chart is from Our World in Data and spans from 1900 to 2020. Help redesign this visual to improve clarity, storytelling, and visual appeal. Please:\n\nSimplify the visual by reducing clutter and using a limited, colorblind-friendly palette.\nHighlight major insights, like the sharp decline in deaths over time and changing causes.\nUse modern fonts, consistent scales, and clear legends.\nCreate a layout that is easy to read and suitable for a web article or presentation.\n\nOutput a cleaner, more engaging visual that tells the story effectively to a broad audience.\nChat link: https://claude.ai/chat/e8de4711-f7b5-4f82-b128-3a7f3568cc3f\n\n\n\n\n\n\n\n\nFigure 2: AI-generated chart (a)\n\n\n\n\n\n\n\n\n\nFigure 3: AI-generated chart (b)\n\n\n\n\n\nMakeover\n\n\n\n\n\nFigure 4: A ridgeline plot shows how disaster death distributions changed from 1950 to 2020 across five major disaster types: Drought, Flood, Earthquake, Extreme Weather, and Extreme Temperature. The visualization uses a rainbow color gradient from blue (1950s) to red (2020s) to display density curves of death patterns for each decade. The graph reveals shifting mortality distributions over time, with apparent variations in pattern and magnitude across different disaster types. Deaths are shown on a logarithmic scale from 0.1 to 1M.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n   tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  here,              # A Simpler Way to Find Your Files\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  ggridges,          # Ridgeline Plots in 'ggplot2'\n  RColorBrewer,      # ColorBrewer Palettes\n  camcorder          # Record Your Plot History\n) \n\n### |- figure size ---- \ngg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 10,\n  height = 10,\n  units  = \"in\",\n  dpi    = 320)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n\ndeaths_disasters_type_raw &lt;- read_csv(\n  here::here(\"data/MakeoverMonday/2025/decadal-deaths-disasters-type.csv\")) |&gt; \n  clean_names() \n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(deaths_disasters_type_raw)\nskim(deaths_disasters_type_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n\n# Pivot longer\ndeaths_long &lt;- deaths_disasters_type_raw |&gt;\n  pivot_longer(\n    cols = starts_with(\"deaths_\"),\n    names_to = \"disaster_type\",\n    values_to = \"deaths\"\n  ) |&gt;\n  # Clean disaster type names\n  mutate(\n    disaster_type = str_remove(disaster_type, \"deaths_\"),\n    disaster_type = str_remove(disaster_type, \"_decadal\"),\n    disaster_type = str_replace_all(disaster_type, \"_\", \" \"),\n    disaster_type = str_to_title(disaster_type)\n  )\n\n# Summary by disaster type\ndisaster_summary &lt;- deaths_long |&gt;\n  group_by(disaster_type) |&gt;\n  summarize(\n    total_deaths = sum(deaths, na.rm = TRUE),\n    countries_affected = sum(deaths &gt; 0, na.rm = TRUE),\n    max_deaths = max(deaths, na.rm = TRUE), \n    .groups = \"drop\" \n  ) |&gt;  \n  arrange(desc(total_deaths))\n\n# Top 5 disaster types\ntop5_disasters &lt;- disaster_summary |&gt;\n  top_n(5, total_deaths) |&gt;\n  pull(disaster_type)\n\n# Plot data\nplot_data &lt;- deaths_long |&gt;\n  filter(\n    deaths &gt; 0,\n    year &gt;= 1950,  \n    disaster_type %in% top5_disasters\n  ) |&gt;\n  # Reorder disaster types by total deaths\n  mutate(\n    disaster_type = factor(\n      disaster_type,   \n      levels = disaster_summary |&gt; \n        filter(disaster_type %in% top5_disasters) |&gt; \n        arrange(desc(total_deaths)) |&gt; \n        pull(disaster_type)\n    ),\n    decade = as.factor(year)\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = rev(brewer.pal(8, \"Spectral\")))\n\n### |-  titles and caption ----\ntitle_text   &lt;- str_glue(\"Disaster Death Distributions: 1950-2020\") \nsubtitle_text &lt;- str_glue(\"How the patterns of mortality from natural disasters changed over time\")\n\n# Create caption\ncaption_text &lt;- create_swd_caption(\n    year = 2025,\n    month = \"May\",\n    source_text = \"Data Source: Our World in Data, 'Death from Natural Disasters'\"\n  )\n\n# |- fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n    \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n\np &lt;- ggplot(plot_data, \n            aes(x = deaths, y = decade, fill = decade, height = after_stat(density))\n            ) +\n  # Geoms\n  geom_density_ridges(\n    scale = 3,\n    alpha = 0.85,\n    rel_min_height = 0.01,\n    bandwidth = 0.5,\n    color = \"white\",\n    linewidth = 0.2\n  ) +\n  # Scales\n  scale_x_log10(\n    # Special transformation with pseudo-log scale starting at 0\n    breaks = c(0, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000),\n    labels = c(\"0\", \"1\", \"10\", \"100\", \"1K\", \"10K\", \"100K\", \"1M\", \"10M\"),\n    expand = c(0.01, 0),\n    # Add small offset to avoid log(0) issue\n    trans = scales::pseudo_log_trans(base = 10)\n  ) +\n  scale_fill_manual(values = colors$palette) +\n  scale_y_discrete(expand = c(0, 0)) +\n  # Facets\n  facet_wrap(\n    ~disaster_type,\n    ncol = 3,\n    scales = \"fixed\"\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Deaths per Decade (log scale)\",\n    y = NULL,\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(2),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = colors$subtitle,\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    strip.background = element_rect(fill = \"#e0e0e0\", color = NA),\n    panel.spacing.x = unit(1, \"lines\"),\n    panel.spacing.y = unit(1, \"lines\"),\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n\n### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot(\n  p, type = 'swd', year = 2025, month = 05, \n  width = 10, height = 10\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0    RColorBrewer_1.1-3 ggridges_0.5.6     skimr_2.1.5       \n [5] janitor_2.2.0      here_1.0.1         glue_1.8.0         scales_1.3.0      \n [9] showtext_0.9-7     showtextdb_3.0     sysfonts_0.8.9     ggtext_0.1.2      \n[13] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n[17] purrr_1.0.2        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1      \n[21] ggplot2_3.5.1      tidyverse_2.0.0    pacman_0.5.1      \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6       pkgconfig_2.0.3  \n[13] lifecycle_1.0.4   farver_2.1.2      compiler_4.4.0    textshaping_0.4.0\n[17] munsell_0.5.1     repr_1.1.7        codetools_0.2-20  snakecase_0.11.1 \n[21] htmltools_0.5.8.1 yaml_2.3.10       crayon_1.5.3      pillar_1.9.0     \n[25] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[29] stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0    \n[33] grid_4.4.0        colorspace_2.1-1  cli_3.6.4         magrittr_2.0.3   \n[37] base64enc_0.1-3   utf8_1.2.4        withr_3.0.2       bit64_4.5.2      \n[41] timechange_0.3.0  rmarkdown_2.29    bit_4.5.0         ragg_1.3.3       \n[45] hms_1.1.3         evaluate_1.0.1    knitr_1.49        markdown_1.13    \n[49] rlang_1.1.6       gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6       \n[53] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 vroom_1.6.5      \n[57] jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_05.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nData Sources:\n\nDeath from Natural Disasters: Our World in Data via Makeover Monday 2024 week 25\n\n\nArticle:\n\nOur World in Data: Natural Disasters: How many people die from disasters, and how are these impacts changing over time?\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_33.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_33.html",
    "title": "Visitor Distribution by Start Month at World’s Fairs",
    "section": "",
    "text": "Figure 1: This is a ridge chart showing the distribution of visitors to World’s Fairs, organized by the month they started from January to December between 1851 and 2021. Each ridge represents a different month, with varying peaks indicating the number of visitors in millions. The chart uses shades of purple for higher visitor months and warmer colors for lower ones.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,         # Compact and Flexible Summaries of Data\n  scales,        # Scale Functions for Visualization\n  lubridate,     # Make Dealing with Dates a Little Easier\n  MetBrewer,     # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  ggridges       # Ridgeline Plots in 'ggplot2' # Ridgeline Plots in 'ggplot2'\n )  \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  6,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 33) \n\nworlds_fairs &lt;- tt$worlds_fairs |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(worlds_fairs)\nskim(worlds_fairs)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Tidy\nworlds_fairs &lt;- worlds_fairs |&gt;\n    mutate(start_month = factor(start_month, levels = 1:12, labels = month.abb))\n\n# Create a data frame with all months\nall_months &lt;- data.frame(start_month = factor(month.abb, levels = month.abb))\n\n# Left join with plot_data\ndata_plot &lt;- all_months |&gt; \n    left_join(worlds_fairs, by = \"start_month\")\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 33 } &bull; Source: List of world expositions (Wikipedia)&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Visitor Distribution by Start Month at World\\\\'s Fairs\")\nsubtitle_text &lt;- str_glue(\"Density of visitor counts across fairs held from 1851 to 2021\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 12, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"top\",\n    \n    legend.justification  = \"right\",\n    legend.title.position = \"top\",\n    legend.title.align    = 1,  \n    legend.box.just       = \"right\",\n    \n    legend.margin         = margin(5, 10, -65, 0),\n    \n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 20, r = 25, b = 20, l = 25),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.2), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.2), \n                                         color = text_col, family = \"text\", face = \"bold\", vjust = 0.5),\n    axis.text             = element_text(size = rel(0.95), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = 0.12),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_blank(),\n    panel.grid.major.y    = element_line(linetype = \"dotted\", linewidth = 0.15, color = 'gray'),\n    panel.grid.minor.y    = element_blank(),\n)   \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  final plot ----  \np &lt;- data_plot |&gt;\n    ggplot(aes(x = visitors, y = start_month, fill = start_month)) +\n    \n    # Geom\n    geom_density_ridges_gradient(\n        scale = 3,\n        rel_min_height = 0.01,\n        gradient_lwd = 1.0,\n        aes(fill = ..x..), \n        color = \"gray10\", \n        linewidth = .25\n    ) +\n    \n    # Scales\n    scale_y_discrete() +\n    scale_x_continuous(labels = label_number(suffix = \" M\")) +\n    scale_fill_viridis_c(\n        name = \"Number of Visitors\",\n        option = \"C\",\n        direction = -1,\n        begin = 0.2,\n        end = 0.9,\n        guide = guide_colourbar(\n            title = \"Visitors (in millions)\",\n            title.position = \"top\",\n            barwidth = 12,\n            draw.ulim = 75,\n            barheight = 1,\n            frame.colour = NA)) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        x = \"Number of Visitors\",\n        y = \"Start Month\",\n        fill = \"Number of Visitors\",\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text,\n    ) +\n    \n    # Theme\n    theme(\n        plot.title      = element_markdown(\n            size        = rel(1.7),\n            family      = \"title\",\n            color       = title_col,\n            face        = \"bold\",\n            lineheight  = 0.85,\n            margin      = margin(t = 5, b = 5)\n        ),\n        plot.subtitle   = element_markdown(\n            size        = rel(1.1),\n            family      = \"subtitle\",\n            color       = title_col,\n            lineheight  = 1,\n            margin      = margin(t = 5, b = 15)\n        ),\n        plot.caption    = element_markdown(\n            size        = rel(.65),\n            family      = \"caption\",\n            color       = caption_col,\n            lineheight  = 0.6,\n            hjust       = 0,\n            halign      = 0,\n            margin      = margin(t = 10, b = 0)\n        )\n    )  \n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_33.png\"),\n  plot = p,\n  width  =  8,\n  height =  6,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_33.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_33.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_35.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_35.html",
    "title": "Exploring Individual Word Trends Across 27 Seasons of Power Rangers",
    "section": "",
    "text": "Figure 1: The faceted area chart displays the frequency of the top 10 words used in Power Rangers episode descriptions over 27 seasons. Each word is plotted separately, with its frequency on the y-axis and the season number on the x-axis. This highlights individual word trends over time.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,         # Compact and Flexible Summaries of Data\n  scales,        # Scale Functions for Visualization\n  lubridate,     # Make Dealing with Dates a Little Easier\n  MetBrewer,     # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  tidytext       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n )   \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 35) \n\nepisodes &lt;- tt$power_rangers_episodes |&gt; clean_names() |&gt; glimpse()\nseasons  &lt;- tt$power_rangers_seasons |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(episodes)\nglimpse(seasons)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Tidy\njoined_data &lt;- episodes |&gt; \n    left_join(y = seasons, by = \"season_title\") |&gt; \n    rename(\n        imdb_rating_episode = imdb_rating.x,\n        imdb_rating_season = imdb_rating.y,\n    ) |&gt; \n    mutate(air_date_last_ep = ymd(air_date_last_ep)) \n\n# Unnest tokens from the 'desc' column, remove stop words, and calculate word frequency\nword_frequency_over_time &lt;- joined_data |&gt;\n    unnest_tokens(word, desc) |&gt;\n    anti_join(stop_words, by = \"word\") |&gt;\n    count(season_num, word, sort = TRUE) |&gt;\n    group_by(season_num) |&gt;\n    mutate(frequency = n / sum(n)) |&gt;\n    ungroup()\n\n# Select the top 10 words by total frequency across all seasons\ntop_words &lt;- word_frequency_over_time |&gt;\n    group_by(word) |&gt;\n    summarise(total_frequency = sum(frequency)) |&gt;\n    top_n(10, total_frequency) |&gt;\n    pull(word)\n\n# Filter for top words \ndata_plot &lt;- word_frequency_over_time |&gt;\n    filter(word %in% top_words) |&gt;\n    mutate(word = fct_reorder(word, -frequency))\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 35 } &bull; Source: Power Rangers: Seasons and episodes data&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Exploring Individual Word Trends Across 27 Seasons of Power Rangers\")\nsubtitle_text &lt;- str_glue(\"Tracking the top 10 words and how they evolve independently over time in\\nepisode descriptions\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 20, r = 20, b = 20, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = .15),\n    panel.grid.minor.y    = element_blank(),\n    panel.grid.major.y    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray'),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_blank(),\n    \n    strip.text            = element_textbox(size     = rel(1),\n                                            face     = 'bold',\n                                            color    = text_col,\n                                            hjust    = 0.5,\n                                            halign   = 0.5,\n                                            r        = unit(5, \"pt\"),\n                                            width    = unit(5.5, \"npc\"),\n                                            padding  = margin(3, 0, 3, 0),\n                                            margin   = margin(3, 3, 3, 3),\n                                            fill     = \"transparent\"),\n    panel.spacing       = unit(1, 'lines')\n)  \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  final plot ----  \np &lt;- data_plot |&gt; \n    ggplot(aes(x = season_num, y = frequency, color = word, fill = word)) +\n    \n    # Geoms\n    geom_line(linewidth = 0.6) +  \n    geom_area(alpha = 0.5) +\n    \n    # Scales\n    scale_x_continuous(breaks = pretty_breaks()) +\n    scale_y_continuous(breaks = pretty_breaks(n = 2)) +\n    scale_color_viridis_d(option = \"F\", begin = 0.05, end = .85) + \n    scale_fill_viridis_d(option = \"F\", begin = 0.05, end = .85) + \n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        x = \"Season Number\",\n        y = \"Word Frequency\",\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n    ) +\n    \n    # Facets\n    facet_wrap(~ word, scales = \"free_y\", ncol = 2) +  \n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.3),\n            family = \"title\",\n            color = title_col,\n            face = \"bold\",\n            lineheight = 0.85,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1),\n            family = \"subtitle\",\n            color = title_col,\n            lineheight = 1,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size = rel(.5),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 0.6,\n            hjust = 0,\n            halign = 0,\n            margin = margin(t = 10, b = 0)\n        )\n    )\n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_35.png\"),\n  plot = p,\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_35.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_35.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_37.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_37.html",
    "title": "Distribution of College Attendance Rates by Selectivity Tier",
    "section": "",
    "text": "Figure 1: A faceted bar plot displaying the distribution of college attendance rates based on selectivity tier. The x-axis is labeled “Attendance Rate,” and the y-axis is labeled “Frequency.” Six panels represent different college tiers: Ivy Plus, Highly Selective Private, Highly Selective Public, Other Elite Schools (Public and Private), Selective Private, and Selective Public. Each panel has a histogram in gray with colored bars highlighting specific sections, using different colors for each tier.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  lubridate,         # Make Dealing with Dates a Little Easier\n  MetBrewer,         # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  MoMAColors,        # Color Palettes Inspired by Artwork at the Museum of Modern Art in New York City\n  glue,              # Interpreted String Literals\n  gghighlight        # Highlight Lines and Points in 'ggplot2'\n )  \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 37) \n\ncollege_admissions &lt;- tt$college_admissions |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(college_admissions)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# Tidy\ncollege_admissions_clean &lt;- college_admissions  |&gt; \n    filter(!is.na(attend)) |&gt; \n    mutate(\n        tier = str_to_title(tier),\n        tier = case_when(\n            tier == \"Highly Selective Private\" ~ \"Highly Selective&lt;br&gt;Private\",\n            tier == \"Highly Selective Public\"  ~ \"Highly Selective&lt;br&gt;Public\",\n            tier == \"Other Elite Schools (Public And Private)\" ~ \"Other Elite Schools&lt;br&gt;(Public And Private)\",\n            TRUE ~ tier\n        ),\n        tier = factor(tier, \n                      levels = c(\"Ivy Plus\", \n                                 \"Highly Selective&lt;br&gt;Private\", \n                                 \"Highly Selective&lt;br&gt;Public\", \n                                 \"Other Elite Schools&lt;br&gt;(Public And Private)\", \n                                 \"Selective Private\", \n                                 \"Selective Public\"))\n    ) \n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- MoMAColors::moma.colors(palette_name = \"Panton\", n = 6, type = 'discrete')\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 37 } &bull; Source: Opportunity Insights: College-Level Data for 139 Selective American Colleges&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Distribution of College Attendance Rates by Selectivity Tier\")\nsubtitle_text &lt;- str_glue(\"A Comparison of Attendance Rates for U.S. Colleges Across Selectivity Levels\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    axis.line.x           = element_line(color = \"gray40\", linewidth = .15),\n    panel.grid.minor.y    = element_blank(),\n    panel.grid.major.y    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray10'),\n    panel.grid.minor.x    = element_blank(),\n    panel.grid.major.x    = element_line(linetype = \"dotted\", linewidth = 0.1, color = 'gray10'),\n    \n    strip.text            = element_textbox(size     = rel(0.9),\n                                            face     = 'bold',\n                                            color    = text_col,\n                                            hjust    = 0.5,\n                                            halign   = 0.5,\n                                            r        = unit(3, \"pt\"),\n                                            width    = unit(6, \"npc\"),\n                                            padding  = margin(2, 0, 2, 0),\n                                            margin   = margin(3, 3, 3, 3),\n                                            fill     = \"transparent\"),\n    panel.spacing         = unit(1, 'lines')\n)  \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  final plot ----  \np &lt;- ggplot(college_admissions_clean, \n       aes(x = attend, fill = tier)) + \n    \n    # Geoms\n    geom_histogram(bins = 30, color = \"gray10\", linewidth = 0.2, alpha = 0.75) +\n    gghighlight::gghighlight() +\n    \n    # Labs\n    labs(\n        x = \"Attendance Rate\",\n        y = \"Frequency\",\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text\n    ) +\n    \n    # Scales\n    scale_x_continuous(breaks = pretty_breaks(n = 2)) +\n    scale_y_continuous() +\n    scale_fill_manual(values = col_palette) +\n    coord_cartesian(clip = 'off') +\n    \n    # Facets\n    facet_wrap(vars(tier)) +\n\n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.5),\n            family = \"title\",\n            color = title_col,\n            face = \"bold\",\n            lineheight = 0.85,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.95),\n            family = \"subtitle\",\n            color = title_col,\n            lineheight = 1,\n            margin = margin(t = 5, b = 15)\n        ),\n        plot.caption = element_markdown(\n            size = rel(.5),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 0.6,\n            hjust = 0,\n            halign = 0,\n            margin = margin(t = 10, b = 5)\n        )\n    )\n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_37.png\"),\n  plot = p,\n  width  =  7.77,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_37.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_37.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\nsessionInfo()\n```\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.4        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.6       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_39.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_39.html",
    "title": "Gender Representation in the International Mathematical Olympiad",
    "section": "",
    "text": "Figure 1: Gender Representation in the International Mathematical Olympiad. On the left, a bar chart shows the total number of male and female contestants by country (raw counts), with the UK, Russia, and Romania having the highest totals. Male contestants dominate in nearly every country. On the right, a line chart shows the proportion of male and female contestants each year from 1959 to 2024, with males consistently comprising around 87% of contestants and females around 13%. Annotations highlight that despite an increase in overall contestants, the gender gap has remained the same.\n\n\n\n\n Steps to Create this Graphic \n\n1. Load Packages & Setup\n\n\nCode\n```{r}\n#| label: load\n\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  lubridate,         # Make Dealing with Dates a Little Easier\n  MetBrewer,         # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n  MoMAColors,        # Color Palettes Inspired by Artwork at the Museum of Modern Art in New York City\n  glue,              # Interpreted String Literals\n  patchwork,         # The Composer of Plots\n  geomtextpath       # Curved Text in 'ggplot2' \n )  \n\n# ### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  11,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n\n\n2. Read in the Data\n\n\nCode\n```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 39) \n\ncountry_results &lt;- tt$country_results_df |&gt; clean_names() |&gt; glimpse()\nindividual_results &lt;- tt$individual_results_df |&gt; clean_names() |&gt; glimpse()\ntimeline &lt;- tt$timeline_df |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n\n\n3. Examing the Data\n\n\nCode\n```{r}\n#| label: examine\n\nglimpse(country_results)\nglimpse(individual_results)\nglimpse(timeline)\n```\n\n\n\n\n4. Tidy Data\n\n\nCode\n```{r}\n#| label: tidy\n\n# first plot data (pyramid style chart) ----\n\n# Calculate the total number of male and female contestants per country\ngender_by_country_summary &lt;- timeline |&gt;\n  group_by(country) |&gt;\n  summarize(\n    male = sum(male_contestant, na.rm = TRUE),\n    female = sum(female_contestant, na.rm = TRUE),\n    total_contestants = male + female\n  ) |&gt;\n  ungroup() |&gt;\n  arrange(desc(total_contestants))\n\n# Prepare the data for a pyramid chart\ngender_by_country &lt;- gender_by_country_summary |&gt;\n  pivot_longer(\n    cols = c(male, female),\n    names_to = \"gender\",\n    values_to = \"count\"\n  ) |&gt;\n  mutate(count = ifelse(gender == \"female\", -count, count)) # Negative for female\n\n# Modify the country labels to shorten or reformat names\ngender_by_country &lt;- gender_by_country |&gt;\n  mutate(\n    country = case_when(\n      country == \"United States of America\" ~ \"USA\",\n      country == \"United Kingdom\" ~ \"UK\",\n      country == \"People's Republic of China\" ~ \"China\",\n      country == \"Union of Soviet Socialist Republics\" ~ \"USSR\",\n      country == \"Republic of Korea\" ~ \"South Korea\",\n      country == \"Russian Federation\" ~ \"Russia\",\n      country == \"German Democratic Republic\" ~ \"East Germany\",\n      TRUE ~ country # Keep all other country names as they are\n    )\n  )\n\n\n# second plot (line chart) ----\n\n# Data prep: Normalize by total contestants and calculate the gap\ngender_representation_normalized &lt;- timeline |&gt;\n    filter(!is.na(female_contestant) & !is.na(male_contestant)) |&gt;\n    mutate(\n        total_contestants = female_contestant + male_contestant,\n        female_percentage = (female_contestant / total_contestants) * 100,\n        male_percentage = (male_contestant / total_contestants) * 100\n        ) |&gt;\n    select(year, female_percentage, male_percentage)\n\n# Pivot longer\ngender_representation_normalized_long &lt;- gender_representation_normalized |&gt;\n    pivot_longer(\n      cols = c(female_percentage, male_percentage), \n      names_to = \"gender\", \n      values_to = \"percentage\"\n      ) |&gt;\n    mutate(gender = ifelse(gender == \"female_percentage\", \"Female\", \"Male\"))\n\n# Split the data into two separate datasets for ribbon use\nmale_data &lt;- gender_representation_normalized_long |&gt; filter(gender == \"Male\")\nfemale_data &lt;- gender_representation_normalized_long |&gt; filter(gender == \"Female\")\n```\n\n\n\n\n5. Visualization Parameters\n\n\nCode\n```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- MoMAColors::moma.colors(palette_name = 'Klein', type = \"discrete\")[c(1,2)]\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 39 } &bull; Source: IMO Team and Individual Results&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\nmale   &lt;- str_glue(\"&lt;span style='color:{ col_palette[2] }'&gt;**male**&lt;/span&gt;\")\nfemale &lt;- str_glue(\"&lt;span style='color:{ col_palette[1] }'&gt;**female**&lt;/span&gt;\")\n\ntitle_text    &lt;- str_glue(\"Gender Representation in the International Mathematical Olympiad\")\nsubtitle_text &lt;- str_glue(\"__Left:__ Total number of  { male } and { female } contestants by country (_raw counts_).&lt;br&gt;\n                          __Right:__ Proportion of total contestants who were { male } and { female }  each year (_% of total contestants per year_)\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n)  \n```\n\n\n\n\n6. Plot\n\n\nCode\n```{r}\n#| label: plot\n\n### |-  first plot ----  \n\n# Pyramid style chart\np1 &lt;- ggplot(gender_by_country, aes(x = reorder(country, total_contestants), y = count, fill = gender)) +\n  geom_bar(stat = \"identity\", width = 0.75, alpha = 0.85) +\n\n  # Geoms\n  # Adding labels outside the bars\n  geom_text(aes(label = comma(abs(count))),\n    position = position_nudge(y = ifelse(gender_by_country$gender == \"female\", -50, 50)),\n    size = 3.6, hjust = ifelse(gender_by_country$gender == \"female\", 1, 0), color = text_col\n  ) +\n\n  # Adding a single country label next to the bars\n  geom_text(aes(y = -900, label = country), # Position countries next to the bars\n    size = 3.6, hjust = 0.5, vjust = 0, color = text_col\n  ) +\n\n  # Scales\n  scale_y_continuous(\n    breaks = seq(-1000, 1000, by = 500),\n    labels = scales::comma_format(),\n    limits = c(-1200, 1600)\n  ) +\n  scale_fill_manual(values = col_palette) +\n  coord_flip(clip = \"off\") +\n\n  # labs\n  labs(\n    x = NULL,\n    y = \"Number of Contestants\",\n    fill = \"Gender\"\n  ) +\n\n  # Theme\n  theme(\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n  )\n\n\n### |-  second plot ----  \n\n# Create the plot, including the ribbon and the textlines\np2 &lt;- ggplot() +\n\n  # Geoms\n  # Add ribbon to fill the area between male and female percentages\n  geom_ribbon(aes(x = male_data$year, ymin = female_data$percentage, ymax = male_data$percentage),\n    fill = \"lightblue\", alpha = 0.5\n  ) +\n\n  # Add the geom_textline for male and female percentages\n  geom_textline(aes(x = year, y = percentage, color = gender, label = gender),\n    data = gender_representation_normalized_long,\n    linewidth = 1,\n    family = \"text\",\n    size = 5,\n    fontface = \"bold\",\n    hjust = 0.5, # move labels to the right\n    offset = unit(0.3, \"cm\"), # move labels up\n    text_smoothing = 30 # smooth text (more legible)\n  ) +\n\n  # Adding geom_point and geom_text for the start and end percentages for male and female\n  geom_point(\n    data = filter(gender_representation_normalized_long, year == min(year) | year == max(year)),\n    aes(x = year, y = percentage, color = gender), size = 4\n  ) +\n\n  # Female\n  geom_text(\n    data = filter(\n      gender_representation_normalized_long,\n      (year == min(year) | year == max(year)) & gender == \"Female\"\n    ),\n    aes(\n      x = year, y = percentage, label = scales::percent(percentage / 100, accuracy = 1),\n      color = gender\n    ), size = 5, nudge_x = -0.005, vjust = -1.3, fontface = \"bold\", family = \"text\"\n  ) +\n\n  # Male\n  geom_text(\n    data = filter(\n      gender_representation_normalized_long,\n      (year == min(year) | year == max(year)) & gender == \"Male\"\n    ),\n    aes(\n      x = year, y = percentage, label = scales::percent(percentage / 100, accuracy = 1),\n      color = gender\n    ), size = 5, nudge_x = 0.005, vjust = 1.9, fontface = \"bold\", family = \"text\"\n  ) +\n\n  # Labs\n  labs(\n    x = \"Year\",\n    y = \"Percentage of Contestants\",\n    color = \"Gender\"\n  ) +\n\n  # Scales\n  scale_x_continuous() +\n  scale_y_continuous(labels = scales::label_percent(scale = 1)) +\n  scale_color_manual(values = col_palette) +\n  coord_cartesian(clip = \"off\")\n\n\n#### |-  combined plot ----  \n# Annotation and aspect ratio of p2\np2 &lt;- p2 + \n    annotate(\n        \"text\", \n        x = 1962, \n        y = 50, \n        label = \"Even though the overall contestant count has increased,\\n the gender gap has remained the same.\", \n        size = 4, \n        fontface = \"italic\", \n        family = \"text\", \n        color = 'gray40',\n        hjust = 0\n    ) +\n    theme(aspect.ratio = 0.85)  \n\n# Combine plots\ncombined_plot &lt;- (p1 | p2) +\n    patchwork::plot_layout(\n        ncol = 2, \n        widths = c(1, 1.25),  # Adjusting relative widths\n        guides = 'collect'    # Collect legends\n    ) +\n    \n    # Labs\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n    ) &\n    \n    # Theme \n    theme(\n        plot.margin = margin(10, 20, 10, 20),  \n        \n        plot.title = element_markdown(\n            size = rel(1.7),   \n            family = \"title\",\n            face = \"bold\",\n            color = title_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_markdown(\n            size = rel(0.88), \n            family = 'subtitle',\n            color = subtitle_col,\n            lineheight = 1.1, \n            margin = margin(t = 5, b = 5)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.65),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 1.1,\n            hjust = 0.5,\n            halign = 1,\n            margin = margin(t = 5, b = 5)\n        )\n    )\n\n# Show the combined plot\ncombined_plot  \n```\n\n\n\n\n7. Save\n\n\nCode\n```{r}\n#| label: save\n\n### |-  plot image ----  \n\nlibrary(ggplotify)\n# Convert patchwork plot to grob \n# There was some issues between patchwork and ggsave\nplot_grob &lt;- as.grob(combined_plot)\n\n# Save the plot again\nggsave(\n    filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_39.png\"),\n    plot = plot_grob,\n    width  = 11,\n    height = 10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_39.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_39.png\"))\n```\n\n\n\n\n8. Session Info\n\n\nCode\n```{r, eval=TRUE}\ninfo &lt;- capture.output(sessioninfo::session_info())\n# Remove lines that contain \"[1]\" and \"[2]\" (the file paths)\nfiltered_info &lt;- grep(\"\\\\[1\\\\]|\\\\[2\\\\]\", info, value = TRUE, invert = TRUE)\ncat(filtered_info, sep = \"\\n\")\n```\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 11 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/New_York\n date     2025-05-22\n pandoc   3.4 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      1.0.1   2024-10-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P htmlwidgets   1.6.4   2023-12-06 [?] CRAN (R 4.4.0)\n P jsonlite      1.8.9   2024-09-20 [?] RSPM (R 4.4.0)\n P knitr         1.49    2024-11-08 [?] RSPM (R 4.4.0)\n P rmarkdown     2.29    2024-11-04 [?] RSPM (R 4.4.0)\n P rstudioapi    0.17.1  2024-10-22 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P xfun          0.49    2024-10-31 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_41.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_41.html",
    "title": "Radar Charts of Species Categories by National Park",
    "section": "",
    "text": "Figure 1: The image displays 15 radar charts, with each chart representing different species categories in various U.S. national parks. Each chart is labeled with a park name and compares the counts of species such as mammals, reptiles, fungi, etc. These charts are used to visualize the biodiversity across the parks.”\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nCode```{r}\n#| label: load\n\n## 1. LOAD PACKAGES & SETUP ----\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    lubridate,         # Make Dealing with Dates a Little Easier\n    glue,              # Interpreted String Literals\n    fmsb,              # Functions for Medical Statistics Book with some Demographic Data\n    purrr,             # Functional Programming Tools\n    patchwork,         # The Composer of Plots\n    grid,              # The Grid Graphics Package\n    cowplot,           # Streamlined Plot Theme and Plot Annotations for 'ggplot2'\n    png,               # Read and write PNG images\n    here               # A Simpler Way to Find Your Files\n)   \n\n### |- figure size ---- \ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nCode```{r}\n#| label: read\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 41) \n\nspecies_data &lt;- tt$most_visited_nps_species_data |&gt; clean_names() |&gt; glimpse()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examing the Data\n\nCode```{r}\n#| label: examine\n\nglimpse(species_data)\nskim(species_data)\n```\n\n\n4. Tidy Data\n\nCode```{r}\n#| label: tidy\n\n# Prepare data for radar plots\nradar_data &lt;- species_data |&gt;\n  count(park_name, category_name) |&gt;\n  pivot_wider(\n    names_from = category_name,\n    values_from = n,\n    values_fill = 0\n  )\n```\n\n\n5. Visualization Parameters\n\nCode```{r}\n#| label: params\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"ButterflyColors::fountainea_ryphea\")[c(1)] \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 41 } &bull; Source: NPSpecies - The National Park Service biodiversity database&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Radar Charts of Species Categories by National Park\")\nsubtitle_text &lt;- str_glue(\"Comparison of species distributions across U.S. national parks\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", \"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    \n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_blank(),  \n    axis.text.y           = element_blank(),\n    axis.text.x           = element_text(color = text_col, family = \"text\", size = rel(0.9)),\n    axis.ticks.x          = element_line(color = text_col),  \n)\n\n### |- plot function ----\n\n# Function to create radar chart and save as PNG\ncreate_and_save_radar_plot &lt;- function(data, park_name) {\n    \n    # Define maximum and minimum values for the radar chart\n    max_values &lt;- rep(max(data), ncol(data))\n    min_values &lt;- rep(0, ncol(data))\n    \n    # Combine the max, min, and park data to create the radar chart data frame\n    plot_data &lt;- as.data.frame(rbind(max_values, min_values, data))\n    colnames(plot_data) &lt;- names(data)\n    rownames(plot_data) &lt;- c(\"Max\", \"Min\", park_name)\n    \n     # Define the file path to save the radar chart\n    temp_path &lt;- here(\"2024/Week_41/\")\n    if (!dir.exists(temp_path)) {\n      dir.create(temp_path, recursive = TRUE)\n    }\n    file_path &lt;- file.path(temp_path, paste0(\"radar_plot_\", gsub(\" \", \"_\", park_name), \".png\"))\n    \n    # Close any open devices\n    while (!is.null(dev.list())) dev.off()\n    \n    # Create and save the radar chart as a PNG\n    png(filename = file_path, width = 400, height = 400)\n    fmsb::radarchart(plot_data,\n                     axistype = 1,                             # Axis type configuration\n                     title = park_name,                        # Title for the radar chart\n                     pcol = col_palette,                       # Line color for the polygon\n                     pfcol = scales::alpha(col_palette, 0.25), # Fill color for the polygon with transparency\n                     plty = 1,                                 # Line type for the polygon\n                     cglcol = bkg_col,                         # Color of the grid lines\n                     cglty = 1,                                # Type of the grid lines\n                     cglwd = 0.8,                              # Width of the grid lines\n                     axislabcol = bkg_col,                     # Color of the axis labels\n                     cex.axis = 1.2,                           # Increase axis text size\n                     cex.main = 1.5                            # Increase title text size\n    )\n    dev.off()\n    \n    return(file_path)\n}\n```\n\n\n6. Plot\n\nCode```{r}\n#| label: plot\n\n### |-  individual plots ----\n# Generate and save radar plots for each park\nshowtext_auto(enable = FALSE)\nradar_plot_files &lt;- radar_data |&gt;\n    split(radar_data$park_name) |&gt;\n    map_chr(~ {\n        park_name &lt;- .x$park_name[1]                      # Extract park name\n        park_data &lt;- .x |&gt; select(-park_name)             # Remove park name column from data\n        create_and_save_radar_plot(park_data, park_name)  # Create and save radar plot\n    })\n\n\n# Load each saved radar plot as a raster image and convert to ggplot\nradar_plots &lt;- map(radar_plot_files, ~ {\n    img &lt;- readPNG(.x)                                    # Read the saved PNG file\n    ggdraw() + \n        draw_image(img)                                   # Convert the image to a ggplot object\n    })\n\n\n### |-  combined plots ----\nshowtext_auto(enable = TRUE)\n\ncombined_plot &lt;- wrap_plots(radar_plots, ncol = 4) +\n    plot_annotation(\n        \n        # Labs\n        title = title_text,\n        subtitle = title_text,\n        caption = caption_text,\n        \n        # Theme\n        theme = theme(\n            plot.title = element_text(\n                size = rel(1.7),\n                family = \"title\",\n                face = \"bold\",\n                color = title_col,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size = rel(1),\n                family = \"subtitle\",\n                color = subtitle_col,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.caption = element_markdown(\n                size = rel(0.65),\n                family = \"caption\",\n                color = caption_col,\n                lineheight = 1.1,\n                hjust = 0.5,\n                halign = 1,\n                margin = margin(t = 5, b = 5)\n            )\n        )\n    )\n\ncombined_plot \n```\n\n\n7. Save\n\nCode```{r}\n#| label: save\n\n### |-  plot image ----  \n\nlibrary(ggplotify)\n# Convert patchwork plot to grob \n# There was some issues between cowplot and ggsave\nplot_grob &lt;- as.grob(combined_plot)\n\n# Save the plot again\n# Activate showtext manually\nshowtext_begin()\n\n# Save the plot as PNG\npng(filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_41.png\"),\n    width = 10, height = 10, units = \"in\", res = 320)\ngrid.draw(plot_grob)\ndev.off()\n\n# Deactivate showtext\nshowtext_end()\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_41.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_41.png\"))\n```\n\n\n8. Session Info\n\nCode```{r, eval=TRUE}\ninfo &lt;- capture.output(sessioninfo::session_info())\n# Remove lines that contain \"[1]\" and \"[2]\" (the file paths)\nfiltered_info &lt;- grep(\"\\\\[1\\\\]|\\\\[2\\\\]\", info, value = TRUE, invert = TRUE)\ncat(filtered_info, sep = \"\\n\")\n```\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 11 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/New_York\n date     2025-05-22\n pandoc   3.4 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      1.0.1   2024-10-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P htmlwidgets   1.6.4   2023-12-06 [?] CRAN (R 4.4.0)\n P jsonlite      1.8.9   2024-09-20 [?] RSPM (R 4.4.0)\n P knitr         1.49    2024-11-08 [?] RSPM (R 4.4.0)\n P rmarkdown     2.29    2024-11-04 [?] RSPM (R 4.4.0)\n P rstudioapi    0.17.1  2024-10-22 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P xfun          0.49    2024-10-31 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_43.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_43.html",
    "title": "Exploring Relationships Among CIA Factbook Variables",
    "section": "",
    "text": "Figure 1: Correlation heatmap of CIA Factbook variables. It shows correlations between birth rate, death rate, and life expectancy. Larger circles indicate stronger correlations, with positive correlations in teal and negative correlations in orange.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    lubridate,         # Make Dealing with Dates a Little Easier\n    glue,              # Interpreted String Literals\n    patchwork,         # The Composer of Plots\n    here,              # A Simpler Way to Find Your Files\n    ggcorrplot,        # Correlogram\n    camcorder          # Record plots\n)  \n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 06) \ntt &lt;-tidytuesdayR::tt_load(2024, week = 43) \n\ncia_factbook &lt;- tt$cia_factbook |&gt; clean_names() \n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(cia_factbook)\nskim(cia_factbook)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- tidy data ----\n# Select numeric variables and compute correlation matrix\ncor_matrix &lt;- cia_factbook |&gt;\n    select(where(is.numeric)) |&gt;\n    cor(use = \"complete.obs\")\n\n# Clean column names for better readability in plots\ncolnames(cor_matrix) &lt;- gsub(\"_\", \" \", colnames(cor_matrix)) |&gt; str_to_title()\nrownames(cor_matrix) &lt;- gsub(\"_\", \" \", rownames(cor_matrix)) |&gt; str_to_title()\n\n# Convert correlation matrix to a long format for plotting labels\ncor_df &lt;- as.data.frame(as.table(cor_matrix)) |&gt;\n    rename(Var1 = Var1, Var2 = Var2, Correlation = Freq) |&gt;\n    filter(!is.na(Correlation)) \n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- colorspace::lighten('#f7f5e9', 0.05)    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- paletteer::paletteer_d(\"NineteenEightyR::miami1\")[c(1,3,5)] \n# show_col(col_palette)\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 43 } &bull; Source: usdatasets R package&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nmn &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf4f6;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Exploring Relationships Among CIA Factbook Variables\")\nsubtitle_text &lt;- str_glue(\"This figure shows correlations between various CIA Factbook variables.\\nLarge circles indicate strong correlations, with positive values in teal and negative values in orange.\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {mn} @sponce1(graphic.social) {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nfont_add_google(\"Shadows Into Light\", regular.wt = 400, family = \"anotation\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ncor_theme &lt;- function() {\n    theme(\n        plot.title.position   = \"plot\",\n        plot.caption.position = \"plot\",\n        plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n        panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n        plot.margin           = margin(t = 20, r = 20, b = 20, l = 20),\n        panel.grid.minor      = element_blank(),\n        panel.grid.major      = element_line(color = \"gray80\", size = 0.4, linetype = 'dotted'),\n        axis.title            = element_blank(),\n        axis.text.y           = element_text(color = text_col, family = \"text\", size = rel(1)),\n        axis.text.x           = element_text(color = text_col, family = \"text\", size = rel(1), angle = 30, hjust = 1),\n        axis.ticks.x          = element_line(color = text_col),\n        axis.line.x           = element_line(color = \"#252525\", linewidth = .2)\n    )\n}\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |- initial plot ----\n\n# Create correlation heatmap with annotations\np &lt;- cor_matrix |&gt;\n    \n    # Geoms\n    ggcorrplot(\n        method = \"circle\", type = \"lower\",\n        hc.order = TRUE, lab = FALSE, show.legend = TRUE,\n        colors = col_palette, outline.color = \"black\",\n        ggtheme = cor_theme()\n    ) +\n    \n    # Scales\n    scale_x_discrete() +\n    scale_y_discrete() +\n    scale_fill_stepsn(\n        colors = col_palette,\n        transform = \"identity\",\n        guide = guide_colorsteps(\n            barheight = unit(16, \"lines\"),\n            barwidth = unit(.5, \"lines\")\n        )\n    ) +\n    \n    # Labs\n    labs(\n        x = NULL,\n        y = NULL,\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text\n    ) +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(2),\n            family = \"title\",\n            face = \"bold\",\n            color = title_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1),\n            family = \"subtitle\",\n            color = subtitle_col,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.75),\n            family = \"caption\",\n            color = caption_col,\n            lineheight = 1.1,\n            hjust = 0.5,\n            halign = 1,\n            margin = margin(t = 15, b = 5)\n        )\n    )\n\n### |- Annotated plot ----\n\n# Add annotation text\nannotation_text &lt;- str_glue(\n    \"Variables like birth rate and infant mortality rate\n    show a strong positive correlation, whereas others, \n    such as life expectancy at birth and infant mortality rate, \n    exhibit a strong negative correlation.\n    \n    These relationships suggest that countries \n    with higher birth rates also tend to have \n    higher infant mortality, indicating possible \n    healthcare challenges.\"\n)\n\np &lt;- p +\n    # text\n    annotate(\n        \"text\",\n        x = 1, y = 7.3, label = annotation_text,\n        family = \"anotation\",\n        colour = text_col,\n        size = 5,\n        lineheight = 1.2,\n        hjust = 0\n    ) \n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \n\n# Save the plot as PNG\nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_43.png\"), \n  plot = p,\n  width = 10, height = 10, units = \"in\", dpi = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_43.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_43.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0    ggcorrplot_0.1.4.1 here_1.0.1         patchwork_1.3.0   \n [5] glue_1.8.0         scales_1.3.0       skimr_2.1.5        janitor_2.2.0     \n [9] showtext_0.9-7     showtextdb_3.0     sysfonts_0.8.9     ggtext_0.1.2      \n[13] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n[17] purrr_1.0.2        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1      \n[21] ggplot2_3.5.1      tidyverse_2.0.0    pacman_0.5.1      \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         plyr_1.8.9        \n[21] xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2       \n[25] grid_4.4.0         fansi_1.0.6        colorspace_2.1-1   paletteer_1.6.0   \n[29] gitcreds_0.1.2     cli_3.6.4          rmarkdown_2.29     crayon_1.5.3      \n[33] ragg_1.3.3         generics_0.1.3     rstudioapi_0.17.1  reshape2_1.4.4    \n[37] tzdb_0.5.0         commonmark_1.9.2   parallel_4.4.0     base64enc_0.1-3   \n[41] vctrs_0.6.5        jsonlite_1.8.9     hms_1.1.3          bit64_4.5.2       \n[45] systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1    rematch2_2.1.2    \n[49] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       prismatic_1.1.2   \n[53] munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1 \n[57] R6_2.5.1           httr2_1.0.6        textshaping_0.4.0  rprojroot_2.0.4   \n[61] vroom_1.6.5        evaluate_1.0.1     markdown_1.13      gridtext_0.1.5    \n[65] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[69] xfun_0.49          pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_45.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_45.html",
    "title": "Rise and Fall of Democracies and Non-Democracies (1950-2020)",
    "section": "",
    "text": "Figure 1: Line chart showing the rise and fall of democracies and non-democracies globally from 1950 to 2020. The number of democracies has increased steadily since the 1950s, while the number of non-democracies has declined significantly, especially around 1990.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    scales,            # Scale Functions for Visualization\n    glue,              # Interpreted String Literals\n    here,              # A Simpler Way to Find Your Files\n    geomtextpath       # Curved Text in 'ggplot2'\n)    \n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;-tidytuesdayR::tt_load(2024, week = 45) \n\ndemocracy_data &lt;- tt$democracy_data |&gt; clean_names() \n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(democracy_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- tidy data ----\n\n# Line Plot of Democracy Count Over Time \nline_data &lt;- democracy_data |&gt;\n    group_by(year) |&gt;\n    summarize(\n        democratic_count = sum(is_democracy, na.rm = TRUE),\n        non_democratic_count = sum(is_communist, na.rm = TRUE)\n    ) |&gt;\n    ungroup()\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 45 } &bull; Source: democracyData R Package&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Rise and Fall of Democracies and Non-Democracies (1950-2020)\")\nsubtitle_text &lt;- str_wrap(\"Historical trend in the number of democratic versus non-democratic countries, \n                          illustrating the growth of democracies and the decline of non-democracies over time\",\n                          width = 85)\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add('fa6-brands', here::here(\"fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"plot\",\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n    axis.ticks.x          = element_line(color = text_col),\n    axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n    panel.grid.minor      = element_blank(),\n    panel.grid.major      = element_blank(),\n    panel.grid.major.y    = element_line(color = \"grey85\", size = .4),\n) \n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |- initial plot ----\n\np &lt;- line_data |&gt;\n  ggplot() +\n\n  # Geoms\n  geom_ribbon(aes(x = year, ymin = non_democratic_count, ymax = democratic_count), fill = \"gray80\", alpha = 0.5) +\n  geom_textline(\n    aes(x = year, y = democratic_count, label = \"Democratic Count\", color = \"Democratic Count\"),\n    linewidth = 1,\n    family = \"text\",\n    size = 4.5,\n    offset = unit(0.15, \"cm\"),\n    text_smoothing = 30\n  ) +\n  geom_textline(\n    aes(x = year, y = non_democratic_count, label = \"Non-Democratic Count\", color = \"Non-Democratic Count\"),\n    linewidth = 1,\n    family = \"text\",\n    size = 4.5,\n    offset = unit(0.15, \"cm\"),\n    text_smoothing = 30\n  ) +\n\n  # Scales\n  scale_x_continuous() +\n  scale_y_continuous(\n    breaks = seq(0, 150, by = 50),\n    limits = c(0, 150)\n  ) +\n  scale_color_manual(values = c(\n    \"Democratic Count\" = \"#1B3A54FF\",\n    \"Non-Democratic Count\" = \"#913914FF\"\n  )) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Year\",\n    y = \"Count\",\n    color = \"Type\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n\n  # Theme\n  theme(\n    axis.text.y = ggtext::element_markdown(),\n    plot.title = element_text(\n      size        = rel(1.75),\n      family      = \"title\",\n      face        = \"bold\",\n      color       = title_col,\n      margin      = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size        = rel(1.1),\n      family      = \"subtitle\",\n      color       = title_col,\n      lineheight  = 1.1,\n      margin      = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size        = rel(.65),\n      family      = \"caption\",\n      color       = caption_col,\n      lineheight  = 0.65,\n      hjust       = 0.5,\n      halign      = 0.5,\n      margin      = margin(t = 10, b = 5)\n    ),\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \n\n# Save the plot as PNG\nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_45.png\"), \n  plot = p,\n  width = 10, height = 8, units = \"in\", dpi = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_45.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_45.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] geomtextpath_0.1.4 here_1.0.1         glue_1.8.0         scales_1.3.0      \n [5] janitor_2.2.0      showtext_0.9-7     showtextdb_3.0     sysfonts_0.8.9    \n [9] ggtext_0.1.2       lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1     \n[13] dplyr_1.1.4        purrr_1.0.2        readr_2.1.5        tidyr_1.3.1       \n[17] tibble_3.2.1       ggplot2_3.5.1      tidyverse_2.0.0    pacman_0.5.1      \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    lifecycle_1.0.4    farver_2.1.2      \n[17] compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1      codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[25] pillar_1.9.0       camcorder_0.1.0    magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      labeling_0.4.3    \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3     utf8_1.2.4        \n[41] withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2        timechange_0.3.0  \n[45] rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2     bit_4.5.0         \n[49] ragg_1.3.3         hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[53] markdown_1.13      rlang_1.1.6        gridtext_0.1.5     Rcpp_1.0.13-1     \n[57] xml2_1.3.6         renv_1.0.3         vroom_1.6.5        svglite_2.1.3     \n[61] rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_47.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_47.html",
    "title": "Bob’s Burgers: Questioning Nature of Dialogue",
    "section": "",
    "text": "Figure 1: Time series visualization showing the proportion of questions vs. exclamations in Bob’s Burgers dialogue across 14 seasons (2011-2024). Blue lines (questions) consistently trend higher than coral lines (exclamations), ranging 5-20%. Red circles highlight episodes where exclamations exceed questions.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    glue,              # Interpreted String Literals\n    here,              # A Simpler Way to Find Your Files\n    marquee            # Markdown Parser and Renderer for R Graphic\n)    \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  10,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2024, week = 47) \n\nepisode_metrics &lt;- tt$episode_metrics|&gt; clean_names() \n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(episode_metrics)\nskim(episode_metrics)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- tidy data ----\n\n### |- plot data ----\n\nplot_data &lt;- episode_metrics |&gt;\n  pivot_longer(\n    cols = c(question_ratio, exclamation_ratio),\n    names_to = \"ratio_type\", values_to = \"value\"\n  ) |&gt;\n  mutate(\n    ratio_type = case_when(\n      ratio_type == \"question_ratio\" ~ \"Questions\",\n      ratio_type == \"exclamation_ratio\" ~ \"Exclamations\"\n    )\n  )\n\n### |- highlight data ----\n\nhighlight_data &lt;- plot_data |&gt;\n  pivot_wider(names_from = ratio_type, values_from = value) |&gt;\n  filter(Exclamations &gt; Questions)\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray30\"    \ncol_palette  &lt;- c(\"Questions\" = \"#2171b5\", \"Exclamations\" = \"#ef8a62\")\n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 47 } &bull; Source: bobsburgersR R Package&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Bob's Burgers: Questioning Nature of Dialogue\")\n\nsubtitle_text &lt;- \"Questions dominate dialogue (15-20%), with rare exceptions in early seasons (highlighted)\\n\\n\nRed circles ({#FF0000 **○**}) indicate episodes where {#ef8a62 **_exclamations_**} exceed {#2171b5 **_questions_**}, more common in seasons 1-6\"\n\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.6.0/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Source Sans Pro\", family = \"text\")\nfont_add_google(\"Roboto Mono\", family = \"numbers\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = \"plot\",\n    plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n    panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n    axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                         color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n    axis.text             = element_text(size = rel(0.6), color = text_col, family = \"numbers\"),\n    axis.ticks.x          = element_line(color = text_col),\n    axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n    panel.grid.minor      = element_blank(),\n    panel.grid.major      = element_blank(),\n    panel.grid.major.y    = element_line(color = \"grey90\", linewidth = 0.2),\n    panel.spacing.x       = unit(2, \"lines\"),\n    panel.spacing.y       = unit(2, \"lines\"),\n    strip.text            = element_text(size = rel(1), face = \"bold\", margin = margin(b = 10), family = \"text\"),\n) \n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |-  plot ----\np &lt;- plot_data |&gt;\n  ggplot(aes(x = episode, y = value * 100, color = ratio_type)) +\n\n  # Geoms\n  geom_line(aes(alpha = ratio_type), linewidth = 1) +\n  geom_point(aes(alpha = ratio_type), size = 1.3) +\n  geom_point(\n    data = highlight_data,\n    aes(y = Exclamations * 100),\n    color = \"red\", size = 4, shape = 1, stroke = 0.8\n  ) +\n\n  # Scales\n  scale_x_continuous() +\n  scale_y_continuous(labels = scales::label_number(suffix = \"%\")) +\n  scale_color_manual(values = col_palette) +\n  scale_alpha_manual(values = c(\"Questions\" = 1, \"Exclamations\" = 0.3)) +\n  guides(alpha = \"none\") +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Episode Number\",\n    y = \"Proportion of Total Sentences\",\n    color = \"Sentence Type\",\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) +\n\n  # Facet\n  facet_wrap(~season,\n    labeller = label_both\n  ) +\n\n  # Theme\n  theme(\n    plot.title = element_text(\n      size        = rel(2.3),\n      family      = \"title\",\n      face        = \"bold\",\n      color       = title_col,\n      margin      = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_marquee(\n      size        = rel(1.05),\n      family      = \"subtitle\",\n      color       = title_col,\n      lineheight  = 1.1,\n      margin      = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size        = rel(.65),\n      family      = \"caption\",\n      color       = caption_col,\n      lineheight  = 0.65,\n      hjust       = 0.5,\n      halign      = 0.5,\n      margin      = margin(t = 10, b = 5)\n    ),\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \n\n# Save the plot as PNG\nggsave(\n  filename = here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_47.png\"), \n  plot = p,\n  width = 10, height = 10, units = \"in\", dpi = 320\n)\n\n### |-  plot thumbnail----\nmagick::image_read(here::here(\"data_visualizations/TidyTuesday/2024/tt_2024_47.png\")) |&gt;\n  magick::image_resize(geometry = \"400\") |&gt;\n  magick::image_write(here::here(\"data_visualizations/TidyTuesday/2024/thumbnails/tt_2024_47.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] marquee_0.1.0   here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[21] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    lifecycle_1.0.4    farver_2.1.2      \n[17] compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1      repr_1.1.7        \n[21] codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10       \n[25] crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0    magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] grid_4.4.0         colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3    \n[41] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3    \n[45] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2\n[49] gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3         hms_1.1.3         \n[53] evaluate_1.0.1     knitr_1.49         markdown_1.13      rlang_1.1.6       \n[57] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[61] vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[65] R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_49.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_49.html",
    "title": "Traffic Flow Analysis: A64 Road, May 2021",
    "section": "",
    "text": "Figure 1: A four-panel visualization of A64 Road Traffic Flow (May 2021). The top left shows hourly traffic volume with highlighted rush hours (7-9 AM, 4-6 PM). The top right displays daily traffic volume trends with a scatter plot and confidence interval. The bottom left compares weekday vs weekend traffic patterns, showing average speed and volume throughout the day. The bottom right visualizes average speed trends by sensor location.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  pacman::p_load(\n    tidyverse,         # Easily Install and Load the 'Tidyverse'\n    ggtext,            # Improved Text Rendering Support for 'ggplot2'\n    showtext,          # Using Fonts More Easily in R Graphs\n    janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,             # Compact and Flexible Summaries of Data\n    scales,            # Scale Functions for Visualization\n    glue,              # Interpreted String Literals\n    here,              # A Simpler Way to Find Your Files\n    patchwork,         # The Composer of Plots\n    paletteer,         # Comprehensive Collection of Color Palettes\n    gghighlight,       # Highlight Lines and Points in 'ggplot2'\n    lubridate          # Working with Dates and Times\n)   \n})\n\nsuppressMessages(source(here::here(\"_setup.R\")))\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  16,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n\n2. Read in the Data\n\nShow code# tt &lt;- tidytuesdayR::tt_load(2024, week = 49) \n\n# A64_traffic  &lt;- tt$A64_traffic |&gt; clean_names()\n \n# tidytuesdayR::readme(tt)\n# rm(tt)\n\n# Option 2: Read directly from GitHub\nA64_traffic &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')\nA64_traffic &lt;-  A64_traffic |&gt; clean_names() \n\n\n3. Examine the Data\n\nShow codeglimpse(A64_traffic)\nskim(A64_traffic)\n\n\n4. Tidy Data\n\nShow code### |- tidy data ----\n\n# Hourly Volume Patterns (plot 1) ----\nhourly_volume_clean &lt;- A64_traffic |&gt;\n    group_by(report_date, hour = lubridate::hour(time_period_ending)) |&gt;\n    summarise(\n        hourly_volume = sum(total_volume, na.rm = TRUE),\n        .groups = 'drop'\n    ) |&gt;\n    mutate(\n        month_day = format(report_date, \"%b %d\"),\n        hour_label = sprintf(\"%02d:00\", hour),\n        hour_f = factor(hour, levels = c(7, 8, 9, 16, 17, 18), ordered = TRUE),\n        is_peak = hour %in% c(7:9, 16:18)\n    )\n\n# Daily Volume Trends (plot 2) ----\ndaily_volume_clean &lt;- A64_traffic |&gt;\n    group_by(date = as.Date(report_date)) |&gt;\n    summarise(\n        daily_volume = sum(total_volume, na.rm = TRUE),\n        .groups = 'drop'\n    ) |&gt;\n    mutate(\n        week_num = week(date),\n        month_day = format(date, \"%b %d\")\n    )\n\n# Weekend Patterns (plot 3) ----\nweekend_patterns_clean &lt;- A64_traffic |&gt;\n    mutate(\n        hour = lubridate::hour(time_period_ending),\n        is_weekend = ifelse(lubridate::wday(report_date) %in% c(1, 7), \"Weekend\", \"Weekday\"),\n        hour_label = sprintf(\"%02d:00\", hour)\n    ) |&gt;\n    group_by(hour, hour_label, is_weekend) |&gt;\n    summarise(\n        avg_volume = mean(total_volume, na.rm = TRUE),\n        avg_speed = mean(avg_mph, na.rm = TRUE),\n        .groups = 'drop'\n    ) |&gt;\n    pivot_longer(\n        cols = c(avg_speed, avg_volume),\n        names_to = \"metric\",\n        values_to = \"value\"\n    ) |&gt;\n    mutate(\n        metric = factor(metric,\n                        levels = c(\"avg_speed\", \"avg_volume\"),\n                        labels = c(\"Average Speed (mph)\", \"Average Volume (count)\"))\n    ) |&gt;\n    group_by(hour, metric) |&gt;\n    summarise(\n        weekday = value[is_weekend == \"Weekday\"],\n        weekend = value[is_weekend == \"Weekend\"],\n        .groups = 'drop'\n    )\n\n# Sensor Speed Patterns (plot 4) ----\nsensor_speed_clean &lt;- A64_traffic |&gt;\n    group_by(\n        date = as.Date(report_date), \n        site_id,\n        site_name\n    ) |&gt;\n    summarise(\n        avg_speed = mean(avg_mph, na.rm = TRUE),\n        .groups = 'drop'\n    ) |&gt;\n    mutate(\n        month_day = format(date, \"%b %d\"),\n        site_id = factor(site_id) \n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray30\"  \n\nviz_colors &lt;- list(\n    morning = \"#83c5be\",    \n    evening = \"#7B7FD4\",     \n    orange  = \"#EE6100FF\",   \n    gray_light = \"gray90\",   \n    gray_dark  = \"gray30\"    \n)\n\n# icons\ntt &lt;- str_glue(\"#TidyTuesday: { 2024 } Week { 49 } &bull; Source: WebTRIS Traffic Flow API&lt;br&gt;\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"Traffic Flow Analysis: A64 Road, May 2021\")\nsubtitle_text &lt;-  str_glue(\"Analysis of traffic patterns across multiple dimensions\")\ncaption_text  &lt;- str_glue(\"{tt} {li} stevenponce &bull; {bs} sponce1 &bull; {gh} poncest &bull; #rstats #ggplot2\")\n\n### |-  fonts ----\nsetup_fonts()\n\n### |-  plot theme ----\ntheme_traffic &lt;- function() {\n    theme_minimal(base_size = 14, base_family = \"text\") +\n        theme(\n            # Background\n            plot.background  = element_rect(fill = bkg_col, color = bkg_col),\n            panel.background = element_rect(fill = bkg_col, color = bkg_col),\n            plot.margin      = margin(t = 10, r = 20, b = 10, l = 20),\n            \n            # Title, subtitle, caption\n            plot.title = element_markdown(\n                family = \"title\",\n                size = rel(1.4),\n                face = \"bold\",\n                color = title_col,\n                hjust = 0.5,\n                margin = margin(t = 10, b = 5)\n            ),\n            plot.subtitle = element_markdown(\n                family = \"text\",\n                size = rel(1),\n                color = subtitle_col,\n                hjust = 0.5,\n                margin = margin(b = 10)\n            ),\n            plot.caption = element_markdown(\n                family = \"caption\",\n                size = rel(0.7),\n                color = caption_col\n            ),\n            \n            # Axis formatting\n            axis.title = element_text(\n                family = \"text\",\n                size = rel(0.93),\n                face = \"bold\",\n                color = text_col\n            ),\n            axis.text = element_text(\n                family = \"text\",\n                size = rel(0.79),\n                color = text_col\n            ),\n            axis.line.x = element_line(\n                color = \"#252525\",\n                linewidth = 0.2\n            ),\n            \n            # Grid lines\n            panel.grid.major.y = element_line(\n                color = \"gray90\",\n                linewidth = 0.2\n            ),\n            panel.grid.major.x = element_blank(),\n            panel.grid.minor = element_blank(),\n            \n            # Legend\n            legend.position = \"top\",\n            legend.title = element_text(\n                size = rel(0.8),\n                face = \"bold\"\n            ),\n            legend.text = element_text(\n                size = rel(0.71)\n            ),\n            legend.key.width = unit(1.5, \"cm\"),\n            legend.spacing.x = unit(0.2, 'cm')\n        )\n}\n\n\n6. Plot\n\nShow code### |-  plot 1 ----\np1 &lt;- hourly_volume_clean |&gt;\n    ggplot(aes(x = report_date, \n               y = hourly_volume, \n               group = hour)) +\n    # Add non-peak hours with gray color\n    geom_line(\n        data = hourly_volume_clean |&gt; filter(!hour %in% c(7:9, 16:18)),\n        color = viz_colors$gray_dark,\n        alpha = 0.2,\n        linewidth = 0.5\n    ) +\n    # Add peak hours with colors\n    geom_line(\n        data = hourly_volume_clean |&gt; filter(hour %in% c(7:9, 16:18)),\n        aes(color = hour_f),\n        alpha = 0.9,\n        linewidth = 0.7\n    ) +\n    scale_color_manual(\n        values = c(\n            \"7\" = viz_colors$orange,\n            \"8\" = viz_colors$orange,\n            \"9\" = viz_colors$orange,\n            \"16\" = viz_colors$evening,\n            \"17\" = viz_colors$evening,\n            \"18\" = viz_colors$evening\n        ),\n        name = \"Hour of Day\"\n    ) +\n    scale_y_continuous(\n        labels = scales::comma_format(),\n        breaks = scales::breaks_pretty(n = 6),\n        expand = c(0.02, 0.02)\n    ) +\n    scale_x_datetime(\n        date_breaks = \"1 week\",\n        date_labels = \"%b %d\",\n        expand = c(0.02, 0.02)\n    ) +\n    labs(\n        title = \"Hourly Traffic Volume Throughout May\",\n        subtitle = \"Highlighting rush hour periods (7-9 AM, 4-6 PM)\",\n        x = \"Date\",\n        y = \"Hourly Volume\"\n    ) +\n    theme_traffic() +\n    theme(\n        legend.key.width = unit(2, \"cm\"),\n        legend.key.height = unit(0.3, \"cm\"),\n        legend.title = element_text(\n            size = rel(0.8),\n            face = \"bold\",\n            margin = margin(b = 5)\n        ),\n        legend.box.spacing = unit(0.5, \"cm\")\n    ) +\n    guides(\n        color = guide_legend(\n            nrow = 2,\n            byrow = TRUE\n        )\n    )\n\n### |-  plot 2 ----\np2 &lt;- daily_volume_clean |&gt;\n    ggplot(aes(x = date, y = daily_volume)) +\n    # Add confidence band and line\n    geom_smooth(\n        method = \"loess\",\n        span = 0.4,\n        color = viz_colors$evening,        \n        fill = alpha(viz_colors$evening, 0.25),\n        linewidth = 1.0,\n        se = TRUE\n    ) +\n    # Add values as points\n    geom_point(\n        color = viz_colors$orange,\n        alpha = 0.6,\n        size = 1.8\n    ) +\n    # Scales\n    scale_y_continuous(\n        labels = scales::comma_format(),\n        breaks = seq(0, 50000, by = 10000),\n        limits = c(0, 50000),\n        expand = c(0, 0)  # Remove padding\n    ) +\n    scale_x_date(\n        date_breaks = \"1 week\",\n        date_labels = \"%b %d\",\n        expand = c(0.02, 0.02)\n    ) +\n    # Labs\n    labs(\n        title = \"Daily Traffic Volume Patterns Throughout May\",\n        subtitle = \"Showing daily total volume with 95% confidence interval\",\n        x = \"Date\",\n        y = \"Daily Volume\"\n    ) +\n    # Theme \n    theme_traffic() +\n    theme(\n        panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.3),\n        panel.grid.major.x = element_line(color = \"gray90\", linewidth = 0.3),\n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20)\n    )\n\n### |-  plot 3 ----\np3 &lt;- ggplot(weekend_patterns_clean, aes(x = hour)) +\n    # Add ribbons (weekday vs weekend)\n    geom_ribbon(\n        aes(\n            ymin = pmin(weekday, weekend),\n            ymax = weekend,\n            fill = \"Weekend\"\n        ),\n        alpha = 0.15\n    ) +\n    geom_ribbon(\n        aes(\n            ymin = pmin(weekday, weekend),\n            ymax = weekday,\n            fill = \"Weekday\"\n        ),\n        alpha = 0.15\n    ) +\n    # Add lines \n    geom_line(\n        aes(y = weekday, color = \"Weekday\"), \n        linewidth = 1.0\n    ) +\n    geom_line(\n        aes(y = weekend, color = \"Weekend\"), \n        linewidth = 1.0\n    ) +\n    # Scales\n    scale_x_continuous(\n        breaks = seq(0, 23, by = 4),\n        labels = function(x) sprintf(\"%02d:00\", x),\n        expand = c(0.02, 0.02)\n    ) +\n    # Add legend \n    scale_color_manual(\n        name = \"Day Type\",\n        values = c(\n            \"Weekday\" = viz_colors$evening,\n            \"Weekend\" = viz_colors$orange\n        )\n    ) +\n    scale_fill_manual(\n        name = \"Day Type\",\n        values = c(\n            \"Weekday\" = viz_colors$evening,\n            \"Weekend\" = viz_colors$orange\n        )\n    ) +\n    # Labs\n    labs(\n        title = \"Traffic Patterns: Weekday vs Weekend\",\n        subtitle = \"Comparing average speed and volume throughout the day\",\n        x = \"Hour of Day\",\n        y = NULL\n    ) +\n    # Facet\n    facet_wrap(~metric, scales = \"free_y\", nrow = 1) +\n    # Theme\n    theme_traffic() +\n    theme(\n        strip.text = element_text(size = rel(1), face = \"bold\"),\n        panel.grid.major.y = element_line(\n            color = viz_colors$gray_light, \n            linewidth = 0.3\n        ),\n        legend.key.width = unit(2, \"cm\")\n    ) \n    \n\n### |-  plot 4 ----\np4 &lt;- sensor_speed_clean |&gt;\n    ggplot(aes(x = date, y = avg_speed, color = site_id, group = site_id)) +\n    # Add lines\n    geom_line(linewidth = 1.0, alpha = 0.9) +\n\n    # Scales \n    scale_y_continuous(\n        breaks = seq(30, 50, by = 5),\n        limits = c(25, 55),\n        expand = c(0, 0)\n    ) +\n    scale_x_date(\n        date_breaks = \"1 week\",\n        date_labels = \"%b %d\",\n        expand = c(0.02, 0)\n    ) +\n    scale_color_manual(\n        values = c(\n            \"6867\" = viz_colors$evening,    \n            \"7035\" = viz_colors$orange,    \n            \"7042\" = viz_colors$evening,   \n            \"7058\" = viz_colors$orange  \n        ),\n        name = \"Sensor ID\"\n    ) +\n    # Customize legend\n    guides(\n        color = guide_legend(\n            nrow = 1,\n            byrow = TRUE\n        )\n    ) +\n    # Labs\n    labs(\n        title = \"Average Speed Trends by Sensor Location\",\n        subtitle = \"Comparing speed patterns across different monitoring points\",\n        x = \"Date\",\n        y = \"Average Speed (mph)\"\n    ) +\n    # Theme\n    theme_traffic() +\n    theme(\n        panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.3),\n        legend.key.width = unit(2, \"cm\"),\n        legend.text = element_text(size = rel(0.9))\n    ) \n   \n### |-  combined plots ----\ncombined_plot &lt;- (\n    p1 + p2 + \n        plot_layout(widths = c(1, 1))\n) / (\n    p3 + p4\n)\n\ncombined_plot &lt;- combined_plot +\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text  ,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                family = \"title\", \n                size = rel(2.5), \n                face = \"bold\",\n                hjust = 0.5,\n                color = title_col,\n                margin = margin(b = 10)\n            ),\n            plot.subtitle = element_text(\n                family = \"text\",\n                size = rel(1.3),\n                hjust = 0.5,\n                color = subtitle_col,\n                margin = margin(b = 20)\n            ),\n            plot.caption = element_markdown(\n                family = \"caption\",\n                size = rel(0.75),\n                color = caption_col,\n                hjust = 0.5,\n                margin = margin(t = 20)\n            ),\n            plot.margin = margin(10, 10, 10, 10),\n            plot.background = element_rect(fill = bkg_col, color = bkg_col),\n            panel.background = element_rect(fill = bkg_col, color = bkg_col)\n        )\n    ) &\n    theme(\n        legend.position = \"top\",\n        legend.box = \"vertical\",\n        legend.margin = margin(t = 10),\n        legend.spacing = unit(1, \"cm\"),\n        legend.key.width = unit(2, \"cm\"),\n        legend.key.height = unit(0.3, \"cm\")\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsource(here::here(\"R/image_utils.R\"))\nsave_plot_patchwork(combined_plot, type = \"tidytuesday\", year = 2024, week = 49, height = 10, width = 16)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggplotify_0.1.2   gghighlight_0.4.1 paletteer_1.6.0   patchwork_1.3.0  \n [5] here_1.0.1        glue_1.8.0        scales_1.3.0      skimr_2.1.5      \n [9] janitor_2.2.0     showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9   \n[13] ggtext_0.1.2      lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n[17] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n[21] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      pacman_0.5.1      \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] camcorder_0.1.0    repr_1.1.7         withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   splines_4.4.0      parallel_4.4.0     base64enc_0.1-3   \n[37] vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0       jsonlite_1.8.9    \n[41] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[45] magick_2.8.5       gifski_1.32.0-1    rematch2_2.1.2     codetools_0.2-20  \n[49] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[53] htmltools_0.5.8.1  R6_2.5.1           rprojroot_2.0.4    vroom_1.6.5       \n[57] evaluate_1.0.1     lattice_0.22-6     markdown_1.13      gridtext_0.1.5    \n[61] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[65] nlme_3.1-164       mgcv_1.9-1         xfun_0.49          fs_1.6.5          \n[69] pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2024_49.qmd.\nFor the full repository, click here.\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2024/tt_2024_51.html",
    "href": "data_visualizations/TidyTuesday/2024/tt_2024_51.html",
    "title": "The Arcane Hierarchy: D&D Spellcasting Classes Compared",
    "section": "",
    "text": "Figure 1: Dual-panel visualization comparing Dungeons & Dragons (D&D) Free Rules 2024 spellcasting classes. The left panel features a horizontal bar chart highlighting the number of class-exclusive spells, with Clerics having the most (21 spells), followed by Wizards (16 spells), and other classes having significantly fewer (1-4 spells). The right panel contains faceted line charts showing spell progression patterns across levels 0–9 for each class, arranged in descending order of total spells. Wizards peak at around 30 spells at level 2, with other classes showing distinct progression patterns that reflect their magical capabilities.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n    pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    patchwork,      # The Composer of Plots\n    marquee,        # Markdown Parser and Renderer for R Graphics \n    gghighlight     # Highlight Lines and Points in 'ggplot2'\n    )   \n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow code# tt &lt;- tidytuesdayR::tt_load(2024, week = 50)\n#\n# parfumo_data_raw  &lt;- tt$parfumo_data |&gt; clean_names()\n#\n# tidytuesdayR::readme(tt)\n# rm(tt)\n\n# Option 2: Read directly from GitHub\nspells_raw &lt;- spells &lt;- readr::read_csv(\n  'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-17/spells.csv') |&gt; \n  clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(spells_raw)\nskim(spells_raw)\n\n\n4. Tidy Data\n\nShow code### |- tidy data ----\n\n## Plot 1: Exclusive Spells Data ----\nexclusive_df &lt;- spells_raw |&gt;\n    # Calculate class availability\n    mutate(\n        available_to = rowSums(select(spells_raw, bard:wizard))\n    ) |&gt;\n    # Get exclusive spells\n    filter(available_to == 1) |&gt;  \n    select(bard:wizard) |&gt;\n    # Calculate totals\n    summarise(across(everything(), sum)) |&gt;\n    # Reshape to long format\n    pivot_longer(\n        everything(),\n        names_to = \"class\",\n        values_to = \"exclusive_spells\"\n    ) |&gt;\n    # Format and calculate percentages\n    mutate(\n        class = str_to_title(class),\n        total_spells = sum(exclusive_spells),\n        pct = exclusive_spells / total_spells,\n        label = scales::percent(pct, accuracy = 0.1),\n        class = fct_reorder(class, exclusive_spells, .desc = TRUE)\n    )\n\n## Plot 2: Progression Data ----\nprogression_df &lt;- spells_raw |&gt;\n    # Initial selection and reshape\n    select(level, bard:wizard) |&gt;\n    pivot_longer(\n        -level,\n        names_to = \"class\",\n        values_to = \"has_spell\"\n    ) |&gt;\n    # Process available spells\n    filter(has_spell) |&gt;\n    # Count spells per class and level\n    group_by(class, level) |&gt;\n    summarise(\n        count = n(),\n        .groups = \"drop\"\n    ) |&gt;\n    # Calculate totals and format\n    group_by(class) |&gt;\n    mutate(\n        total_spells = sum(count)\n    ) |&gt;\n    ungroup() |&gt;\n    # Format and order class factor\n    mutate(\n        class = str_to_title(class),\n        # Order by total spells descending\n        class = fct_reorder(class, total_spells, .desc = TRUE)\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = \"#AB4459\") \n\n\n### |-  titles and caption ----\ntitle_text    &lt;- str_glue(\"The Arcane Hierarchy: D&D Spellcasting Classes Compared\")\nsubtitle_text &lt;- \"While **_Wizards_** master the most spells overall, **_Clerics_** maintain the largest collection of unique divine magic, highlighting distinct magical specializations across classes.\"\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2024,\n    tt_week = 51,\n    source_text = \"D&D Free Rules (2024), Spell Descriptions\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Weekly-specific modifications\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.2),\n        panel.grid.minor   = element_blank(),\n        strip.text         = element_textbox(size = rel(0.9),\n                                             face = 'bold',\n                                             color = colors$text,\n                                             hjust = 0.5,\n                                             halign = 0.5,\n                                             r = unit(3, \"pt\"),\n                                             width = unit(6, \"npc\"),\n                                             padding = margin(2, 0, 2, 0),\n                                             margin = margin(3, 3, 3, 3),\n                                             fill = \"transparent\"\n        ),\n        panel.spacing = unit(1.5, 'lines')\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot 1 ----\nexclusive_plot &lt;- ggplot(exclusive_df,\n                         aes(y = fct_reorder(class, exclusive_spells), x = exclusive_spells)) +\n    # Geoms\n    geom_bar(stat = \"identity\", \n             fill = colors$palette,\n             alpha = 0.8,\n             width = 0.75\n    ) +\n    geom_text(\n        aes(label = sprintf(\"%d spells\", exclusive_spells),),\n        size = 3.5,\n        color = if_else(exclusive_df$exclusive_spells &lt; 15, colors$text, \"#fafafa\"),\n        hjust = if_else(exclusive_df$exclusive_spells &lt; 15, -0.2, 1.2),\n    ) +\n    \n    # Scales\n    scale_x_continuous(\n        expand = expansion(mult = c(0, 0.05)),\n        breaks = seq(0, 25, by = 5)\n    ) +\n    scale_y_discrete() +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        title = \"Class-Exclusive Spells in D&D\",\n        subtitle = \"Distribution of spells unique to each character class\",\n        x = \"Number of Exclusive Spells\",\n        y = NULL\n    ) +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            family = fonts$title, \n            size   = rel(1.4), \n            face   = \"bold\",\n            color  = colors$title,\n            margin = margin(b = 10)\n        ),\n        plot.subtitle = element_text(\n            family = fonts$text,\n            size   = rel(0.9),\n            color  = colors$subtitle,\n            margin = margin(b = 5)\n        ),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n    ) \n\n### |-  Plot 2 ----\nprogression_plot &lt;- ggplot(progression_df,\n                           aes(x = level, y = count, group = class)) +\n    # Geoms\n    geom_line(size = 0.3, alpha = 0.2) +\n    geom_point(size = 1, alpha = 0.2) +\n    gghighlight(\n        use_direct_label = FALSE,\n        unhighlighted_params = list(\n            size = 0.3,\n            alpha = 0.2,\n            color = 'gray20'\n        )\n    ) +\n    geom_line(color = colors$palette, linewidth = 1.2) +\n    geom_point(color = colors$palette, size = 2.5) +\n    \n    # Scales\n    scale_x_continuous(breaks = seq(0, 9, by = 3)) +\n    scale_y_continuous(breaks = seq(0, 35, by = 10)) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        title = \"Spell Progression Patterns by Character Class\",\n        subtitle = \"Each class shows distinct patterns in spell availability across levels\",\n        x = \"Spell Level\",\n        y = \"Number of Available Spells\"\n    ) +\n    \n    # Facet\n    facet_wrap(~class, ncol = 4) +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            family = fonts$title, \n            size   = rel(1.4), \n            face   = \"bold\",\n            color  = colors$title,\n            margin = margin(b = 10)\n        ),\n        plot.subtitle = element_text(\n            family = fonts$text,\n            size   = rel(0.9),\n            color  = colors$subtitle,\n            margin = margin(b = 15)\n        )\n    ) \n\n### |-  combined plots ----\ncombined_plot &lt;- (\n    exclusive_plot + plot_spacer() + progression_plot + \n        plot_layout(widths = c(0.6, 0.02, 1.2))  \n)\n\ncombined_plot &lt;- combined_plot +\n    plot_annotation(\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                family = fonts$title, \n                size   = rel(2.3), \n                face   = \"bold\",\n                color  = colors$title,\n                margin = margin(b = 10)\n            ),\n            plot.subtitle = element_marquee(\n                family = fonts$text,\n                lineheight = 1.1,\n                width  = 1,\n                size   = rel(1.1),\n                color  = colors$subtitle,\n                margin = margin(b = 5)\n            ),\n            plot.caption = element_markdown(\n                family = fonts$caption,\n                lineheight = 1.1,\n                size   = rel(0.65),\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 5)\n            ),\n            plot.margin = margin(10, 10, 10, 10),\n            plot.background = element_rect(fill = colors$background, color = colors$background),\n            panel.background = element_rect(fill = colors$background, color = colors$background)\n        )\n    ) \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot_patchwork(combined_plot, type = \"tidytuesday\", \n                    year = 2024, week = 51, width = 12, height = 8)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] gghighlight_0.4.1 marquee_0.1.0     patchwork_1.3.0   camcorder_0.1.0  \n [5] here_1.0.1        glue_1.8.0        scales_1.3.0      skimr_2.1.5      \n [9] janitor_2.2.0     showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9   \n[13] ggtext_0.1.2      lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n[17] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n[21] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         parallel_4.4.0     gifski_1.32.0-1    fansi_1.0.6       \n[13] pacman_0.5.1       pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4   \n[17] compiler_4.4.0     farver_2.1.2       textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        bit64_4.5.2        timechange_0.3.0  \n[45] rmarkdown_2.29     bit_4.5.0          hms_1.1.3          evaluate_1.0.1    \n[49] knitr_1.49         markdown_1.13      gridGraphics_0.5-1 rlang_1.1.4       \n[53] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[57] vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[61] R6_2.5.1           fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2024_51.qmd.\nFor the full repository, click here.\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_01.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_01.html",
    "title": "Aid Worker Security: A Global Analysis of Risks and Incidents",
    "section": "",
    "text": "Figure 1: This visualization examines aid worker security from 2017 to 2024. The top section features a dual bar chart comparing the risk scores and number of incidents across 10 countries. The Occupied Palestinian Territories have the highest risk score, while Afghanistan and South Sudan have the most incidents, highlighting differences in the severity versus frequency of attacks. The bottom section displays a heatmap showing attack impacts on different organization types (ICRC, INGO, NNGO, NRCS/IFRC, UN). The heatmap reveals that INGOs are most affected by shootings and kidnappings, while UN organizations experience a broader distribution of attack types. Color intensity indicates the number of aid workers impacted..\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    patchwork,      # The Composer of Plots\n    camcorder,      # Record Your Plot History \n    readxl          # Read Excel Files\n)\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codeaid_raw &lt;- read_excel(\n  here::here(\"data/Aid Worker Incidents.xlsx\")) |&gt; \n    clean_names()\n\n\n3. Examine the Data\n\nShow codeglimpse(aid_raw)\nskim(aid_raw)\n\n\n4. Tidy Data\n\nShow code# data plot ---\n# data for both risk score and incidents\ncountry_analysis &lt;- aid_raw |&gt;\n    group_by(country) |&gt;  \n    mutate(risk_score = total_killed * 3 + total_wounded * 2 + total_kidnapped) |&gt;\n    summarise(\n        avg_risk = mean(risk_score),\n        incidents = n(),\n        total_affected = sum(total_affected),\n        .groups = 'drop'\n    ) |&gt;\n    arrange(desc(incidents)) |&gt;\n    slice_head(n = 10)\n\n# Vulnerability Heatmap\nvulnerability_matrix &lt;- aid_raw |&gt;\n    select(un, ingo, icrc, nrcs_and_ifrc, nngo, means_of_attack) |&gt;\n    pivot_longer(-means_of_attack, \n                 names_to = \"org_type\", \n                 values_to = \"count\") |&gt;\n    group_by(means_of_attack, org_type) |&gt;\n    summarise(total_affected = sum(count), .groups = 'drop') |&gt;\n    mutate(\n        org_type = case_when(\n            org_type == \"un\" ~ \"UN\",\n            org_type == \"ingo\" ~ \"INGO\",\n            org_type == \"icrc\" ~ \"ICRC\",\n            org_type == \"nrcs_and_ifrc\" ~ \"NRCS/IFRC\",\n            org_type == \"nngo\" ~ \"NNGO\"\n        ),\n        means_of_attack = str_to_title(means_of_attack)\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\"#f7fbff\", \"#9ecae1\", \"#2171b5\", \"#084594\"))\n\n### |-  titles and caption ----\ntitle_text    &lt;- str_glue(\"Aid Worker Security: A Global Analysis of Risks and Incidents\")\nsubtitle_text &lt;- str_glue(\"Analysis of attack patterns and their impact on humanitarian organizations worldwide\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 01,\n    source_text = \"Aid Worker Security Database via Makeover Monday\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Weekly-specific modifications\n        axis.line.x           = element_line(color = \"#252525\", linewidth = .2),\n        \n        panel.spacing.x       = unit(2, 'lines'),\n        panel.spacing.y       = unit(1, 'lines'),\n        panel.grid.major.x    = element_blank(),\n        panel.grid.major.y    = element_line(color = alpha(colors[5], 0.2), linewidth = 0.2),\n        panel.grid.minor      = element_blank(),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\n# 1. Risk Score Plot\np1 &lt;- ggplot(country_analysis, \n             aes(x = reorder(country, avg_risk), \n                 y = avg_risk)) +\n    geom_col(fill = colors$palette[4]) +\n    coord_flip() +\n    labs(\n        title = \"Risk Score by Country\",\n        subtitle = \"Risk Score = (Deaths × 3) + (Injuries × 2) + Kidnappings\",  \n        x = NULL,\n        y = \"Risk Score\"\n    ) +\n    theme_minimal() +\n    theme(\n        plot.title = element_text(face = \"bold\", size = rel(1)),\n        plot.subtitle = element_text(size = 10, color = colors$text),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank()\n    )\n\n# 2. Incidents Count Plot\np2 &lt;- ggplot(country_analysis, \n             aes(x = reorder(country, avg_risk), \n                 y = incidents)) +\n    geom_col(fill = colors$palette[2]) +\n    coord_flip() +\n    labs(\n        title = \"Number of Incidents\",\n        x = NULL,\n        y = \"Number of Incidents\"\n    ) +\n    theme_minimal() +\n    theme(\n        plot.title = element_text(face = \"bold\", size = rel(1)),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank()\n    )\n\n# 3. Vulnerability Heatmap\np3 &lt;- ggplot(vulnerability_matrix, \n                             aes(x = org_type, \n                                 y = means_of_attack, \n                                 fill = total_affected)) +\n    geom_tile(color = \"white\", linewidth = 0.5) +\n    scale_fill_gradientn(\n        colors = colors$palette,\n        na.value = \"#f0f0f0\",\n        name = \"Total\\nAffected\"\n    ) +\n    labs(\n        title = \"Attack Impact by Organization Type and Method\",\n        subtitle = \"Total number of aid workers affected by each type of attack\",\n        x = \"Organization Type\",\n        y = NULL\n    ) +\n    theme_minimal() +\n    theme(\n        plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12, color = \"gray30\"),\n        plot.caption = element_text(size = 8, color = \"gray50\"),\n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"right\"\n    )\n\n# Final combined plot \ncombined_plot &lt;- (p1 + p2) / p3 +\n    plot_layout(heights = c(1,1)) \n\ncombined_plot &lt;- combined_plot +\n    plot_annotation(\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                family = fonts$title, \n                size   = rel(1.9), \n                face   = \"bold\",\n                color  = colors$title,\n                margin = margin(b = 10)\n            ),\n            plot.subtitle = element_text(\n                family = fonts$text,\n                lineheight = 1.1,\n                size   = rel(1.1),\n                color  = colors$subtitle,\n                margin = margin(b = 15)\n            ),\n            plot.caption = element_markdown(\n                family = fonts$caption,\n                size   = rel(0.65),\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 5)\n            ),\n            plot.margin = margin(10, 10, 10, 10),\n        )\n    )   \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot_patchwork (combined_plot, type = \"tidytuesday\", \n          year = 2025, week = 01, width = 10, height = 12)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] readxl_1.4.3    camcorder_0.1.0 patchwork_1.3.0 here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.4.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         gifski_1.32.0-1    fansi_1.0.6        pacman_0.5.1      \n[13] pkgconfig_2.0.3    ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       munsell_0.5.1      repr_1.1.7         codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        pillar_1.9.0      \n[25] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[29] stringi_1.8.4      labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4   \n[33] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.3         \n[37] magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4         withr_3.0.2       \n[41] timechange_0.3.0   rmarkdown_2.29     cellranger_1.1.0   hms_1.1.3         \n[45] evaluate_1.0.1     knitr_1.49         markdown_1.13      gridGraphics_0.5-1\n[49] rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[53] renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[57] R6_2.5.1           fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_01.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nAid Worker Security Database (AWSD): Search Incidents\n\nMakeover Monday 2024 Week 46: Aid Worker Security Incidents\n\n\n\nReports:\n\nHumanitarian Outcomes. (2024). Aid Worker Security Report: Figures at a Glance 2024\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_03.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_03.html",
    "title": "The Paradox of Himalayan Climbing Expeditions",
    "section": "",
    "text": "Figure 1: Four-panel visualization of Himalayan climbing expeditions (1925–2024). The first panel shows the number of first ascents by year, highlighting the impact of the COVID-19 pandemic. The second panel compares the number of climbed vs. unclimbed peaks across various mountain ranges. The third panel presents a paradox: while larger teams show higher accident rates per person, smaller teams face even greater risks. The fourth panel reveals that larger teams achieve higher success rates, with teams of 15+ members reaching 91% success, compared to 59% for teams of 1-5 members.\n\n\n\n\n\n\n\n\nUpdate (January 21, 2025)\n\n\n\nThis post has been updated based on valuable feedback from The Data Digest. The changes include:\n\nNormalizing the accident rates to be per-person rather than per-expedition in the risk analysis plot\nRevising the visualization’s subtitle to accurately reflect that individual climbers face greater risks in smaller teams\nUpdating the annotation in the risk analysis plot to better explain the relationship between team size and individual risk\nModifying the color scheme and axis scales in the risk analysis plot to better represent the per-person accident rates\n\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    patchwork       # The Composer of Plots\n)\n\n})\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 03) \n\nexped_tidy &lt;- tt$exped_tidy |&gt; clean_names()\npeaks_tidy &lt;- tt$peaks_tidy |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(exped_tidy)\nskim(exped_tidy)\n\nglimpse(peaks_tidy)\nskim(peaks_tidy)\n\n\n4. Tidy Data\n\nShow code# 1. First Ascent Timeline\nfirst_ascents_data &lt;- peaks_tidy |&gt;\n  filter(!is.na(pyear)) |&gt;\n  group_by(pyear) |&gt;\n  summarise(\n    first_ascents = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  # Add flag for special years\n  mutate(\n    highlight = case_when(\n      pyear == 1953 ~ \"Everest\",\n      pyear &gt;= 2020 & pyear &lt;= 2021 ~ \"Covid\",\n      TRUE ~ \"Regular\"\n    )\n  )\n\n\n# 2. Success Rate by Team Size Category\nteam_success_data &lt;- exped_tidy |&gt;\n  filter(totmembers &gt; 0) |&gt;\n  mutate(\n    team_size = cut(\n      totmembers,\n      breaks = c(0, 5, 10, 15, Inf),\n      labels = c(\"1-5\", \"6-10\", \"11-15\", \"15+\"),\n      right = TRUE\n    )\n  ) |&gt;\n  group_by(team_size) |&gt;\n  summarise(\n    total = n(),\n    successes = sum(success1 == TRUE, na.rm = TRUE),\n    success_rate = successes / total\n  ) |&gt;\n  # Create text for labels\n  mutate(\n    label_position = success_rate,\n    success_pct = paste0(round(success_rate * 100), \"%\"),\n    total_label = paste0(\"n = \", total)\n  )\n\n# 3. Distribution of Climbing Status by Mountain Range\nclimbing_status_data &lt;- peaks_tidy |&gt;\n  # Count peaks by range and status\n  group_by(himal_factor, pstatus_factor) |&gt;\n  summarise(count = n(), .groups = \"drop\") |&gt;\n  # Calculate total peaks per range for sorting\n  group_by(himal_factor) |&gt;\n  mutate(\n    total_peaks = sum(count),\n    pct = count / total_peaks,\n    # Create labels with count and percentage for larger values\n    label = if_else(count &gt;= 3,\n      as.character(count),\n      \"\"\n    ), # Only show labels for count &gt;= 3\n    # Create total peaks label with consistent format\n    total_label = paste0(total_peaks, \" peaks\")\n  ) |&gt;\n  ungroup() |&gt;\n  # Sort by total peaks\n  mutate(\n    himal_factor = fct_reorder(himal_factor, total_peaks)\n  )\n\n# 4. Accidents vs. Expedition Size (updated)\naccident_data &lt;- exped_tidy |&gt;\n    filter(totmembers &gt; 0, totmembers &lt;= 30) |&gt;\n    group_by(totmembers) |&gt;\n    summarise(\n        total_expeditions = n(), \n        total_people = n() * totmembers,                     # updated\n        total_deaths = sum(mdeaths + hdeaths, na.rm = TRUE),\n        accidents_per_person = total_deaths / total_people,\n        .groups = \"drop\"\n    ) |&gt;\n    # Filter for more reliable statistics\n    filter(total_expeditions &gt;= 5)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n    primary   = \"#2E86C1\",    # Main blue for time series/success\n    secondary = \"#E67E22\",    # Orange for contrasts\n    success   = \"#27AE60\",    # Green for success metrics\n    risk      = \"#E74C3C\",    # Red for risks/accidents\n    neutral   = \"gray90\"      # Background elements\n    ))\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Paradox of Himalayan Climbing Expeditions\")\n\nsubtitle_text &lt;- str_glue(\"While larger teams achieve higher success rates, individual climbers face greater risks in smaller teams.\\n\n                         Analysis of climbing patterns, team dynamics, and safety implications from 1925 to 2024\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 03,\n    source_text = \"The Himalayan Database\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis formatting\n        axis.title = element_text(color = colors$text, size = 10),\n        axis.text = element_text(color = colors$text, size = 9),\n        \n        # Legend formatting \n        legend.position = \"top\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 9),\n        legend.margin = margin(b = 10),\n        \n        # Grid customization\n        panel.grid.minor = element_blank(),\n        \n        # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n        \n        # Legend formatting \n        legend.box.margin = margin(b = 15),\n        legend.spacing = unit(0.2, \"cm\"),\n        legend.box.spacing = unit(0.2, \"cm\"),\n        legend.key.size = unit(0.8, \"lines\")\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\n\n# 1. First Ascent Timeline\np1 &lt;- ggplot(first_ascents_data,\n             aes(x = pyear, y = first_ascents)) +\n    # Geoms\n    geom_hline(\n        yintercept = seq(0, 14, 2), \n        color = colors$palette[\"neutral\"], \n        linewidth = 0.3\n    ) +\n    geom_step(\n        color = colors$palette[\"primary\"],\n        linewidth = 0.8\n    ) +\n    geom_smooth(\n        aes(x = pyear, y = first_ascents),\n        method = \"loess\",\n        color = alpha(colors$palette[\"primary\"], 0.2),\n        se = FALSE,\n        linewidth = 0.8,\n        span = 0.3\n    ) +\n    geom_point(\n        aes(color = highlight),\n        size = 2,\n        alpha = 0.7\n    ) +\n    # Scales\n    scale_x_continuous(\n        breaks = c(1920, 1940, 1960, 1980, 2000, 2020),\n        expand = expansion(mult = c(0.02, 0.02))\n    ) +\n    scale_y_continuous(\n        breaks = seq(0, 14, 2),\n        limits = c(0, 14),\n        expand = expansion(mult = c(0, 0.1))\n    ) +\n    scale_color_manual(\n        values = c(\n            \"Everest\" = colors$palette[\"secondary\"],\n            \"Covid\" = colors$palette[\"risk\"],\n            \"Regular\" = colors$palette[\"primary\"]\n        ),\n        guide = \"none\"\n    ) +\n    # Annotations\n    annotate(\n        \"text\",\n        x = 1953,\n        y = 14,\n        label = \"First Everest\\nAscent\",\n        size = 3,\n        color = colors$palette[\"secondary\"],\n        hjust = 0.5\n    ) +\n    annotate(\n        \"segment\",\n        x = 1953,\n        xend = 1953,\n        y = 9,\n        yend = 13,\n        color = colors$palette[\"secondary\"],\n        alpha = 0.5,\n        linewidth = 0.5\n    ) +\n    annotate(\n        \"text\",\n        x = 2020,\n        y = 1,\n        label = \"COVID-19\\nPandemic\",\n        size = 3,\n        color = colors$palette[\"risk\"],\n        hjust = 0.5\n    ) +\n    # Labs\n    labs(\n        title = \"The Dawn of Himalayan Climbing\",\n        subtitle = \"Number of first ascents recorded each year (1925-2024)\",\n        x = \"Year\",\n        y = \"Number of First Ascents\"\n    ) +\n    # Theme\n    theme(\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(color = \"gray95\")\n    )\n\n# 2. Success Rate by Team Size Category\np2 &lt;- ggplot(team_success_data) +\n    # Geoms\n    geom_col(\n        aes(x = team_size, y = success_rate),\n        fill = colors$palette[\"success\"],\n        width = 0.7\n    ) +\n    geom_text(\n        aes(x = team_size, y = success_rate, label = success_pct),\n        nudge_y = -0.03,\n        color = \"white\",\n        fontface = \"bold\",\n        size = 3.5\n    ) +\n    geom_text(\n        aes(x = team_size, y = 0, label = total_label),\n        nudge_y = 0.05,\n        color = \"white\",\n        size = 3\n    ) +\n    geom_hline(\n        yintercept = 0.5,\n        linetype = \"dashed\",\n        color = \"gray70\",\n        linewidth = 0.3\n    ) +\n    # Scales\n    scale_y_continuous(\n        labels = percent,\n        limits = c(0, 1),\n        breaks = seq(0, 1, 0.2),\n        expand = expansion(mult = c(0.02, 0.02))\n    ) +\n    # Labs\n    labs(\n        title = \"Larger Teams, Higher Success Rates\",\n        subtitle = \"Success rate and total number of expeditions by team size\",\n        x = \"Team Size (Number of Members)\",\n        y = \"Success Rate\"\n    ) +                                    \n    # Theme \n    theme(\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"gray95\")\n    )\n\n# 3. Distribution of Climbing Status by Mountain Range\np3 &lt;- ggplot(climbing_status_data,\n             aes(x = count, \n                 y = himal_factor,\n                 fill = pstatus_factor)) +  \n    # Geoms\n    geom_col(\n        position = \"stack\",\n        width = 0.7\n    ) +\n    geom_text(\n        aes(label = label),\n        position = position_stack(vjust = 0.5),\n        color = \"white\",\n        size = 3,\n        fontface = \"bold\"\n    ) +\n    geom_text(\n        data = subset(climbing_status_data, !duplicated(himal_factor)),\n        aes(x = -1, label = sprintf(\"%d peaks\", total_peaks)),  # Simplified label\n        hjust = 1,\n        size = 3,\n        color = \"gray30\"\n    ) +\n    # Scales\n    scale_x_continuous(\n        expand = expansion(mult = c(0.3, 0.05)),  # Increased left expansion\n        breaks = seq(0, 80, 20)\n    ) +\n    scale_fill_manual(\n        name = \"Status\",\n        breaks = c(\"Unclimbed\", \"Climbed\"),\n        values = setNames(\n            c(colors$palette[\"secondary\"], colors$palette[\"primary\"]),\n            c(\"Unclimbed\", \"Climbed\")\n        )\n    ) +\n    # Labs\n    labs(\n        title = \"Mountain Ranges: Conquests and Challenges\",\n        subtitle = \"Number of climbed and unclimbed peaks in each mountain range\",\n        x = \"Number of Peaks\",\n        y = NULL\n    ) +\n    # Theme \n    theme(\n        axis.text.y = element_text(size = 8),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(color = \"gray95\")\n    )\n\n# 4. Accidents vs. Expedition Size \n# Update p4 plot to use accidents_per_person\np4 &lt;- ggplot(accident_data) +\n    # Geoms\n    geom_hline(\n        yintercept = seq(0, 0.01, 0.002),  \n        color = \"gray95\",\n        linewidth = 0.3\n    ) +\n    geom_line(\n        aes(x = totmembers, y = accidents_per_person),  # Changed to per-person metric\n        color = colors$palette[\"risk\"],\n        linewidth = 0.5,\n        alpha = 0.6\n    ) +\n    geom_point(\n        aes(x = totmembers, y = accidents_per_person,  # Changed to per-person metric\n            size = total_expeditions),\n        color = colors$palette[\"risk\"],\n        alpha = 0.7,\n        stroke = 0\n    ) +\n    # Update label text to reflect per-person normalization\n    geom_label(\n        aes(x = 05, y = 0.035,                                                  # updated\n            label = \"After normalizing per person,\\nsmaller teams show higher\\nindividual risk rates than\\nlarger teams\"),\n        size = 3,\n        color = colors$text,\n        #fill = alpha(colors$palette[\"primary\"], 0.01),\n        label.size = 0.25,\n        label.padding = unit(0.5, \"lines\"),\n        hjust = 0\n    ) +\n    # Scales\n    scale_y_continuous(\n        labels = percent_format(),\n        limits = c(-0.001, 0.04),  \n        breaks = seq(0, 0.04, 0.005),  \n        expand = expansion(mult = c(0, 0.04))\n    ) +\n    scale_x_continuous(\n        breaks = seq(0, 30, 5),\n        expand = expansion(mult = c(0.02, 0.02))\n    ) +\n    scale_size_continuous(\n        range = c(2, 8),\n        breaks = c(10, 25, 50, 100),\n        labels = c(\"10\", \"25\", \"50\", \"100+\"),\n        guide = guide_legend(\n            title.position = \"top\",\n            override.aes = list(color = colors$palette[\"risk\"], alpha = 0.7)\n        )\n    ) +\n    # Labs\n    labs(                                                                       # updated\n        title = \"Team Size and Individual Risk Patterns\",\n        subtitle = \"Per-person accident rates show varying risks across different team sizes\",\n        x = \"Team Size (Number of Members)\",\n        y = \"Accidents per Person\",\n        size = \"Number of Expeditions\"\n    ) +\n    # Theme \n    theme(\n        panel.grid.major = element_line(color = \"gray95\"),\n        legend.key = element_blank()\n    )\n\n# Combine plots \ncombined_plot &lt;- (p1 | p3) / (p4 | p2) +  \n    plot_layout(\n        heights = c(1, 1),  \n        widths = c(1, 1)    \n    ) \n\ncombined_plot &lt;- combined_plot +\n    # Add title, subtitle, and caption \n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                size   = rel(2.6),\n                family = fonts$title,\n                face   = \"bold\",\n                color  = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size   = rel(1.1),\n                family = fonts$subtitle,\n                color  = colors$subtitle,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 15)\n            ),\n            plot.caption = element_markdown(\n                size   = rel(0.7),\n                family = fonts$caption,\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 10)\n            )\n        )\n    ) & \n    # Add spacing between plots\n    theme(panel.spacing = unit(2, \"cm\")) \n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot_patchwork(combined_plot, type = \"tidytuesday\", \n          year = 2025, week = 03, width = 14, height = 14)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] patchwork_1.3.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[21] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           lattice_0.22-6     tzdb_0.4.0         yulab.utils_0.1.8 \n [9] vctrs_0.6.5        tools_4.4.0        generics_0.1.3     parallel_4.4.0    \n[13] curl_6.0.0         fansi_1.0.6        pkgconfig_2.0.3    Matrix_1.7-0      \n[17] ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.4.0     farver_2.1.2      \n[21] munsell_0.5.1      repr_1.1.7         codetools_0.2-20   snakecase_0.11.1  \n[25] htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3       pillar_1.9.0      \n[29] magick_2.8.5       nlme_3.1-164       commonmark_1.9.2   tidyselect_1.2.1  \n[33] digest_0.6.37      stringi_1.8.4      splines_4.4.0      rprojroot_2.0.4   \n[37] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.3         \n[41] magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4         withr_3.0.2       \n[45] rappdirs_0.3.3     bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29    \n[49] tidytuesdayR_1.1.2 gitcreds_0.1.2     bit_4.5.0          hms_1.1.3         \n[53] evaluate_1.0.1     knitr_1.49         markdown_1.13      mgcv_1.9-1        \n[57] gridGraphics_0.5-1 rlang_1.1.4        gridtext_0.1.5     Rcpp_1.0.13-1     \n[61] xml2_1.3.6         renv_1.0.3         vroom_1.6.5        rstudioapi_0.17.1 \n[65] jsonlite_1.8.9     R6_2.5.1           fs_1.6.5          \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_03.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 03: The History of Himalayan Mountaineering Expeditions\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_05.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_05.html",
    "title": "The Simpsons: Character Dialogue Analysis (2010-2016)",
    "section": "",
    "text": "Figure 1: A three-panel visualization analyzing The Simpsons dialogue data (2010-2016). The top panel shows a scatter plot of character speaking patterns, with the Simpson family highlighted in yellow and showing higher total lines. The bottom left shows declining viewership trends across seasons 21-27 using boxplots. The bottom right displays a horizontal bar chart of the top 10 most talkative characters, led by Homer Simpson with over 50,000 words spoken.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    patchwork,      # The Composer of Plots\n    camcorder,      # Record Your Plot History \n    tidytext,       # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n    ggrepel         # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 05) \n\ncharacters   &lt;- tt$simpsons_characters |&gt; clean_names()\nepisodes     &lt;- tt$simpsons_episodes |&gt; clean_names()\nlocations    &lt;- tt$simpsons_locations |&gt; clean_names()\nscript_lines &lt;- tt$simpsons_script_lines |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(characters)\nglimpse(episodes)\nglimpse(locations)\nglimpse(script_lines)\n\n\n4. Tidy Data\n\nShow code# Set seed for reproducibility\nset.seed(123)\n\n# P1. Character Speaking Pattern\nspeaking_patterns &lt;- script_lines |&gt;\n    filter(\n        !is.na(raw_character_text), \n        speaking_line == TRUE,\n        !(episode_id %in% c(597, 598, 599, 600))  # filter S28\n    ) |&gt; \n    group_by(raw_character_text) |&gt;\n    summarise(\n        total_lines = n(),\n        avg_words = mean(word_count, na.rm = TRUE)\n    ) |&gt;\n    ungroup() |&gt; \n    filter(total_lines &gt; 50) |&gt;\n    mutate(\n        character_type = case_when(\n            raw_character_text %in% c(\"Homer Simpson\", \"Marge Simpson\", \n                                      \"Bart Simpson\", \"Lisa Simpson\") ~ \"Simpson Family\",\n            TRUE ~ \"Supporting Characters\"\n        ),\n        show_label = raw_character_text %in% c(\n            \"Homer Simpson\", \"Marge Simpson\", \"Bart Simpson\", \"Lisa Simpson\",\n            \"Kent Brockman\", \"Ralph Wiggum\" # Key outliers\n        )\n    )\n\n# P2. US Viewership Distribution by Season\nepisodes_filtered &lt;- episodes |&gt;\n    filter(season != 28)\n\n# P3. Top 10 Most Talkative Characters\ntalkative_chars &lt;- script_lines |&gt;\n    filter(!is.na(raw_character_text)) |&gt;  \n    group_by(raw_character_text) |&gt;\n    summarise(\n        total_words = sum(word_count, na.rm = TRUE)\n    ) |&gt;\n    ungroup() |&gt; \n    # Get top 10\n    arrange(desc(total_words)) |&gt;\n    head(10) |&gt;\n    # Add character type and reverse the order\n    mutate(\n        character_type = case_when(\n            raw_character_text %in% c(\"Homer Simpson\", \"Marge Simpson\", \n                                      \"Bart Simpson\", \"Lisa Simpson\") ~ \"Simpson Family\",\n            TRUE ~ \"Supporting Characters\"\n        ),\n        # Create factor for reversed ordering\n        raw_character_text = factor(raw_character_text, levels = rev(raw_character_text))\n    )\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n    \"Simpson Family\"        = \"#FED41D\", \n    \"Supporting Characters\" = \"grey50\",\n    \" \" = \"#009DDC\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Simpsons: Character Dialogue Analysis (2010-2016)\")\nsubtitle_text &lt;- str_glue(\"Exploring speaking patterns, viewership trends, and character contributions across seasons\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 05,\n    source_text = \"The Simpsons Dataset\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Axis elements\n        axis.title = element_text(color = colors$text, size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey80\", linewidth = 0.1),\n        \n        # Legend elements\n        legend.position = \"right\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8)),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot ----\n\n# P1. Character Speaking Pattern\np1 &lt;- ggplot(speaking_patterns, aes(x = total_lines, y = avg_words)) +\n    \n    # Geoms\n    geom_point(aes(size = total_lines, color = character_type, alpha = character_type)) +\n    geom_text_repel(\n        data = filter(speaking_patterns, show_label),\n        aes(label = raw_character_text),\n        family = fonts$text,\n        size = 4,\n        color = \"grey30\",\n        min.segment.length = 0,\n        max.overlaps = Inf,\n        segment.size = 0.2,\n        segment.color = \"grey50\",\n        segment.alpha = 0.5,\n        box.padding = 0.5,\n        point.padding = 0.3,\n        force = 3,\n        direction = \"both\",\n        seed = 123\n    ) +\n    # Control legend order and appearance\n    guides(\n        color = guide_legend(\n            override.aes = list(size = 4),\n            order = 1\n        ),\n        size = guide_legend(\n            nrow = 1,\n            order = 2,\n            override.aes = list(color = \"grey70\")  \n        )\n    ) +\n    \n    # Scales\n    scale_x_continuous(\n        breaks = seq(0, 6000, 1000),\n        labels = scales::label_number(scale = 1e-3, suffix = \" K\"),  \n        limits = c(-100, 6100)\n    ) +\n    scale_y_continuous(\n        breaks = seq(6, 18, 3),\n        limits = c(5.5, 18)\n    ) +\n    scale_color_manual(\n        values = colors$palette\n    ) +\n    scale_alpha_manual(\n        values = c(\"Simpson Family\" = 0.9,\n                   \"Supporting Characters\" = 0.5),\n        guide = \"none\"\n    ) +\n    scale_size_continuous(\n        range = c(1, 8),\n        breaks = c(100, 500, 1000, 2000),\n        labels = scales::comma\n    ) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        title = \"Character Speaking Patterns\",\n        x = \"Total Lines (Thousands)\",\n        y = \"Average Words per Line\",\n        color = \"Character Type\",\n        size = \"Total Lines\"\n    ) +\n    \n    # Theme\n    theme(\n        panel.grid = element_blank(),\n        legend.position = c(0.8, 0.84),\n        legend.box = \"vertical\",\n        legend.background = element_rect(fill = colors$background, color = NA),\n        legend.title = element_text(family = fonts$text, size = 10),\n        legend.text = element_text(family = fonts$text, size = 9),\n        legend.margin = margin(5, 5, 5, 5),\n        \n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n    ) \n   \n# P2. US Viewership Distribution by Season\np2 &lt;- ggplot(episodes_filtered, aes(x = factor(season), y = us_viewers_in_millions)) +\n    \n    # Geoms\n    geom_point(\n        position = position_jitter(width = 0.2, seed = 123),\n        color = colors$palette[3],\n        alpha = 0.5,\n        size = 2\n    ) +\n    geom_boxplot(\n        fill = colors$palette[1],\n        alpha = 0.25, \n        outlier.shape = NA,\n        width = 0.5\n    ) +\n    \n    # Scales\n    scale_y_continuous(\n        breaks = seq(0, 15, 3),\n        limits = c(0, 15),\n        labels = scales::label_number(scale = 1, suffix = \" M\"), \n    ) +\n    \n    # Labs\n    labs(\n        title = \"US Viewership Distribution by Season\",\n        x = \"Season\",\n        y = \"US Viewers (Millions)\"\n    ) +\n    \n    # Theme\n    theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        \n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n    ) \n    \n# P3. Top 10 Most Talkative Characters\np3 &lt;- ggplot(talkative_chars,\n             aes(x = raw_character_text, \n                 y = total_words,\n                 fill = character_type)) +\n    \n    # Geoms\n    geom_col(\n        width = 0.7,\n        alpha = 0.9, \n        show.legend = FALSE\n    ) +\n    geom_text(\n        aes(label = scales::comma(total_words)),\n        hjust = -0.2,\n        family = fonts$text,\n        size = 3,\n        color = colors$text\n    ) +\n    \n    # Scales\n    scale_y_continuous(\n        labels = scales::label_number(scale = 1e-3, suffix = \" K\"),  \n        expand = expansion(mult = c(0, 0.15))  \n    ) +\n    scale_fill_manual(\n        values = colors$palette\n    ) +\n    coord_flip() +\n    \n    # Labs\n    labs(\n        title = \"Top 10 Most Talkative Characters\",\n        x = NULL,\n        y = \"Total Words Spoken ((Thousands)\"\n    ) +\n    \n    # Theme\n    theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n\n        plot.title = element_text(\n            size   = rel(1.3),\n            family = fonts$title,\n            face   = \"bold\",\n            color  = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n    ) \n    \n# Combine plots \ncombined_plot &lt;- (p1 / (p2 + p3)) +\n    \n    plot_layout(\n        heights = c(1.2, 1),  \n        widths = c(1, 1)    \n        ) \n\ncombined_plot &lt;- combined_plot +\n    # Add overall title, subtitle, and caption\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text(\n                size   = rel(1.8),\n                family = fonts$title,\n                face   = \"bold\",\n                color  = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size   = rel(1),\n                family = fonts$subtitle,\n                color  = colors$subtitle,\n                lineheight = 1.2,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.caption = element_markdown(\n                size   = rel(0.6),\n                family = fonts$caption,\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 10)\n            ),\n             plot.margin = margin(t = 20, r = 10, b = 20, l = 10)\n            )\n        )\n\n\n7. Save\n\nShow code### |-  plot image ----  \n\nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 5, \n  width = 10,\n  height = 10\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggrepel_0.9.6   tidytext_0.4.2  camcorder_0.1.0 patchwork_1.3.0\n [5] here_1.0.1      glue_1.8.0      scales_1.3.0    skimr_2.1.5    \n [9] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n[13] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[17] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[21] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] janeaustenr_1.0.0  digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   \n [9] rsvg_2.6.1         tokenizers_0.3.0   magrittr_2.0.3     compiler_4.4.0    \n[13] rlang_1.1.4        tools_4.4.0        utf8_1.2.4         yaml_2.3.10       \n[17] knitr_1.49         labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0         \n[21] curl_6.0.0         xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2\n[25] withr_3.0.2        grid_4.4.0         fansi_1.0.6        colorspace_2.1-1  \n[29] gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29     crayon_1.5.3      \n[33] generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0         commonmark_1.9.2  \n[37] parallel_4.4.0     ggplotify_0.1.2    yulab.utils_0.1.8  base64enc_0.1-3   \n[41] vctrs_0.6.5        Matrix_1.7-0       jsonlite_1.8.9     gridGraphics_0.5-1\n[45] hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5      \n[49] gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4      gtable_0.3.6      \n[53] munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1 \n[57] R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4    vroom_1.6.5       \n[61] evaluate_1.0.1     lattice_0.22-6     markdown_1.13      SnowballC_0.7.1   \n[65] gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1     \n[69] svglite_2.1.3      xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_05.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 05: The Simpsons\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_07.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_07.html",
    "title": "Geographic Distribution of U.S. Law Enforcement Agencies",
    "section": "",
    "text": "Figure 1: Seven small maps of the continental United States show law enforcement agencies’ geographic distribution by type. City agencies (11,251) and County agencies (3,023) show the densest coverage across the country. State Police (882) are concentrated in the Northeast. Other State Agencies (715) cluster in the Southeast. University/College agencies (671) are spread across the country, with higher density in the East. Other agencies (430) show scattered distribution. Tribal agencies (185) are primarily located in Western states.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    maps            # Draw Geographical Maps\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  7,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 07) \n\nagencies &lt;- tt$agencies |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(agencies)\nskim(agencies)\n\n\n4. Tidy Data\n\nShow code# Define constants\ncontinental_bounds &lt;- list(\n    states_exclude = c(\"alaska\", \"hawaii\"),\n    long = c(-125, -65),\n    lat = c(25, 50),\n    outlier_thresh = -125\n)\n\n# Get continental US map data\ncontinental_states &lt;- map_data(\"state\") |&gt;\n    filter(!region %in% continental_bounds$states_exclude)\n\n# Function to check if point is within continental bounds\nis_continental &lt;- function(long, lat, bounds) {\n    between(long, bounds$long[1], bounds$long[2]) &\n        between(lat, bounds$lat[1], bounds$lat[2])\n}\n\n# Process agencies data\ncleaned_agencies &lt;- agencies |&gt;\n    # Initial filtering\n    filter(\n        !agency_type %in% c(NA, \"Unknown\", \"NA\"),\n        !state %in% str_to_title(continental_bounds$states_exclude),\n        !(agency_type == \"Other\" & longitude &lt; continental_bounds$outlier_thresh)\n    ) |&gt;\n    # Filter to continental bounds\n    filter(is_continental(longitude, latitude, continental_bounds))\n\n# Calculate agency counts and create labels\nagency_counts &lt;- cleaned_agencies |&gt;\n    count(agency_type) |&gt;\n    arrange(desc(n)) |&gt;\n    mutate(\n        label = str_glue(\"{agency_type}\\n(n = {format(n, big.mark=',')})\"), \n        pct_total = n/sum(n) * 100,\n        agency_type = factor(agency_type, levels = agency_type)\n    )\n\n# Prepare final dataset for plotting\nfiltered_agencies &lt;- cleaned_agencies |&gt;\n    left_join(agency_counts |&gt; select(agency_type, label),\n              by = \"agency_type\") |&gt;\n    mutate(\n        # Set factor levels based on counts\n        agency_type = factor(agency_type, \n                             levels = levels(agency_counts$agency_type)),\n        # Create labels for faceting\n        agency_label = factor(agency_type,\n                              levels = levels(agency_type),\n                              labels = agency_counts$label)\n    )\n\n# Extract total for use in plot\ntotal_agencies &lt;- agency_counts$total_agencies[1]\n\n# Calculate summary statistics \nsummary_stats &lt;- list(\n    total_agencies = sum(agency_counts$n),\n    num_categories = n_distinct(filtered_agencies$agency_type),\n    city_county_pct = round(100 * sum(agency_counts$n[1:2])/sum(agency_counts$n))\n)\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"City\"                  = \"#AD225E\",         \n        \"County\"                = \"#D67195\",       \n        \"State Police\"          = \"#228B7D\",  \n        \"Other State Agency\"    = \"#B8860B\", \n        \"University or College\" = \"#2D439E\",\n        \"Other\"                 = \"#8B4513\",         \n        \"Tribal\"                = \"#666666\"         \n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Geographic Distribution of U.S. Law Enforcement Agencies\")\n\nsubtitle_text &lt;-  str_glue(\n    \"Showing **{format(summary_stats$total_agencies, big.mark=',')}** agencies across {summary_stats$num_categories} categories&lt;br&gt;\",\n    \"**City** and **County** agencies account for **{summary_stats$city_county_pct}%** of all agencies\"\n)\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 07,\n    source_text = \"FBI Crime Data API\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Remove axes\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank(),\n        \n        # Style facet labels\n        strip.text = element_text(\n            size = rel(0.75),\n            face = \"bold\",\n            family = fonts$text,\n            color = colors$title,\n            margin = margin(b = 8, t = 8)\n        ),\n        \n        # Add spacing\n        panel.spacing = unit(1.2, \"lines\"),\n        \n        # Plot margins \n        plot.margin = margin(10, 10, 10, 10),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Map\n\nShow code### |-  Map  ----\np &lt;- ggplot() +\n    # Geoms\n    geom_polygon(\n        data = continental_states, \n        aes(x = long, y = lat, group = group),\n        fill = \"gray95\",     \n        color = \"gray80\", \n        linewidth = 0.3\n    ) +\n    geom_point(\n        data = filtered_agencies,\n        aes(x = longitude, \n            y = latitude,\n            color = agency_type,\n            alpha = agency_type),  \n        size = 0.5\n    ) +\n    \n    # Scales\n    scale_alpha_manual(\n        values = c(\n            \"City\" = 0.4,\n            \"County\" = 0.4,\n            \"Other\" = 0.7,\n            \"Other State Agency\" = 0.7,\n            \"State Police\" = 0.7,\n            \"Tribal\" = 0.8,    \n            \"University or College\" = 0.7\n        ),\n        guide = \"none\"\n    ) +\n    scale_color_manual(\n        values = colors$palette,\n        guide = \"none\"\n    ) +\n    coord_fixed(\n        1.3,\n        xlim = continental_bounds$long,\n        ylim = continental_bounds$lat\n    ) +\n    \n    # Labs\n    labs(\n        x = NULL,\n        y = NULL,\n        title    = title_text,\n        subtitle = subtitle_text,\n        caption  = caption_text,\n    ) +\n    \n    # Facets \n    facet_wrap(\n        ~agency_label, \n        ncol = 3,\n        scales = \"fixed\"\n    ) +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.3),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 0, b = 8)\n        ),\n        plot.subtitle = element_markdown(\n            size = rel(0.7),\n            lineheight = (1.2),\n            family = fonts$subtitle,\n            color = colors$subtitle,\n            margin = margin(b = 15)\n        ),\n        plot.caption = element_markdown(\n            size   = rel(0.5),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 1,\n            margin = margin(t = 0, b = 0)\n        )\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 7, \n  width = 8,\n  height = 7\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] maps_3.4.2.1    camcorder_0.1.0 here_1.0.1      glue_1.8.0     \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.4.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    lifecycle_1.0.4    farver_2.1.2      \n[17] compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1      repr_1.1.7        \n[21] codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10       \n[25] crayon_1.5.3       pillar_1.9.0       magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      labeling_0.4.3    \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.3          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2       \n[45] timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2    \n[49] bit_4.5.0          ragg_1.3.3         hms_1.1.3          evaluate_1.0.1    \n[53] knitr_1.49         markdown_1.13      rlang_1.1.4        gridtext_0.1.5    \n[57] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         vroom_1.6.5       \n[61] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[65] systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_07.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 07]: Agencies from the FBI Crime Data API\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_09.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_09.html",
    "title": "Long Beach Animal Shelter: Stay Duration and Outcomes",
    "section": "",
    "text": "Figure 1: A two-panel visualization of Long Beach Animal Shelter data. The left panel shows density distributions of the length of stay by animal type, with birds and reptiles having the shortest stays (median 0-3 days) and rabbits the longest (median 16 days). The right panel displays outcome trends from 2017-2024, showing adoption rates more than tripled to 32.8% while euthanasia rates decreased from 21.3% to 16.2%. Colors indicate positive outcomes (green), neutral (yellow), and negative (red).\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n   tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    patchwork,      # The Composer of Plots # The Composer of Plots # The Composer of Plots\n    ggridges        # Ridgeline Plots in 'ggplot2'\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  14,\n    height =  12,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 09) \n\nlongbeach &lt;- tt$longbeach |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(longbeach)\nskim(longbeach)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\nlongbeach_clean &lt;- longbeach |&gt;  \n    mutate(\n        # Time-based variables\n        outcome_year = year(outcome_date),\n        outcome_month = month(outcome_date),\n        outcome_season = case_when(\n            outcome_month %in% c(12, 1, 2) ~ \"Winter\",\n            outcome_month %in% c(3, 4, 5) ~ \"Spring\",\n            outcome_month %in% c(6, 7, 8) ~ \"Summer\",\n            outcome_month %in% c(9, 10, 11) ~ \"Fall\",\n            TRUE ~ NA_character_  \n        ),\n        # Duration calculations\n        days_in_shelter = as.numeric(difftime(outcome_date, intake_date, units = \"days\")),\n        age_at_outcome = if_else(\n            !is.na(dob), \n            as.numeric(difftime(outcome_date, dob, units = \"days\")) / 365.25,\n            NA_real_\n        )\n    )\n\n# P1. Days in Shelter by Animal Type ----\n\n# Filter data for the visualization with clear criteria\nshelter_stay &lt;- longbeach_clean |&gt;\n    filter(\n        !is.na(days_in_shelter), \n        days_in_shelter &gt;= 0, \n        days_in_shelter &lt;= 365,\n        animal_type %in% c(\"dog\", \"cat\", \"rabbit\", \"bird\", \"reptile\")\n    ) |&gt; \n    mutate(animal_type = str_to_title(animal_type))\n\n# Calculate summary statistics with proper grouping\nmedian_stays &lt;- shelter_stay |&gt;\n    group_by(animal_type) |&gt;\n    summarize(\n        median_stay = median(days_in_shelter, na.rm = TRUE),\n        max_density = 0.02,  \n        .groups = 'drop'  \n    )\n\n# Join and transform in a clear sequence\nshelter_stay &lt;- shelter_stay |&gt;\n    left_join(\n        median_stays |&gt; select(animal_type, median_stay), \n        by = \"animal_type\"\n    ) |&gt;\n    mutate(\n        animal_type = fct_reorder(animal_type, median_stay, .desc = TRUE)\n    )\n\n# Ensure consistent factor levels across dataframes\nmedian_stays &lt;- median_stays |&gt;\n    mutate(\n        animal_type = factor(animal_type, levels = levels(shelter_stay$animal_type))\n    )\n\n# P2. Outcome Trends by Type ----\noutcome_by_year &lt;- longbeach_clean |&gt;\n    filter(!is.na(outcome_year), !is.na(outcome_type)) |&gt;\n    count(outcome_year, outcome_type) |&gt;\n    group_by(outcome_year) |&gt;\n    mutate(pct = n / sum(n) * 100) |&gt;\n    ungroup() |&gt;\n    # Keep only main outcome types of interest\n    filter(outcome_type %in% c(\"adoption\", \"euthanasia\", \"return to owner\", \"transfer\", \"died\")) |&gt;\n    mutate(\n        # Categorize outcomes\n        outcome_category = case_when(\n            outcome_type %in% c(\"adoption\", \"return to owner\") ~ \"Positive\",\n            outcome_type %in% c(\"euthanasia\", \"died\") ~ \"Negative\",\n            TRUE ~ \"Neutral\"\n        ),\n        outcome_type = str_to_title(outcome_type),\n        # Create category factor with explicit ordering\n        outcome_category = factor(\n            outcome_category, \n            levels = c(\"Positive\", \"Neutral\", \"Negative\")\n        ),\n        # Create descriptive facet labels\n        facet_label = paste0(outcome_type, \" (\", outcome_category, \")\"),\n        # Create ordered factor for outcome types\n        outcome_type = factor(\n            outcome_type, \n            levels = c(\"Adoption\", \"Return To Owner\", \"Transfer\", \"Died\", \"Euthanasia\"),\n            ordered = TRUE\n        )\n    ) |&gt; \n    filter(!is.na(facet_label)) |&gt; \n    # Create ordered faceting variable\n    mutate(\n        # Prefix with numeric category for sorting\n        facet_order = paste0(\n            as.numeric(outcome_category), \"_\", \n            outcome_type, \" (\", outcome_category, \")\"\n        ),\n        # Convert to factor with proper ordering\n        facet_order = factor(\n            facet_order, \n            levels = unique(facet_order[order(outcome_category, outcome_type)])\n        )\n    )\n\n# Extract first and last points for each outcome type for highlighting\nendpoints &lt;- outcome_by_year |&gt;\n    group_by(outcome_type) |&gt;\n    slice(c(1, n())) |&gt;  \n    ungroup()\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\n# Color for P1\ncolors &lt;- get_theme_colors(palette = c(\n    \"Rabbit\" = \"#FDCDAC\",  \n    \"Cat\" = \"#F4A582\",     \n    \"Dog\" = \"#D6604D\",     \n    \"Reptile\" = \"#2C7FB8\", \n    \"Bird\" = \"#7FCDBB\"      \n))\n\n# Colors for P2\ncolors2 &lt;- get_theme_colors(palette = c(\n    \"Positive\" = alpha(\"#1A8754\", 0.9),  \n    \"Neutral\" = alpha(\"#FFC107\", 0.9),   \n    \"Negative\" = alpha(\"#DC3545\", 0.9)\n))\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Long Beach Animal Shelter: Stay Duration and Outcomes\")\n\nsubtitle_text &lt;- str_glue(\"Animals with shorter shelter stays correlate with improved adoption outcomes\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 09,\n    source_text =  \"City of Long Beach Animal Care Services\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8)),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\n# P1. Days in Shelter by Animal Type ----\np1 &lt;- ggplot(shelter_stay, aes(x = days_in_shelter, y = animal_type, fill = animal_type)) +\n    # Geoms\n    geom_density_ridges(\n        alpha = 0.8, \n        scale = 1.5,\n        rel_min_height = 0.01,\n        bandwidth = 2.5,\n        quantile_lines = TRUE,\n        quantiles = 2  # median\n    ) +\n    geom_point(\n        data = median_stays,\n        aes(x = median_stay, y = animal_type),\n        shape = 21,\n        fill = \"white\",\n        color = \"black\",\n        size = 4,        \n        stroke = 1.5     \n    ) +\n    geom_label(        \n        data = median_stays,\n        aes(x = median_stay, y = animal_type, \n            label = paste0(\"Median: \", round(median_stay, 1), \" days\")),\n        hjust = -0.1,\n        vjust = 0.5,\n        size = 3.5,      # Slightly larger\n        fontface = \"bold\",\n        fill = alpha(\"white\", 0.7),\n        label.padding = unit(0.2, \"lines\"),\n        label.r = unit(0.15, \"lines\")\n    ) +\n    # Scales\n    scale_x_continuous(\n        limits = c(-10, 100),\n        breaks = seq(0, 100, by = 20),\n        minor_breaks = seq(0, 100, by = 10),\n        expand = c(0, 0)\n    ) +\n    scale_y_discrete(expand = c(0, 0.25)) +\n    scale_fill_manual(values = colors$palette) +\n    coord_cartesian(clip = 'off') +\n    # Labs\n    labs(\n        title = \"Length of Stay in Shelter by Animal Type\",\n        subtitle = str_wrap(\"Distribution of days between intake and outcome (ordered by median stay duration)\", width = 60),\n        x = \"Days in Shelter\",\n        y = NULL,\n    ) +\n    # Theme\n    theme(\n        panel.grid.major = element_line(color = \"gray\", linewidth = 0.1),\n        axis.text.y = element_text(face = \"bold\")\n    ) \n\n# P2. Outcome Trends by Type ----\np2 &lt;- ggplot(outcome_by_year, aes(x = outcome_year, y = pct, color = outcome_category)) +\n    # Geoms\n    geom_line(size = 1.5) + \n    geom_point(size = 2.5) +  \n    geom_point(data = endpoints, size = 5, shape = 21, fill = \"white\", stroke = 2) +\n    geom_text(\n        data = endpoints,\n        aes(label = sprintf(\"%.1f%%\", pct)),\n        hjust = ifelse(endpoints$outcome_year == min(endpoints$outcome_year), -0.3, 1.3),\n        vjust = -1.5,\n        size = 3.5,  # Larger text\n        fontface = \"bold\",\n        show.legend = FALSE\n    ) +\n    geom_text(\n        data = tibble(\n            outcome_year = 2021.6,\n            pct = 15,\n            facet_order = unique(outcome_by_year$facet_order)[1] # Only first panel\n        ),\n        label = \"Adoptions more than tripled\\nwhile euthanasia decreased\",\n        size = 3,\n        fontface = \"italic\",\n        color = \"gray30\",\n        hjust = 0\n    ) +\n    # Scales\n    scale_x_continuous(breaks = c(2017, 2021, 2024), expand = expansion(mult = c(0.1, 0.1))) +\n    scale_y_continuous(\n        limits = c(0, 45),\n        breaks = seq(0, 40, by = 20),\n        labels = function(x) paste0(x, \"%\"),\n        minor_breaks = NULL\n    ) +\n    scale_color_manual(values = colors2$palette) +\n    coord_cartesian(clip = 'off') +\n    # Labs\n    labs(\n        title = \"Outcome Trends by Type (2017-2024)\",\n        subtitle = str_wrap(\"Positive outcomes have increased while negative outcomes have decreased\", width = 60),\n        x = \"Year\",\n        y = \"Percentage of Animals (%)\",\n    ) +\n    # Facets\n    facet_wrap(~ facet_order, scales = \"fixed\", ncol = 1, drop = TRUE, \n               labeller = labeller(facet_order = function(x) gsub(\"^\\\\d+_\", \"\", x))) +\n    # Theme\n    theme(\n        strip.text = element_text(face = \"bold\", family = fonts$text, size = rel(0.8)),\n        strip.background = element_rect(fill = \"gray95\", color = NA),\n        panel.grid.major.y = element_line(color = \"gray\", linewidth = 0.1),\n        panel.spacing = unit(1.5, \"lines\")\n    ) \n\n# Combined Plot -----\ncombined_plot &lt;- (p1 | plot_spacer() | p2) +\n    plot_layout(widths = c(1, 0.02, 1))   \n\ncombined_plot &lt;- combined_plot +\n    plot_annotation(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        theme = theme(\n            plot.title = element_text( \n                size = rel(2.2),\n                family = fonts$title,\n                face = \"bold\",\n                color = colors$title,\n                lineheight = 1.1,\n                margin = margin(t = 5, b = 5)\n            ),\n            plot.subtitle = element_text(\n                size = rel(1),  \n                family = fonts$subtitle,\n                color = colors$subtitle,\n                lineheight = 1.2,\n                margin = margin(t = 5, b = 10)\n            ),\n            plot.caption = element_markdown(\n                size   = rel(0.75),\n                family = fonts$caption,\n                color  = colors$caption,\n                hjust  = 0.5,\n                margin = margin(t = 10)\n            ),\n            plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n        ))\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 9, \n  width = 12,\n  height = 10\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggridges_0.5.6  patchwork_1.3.0 camcorder_0.1.0 here_1.0.1     \n [5] glue_1.8.0      scales_1.3.0    skimr_2.1.5     janitor_2.2.0  \n [9] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n[13] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[17] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[21] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         htmlwidgets_1.6.4 \n[17] bit_4.5.0          curl_6.0.0         xml2_1.3.6         repr_1.1.7        \n[21] tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0         fansi_1.0.6       \n[25] colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3          rmarkdown_2.29    \n[29] crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1  tzdb_0.4.0        \n[33] commonmark_1.9.2   parallel_4.4.0     ggplotify_0.1.2    base64enc_0.1-3   \n[37] vctrs_0.6.5        yulab.utils_0.1.8  jsonlite_1.8.9     gridGraphics_0.5-1\n[41] hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0  magick_2.8.5      \n[45] gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4      gtable_0.3.6      \n[49] munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1 \n[53] R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4    vroom_1.6.5       \n[57] evaluate_1.0.1     markdown_1.13      gridtext_0.1.5     snakecase_0.11.1  \n[61] renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3      xfun_0.49         \n[65] fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_09.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 09]: Long Beach Animal Shelter\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_11.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_11.html",
    "title": "Growth Form Patterns Across Palm Subfamilies",
    "section": "",
    "text": "Figure 1: Alluvial diagram showing growth form patterns across palm subfamilies. The visualization flows from left to right, connecting palm subfamilies (Arecoideae, Calamoideae, Ceroxyloideae, and Coryphoideae) to growth forms (Erect, Non-erect, and both) to stem types (Solitary Stem, Clustered Stems, and both). The diagram reveals distinctive patterns: Arecoideae palms show diverse growth habits, Calamoideae are predominantly erect with clustered stems, Ceroxyloideae show a mix of growth forms, and Coryphoideae are mainly non-erect with solitary stems. The flow width represents the percentage of species with each characteristic.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder,      # Record Your Plot History \n    ggalluvial,     # Alluvial Plots in 'ggplot2'\n    MetBrewer      # Color Palettes Inspired by Works at the Metropolitan Museum of Art\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 11) \n\npalmtrees_raw &lt;- tt$palmtrees |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(palmtrees_raw)\nskim(palmtrees_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\ngrowth_form_data &lt;- palmtrees_raw |&gt;\n    filter(!is.na(erect), !is.na(stem_solitary), !is.na(palm_subfamily)) |&gt;\n    count(palm_subfamily, erect, stem_solitary) |&gt;\n    group_by(palm_subfamily) |&gt;\n    filter(sum(n) &gt; 20) |&gt;  \n    mutate(percentage = n / sum(n) * 100) |&gt; \n    ungroup() |&gt;\n    mutate(\n        erect_label = case_when(\n            erect == \"erect\" ~ \"Erect\",\n            erect == \"non-erect\" ~ \"Non-erect\",\n            TRUE ~ as.character(erect)\n        ),\n        stem_solitary_label = case_when(\n            stem_solitary == \"solitary\" ~ \"Solitary Stem\",\n            stem_solitary == \"non-solitary\" ~ \"Clustered Stems\",\n            TRUE ~ as.character(stem_solitary)\n        ),\n        palm_subfamily = str_to_title(palm_subfamily)\n    ) \n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = MetBrewer::met.brewer(\n        name = \"Kandinsky\",\n        n = 4,\n        type = 'discrete')\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Growth Form Patterns Across Palm Subfamilies\")\nsubtitle_text &lt;- str_glue(\"Relationship between taxonomic classification and physical growth characteristics\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 11,\n    source_text =  \"{palmtrees} R package\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray80\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"top\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # Plot margins \n        plot.margin = margin(t = 10, r = 10, b = 10, l = 10),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(\n    data = growth_form_data,\n    aes(\n        y = percentage,\n        axis1 = palm_subfamily,\n        axis2 = erect_label,\n        axis3 = stem_solitary_label\n        )\n    ) +\n    \n    # Geoms                                   # flow appearance\n    geom_alluvium(aes(fill = palm_subfamily),\n                  width = 0.25,\n                  alpha = 0.7, \n                  knot.pos = 0.3\n    ) + \n    geom_stratum(                             # strata appearance\n        width = 0.35,\n        fill = \"gray95\", \n        color = \"gray40\", \n        size = 0.6,\n        alpha = 0.85\n    ) +\n    geom_text(\n        stat = \"stratum\",\n        aes(label = after_stat(stratum)),\n        size = 4,\n        fontface = \"bold\",\n        color = \"gray10\"\n    ) + \n    \n    # Scales\n    scale_x_discrete(\n        limits = c(\"Subfamily\", \"Growth Form\", \"Stem Type\"),\n        expand = c(0.08, 0.08)\n    ) + \n    scale_fill_manual(values = colors$palette) +\n    coord_cartesian(clip = 'off') +\n    \n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        y = \"Percentage of Species (%)\",\n        x = NULL\n    ) +\n    \n    # Legend\n    guides(\n        fill = guide_legend(title = \"Palm Subfamily: \", nrow = 1)\n    ) +\n    \n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(2.2),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(1.0),\n            family = fonts$subtitle,\n            color = colors$subtitle,\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 10)\n        ),\n        plot.caption = element_markdown(\n            size   = rel(0.65),\n            family = fonts$caption,\n            color  = colors$caption,\n            hjust  = 0.5,\n            margin = margin(t = 10)\n        ),\n        plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 11, \n  width = 10,\n  height = 10\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] MetBrewer_0.2.0   ggalluvial_0.12.5 camcorder_0.1.0   here_1.0.1       \n [5] glue_1.8.0        scales_1.3.0      skimr_2.1.5       janitor_2.2.0    \n [9] showtext_0.9-7    showtextdb_3.0    sysfonts_0.8.9    ggtext_0.1.2     \n[13] lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1     dplyr_1.1.4      \n[17] purrr_1.0.2       readr_2.1.5       tidyr_1.3.1       tibble_3.2.1     \n[21] ggplot2_3.5.1     tidyverse_2.0.0   pacman_0.5.1     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      gh_1.4.1          \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4        tools_4.4.0       \n[13] utf8_1.2.4         yaml_2.3.10        knitr_1.49         labeling_0.4.3    \n[17] htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0         xml2_1.3.6        \n[21] repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2        grid_4.4.0        \n[25] fansi_1.0.6        colorspace_2.1-1   gitcreds_0.1.2     cli_3.6.3         \n[29] rmarkdown_2.29     crayon_1.5.3       generics_0.1.3     rstudioapi_0.17.1 \n[33] tzdb_0.4.0         commonmark_1.9.2   parallel_4.4.0     ggplotify_0.1.2   \n[37] base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8  jsonlite_1.8.9    \n[41] gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2        systemfonts_1.1.0 \n[45] magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4     \n[49] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[53] htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6        rprojroot_2.0.4   \n[57] vroom_1.6.5        evaluate_1.0.1     markdown_1.13      gridtext_0.1.5    \n[61] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[65] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_11.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 11: Palm Trees\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_13.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_13.html",
    "title": "Speed Distribution by Pokémon Type",
    "section": "",
    "text": "Figure 1: A beeswarm plot showing speed distribution across Pokémon types. Types are ordered by average speed, with Flying and Electric types at the bottom (fastest) and Rock near the top (slowest). Purple diamonds mark the mean speed for each type, and a vertical dashed line at 100 indicates the “Fast” threshold. Most Pokémon fall between 50-100 speed, with outliers reaching up to 150.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    ggbeeswarm,     # Categorical Scatter (Violin Point) Plots \n    camcorder       # Record Your Plot History \n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  7,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 13) \n\npokemon_raw &lt;- tt$pokemon_df |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(pokemon_raw)\nskim(pokemon_raw)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\npokemon_clean &lt;- pokemon_raw |&gt;\n    select(pokemon, type_1, speed, generation_id, color_1) |&gt;\n    filter(!is.na(speed), !is.na(type_1)) |&gt;\n    mutate(generation = as.factor(generation_id))\n\n# Summarize speed stats \nordered_types &lt;- pokemon_clean |&gt;\n    group_by(type_1) |&gt;\n    summarize(\n        across(\n            speed,\n            list(\n                mean = ~mean(.x, na.rm = TRUE),\n                median = ~median(.x, na.rm = TRUE),\n                min = ~min(.x, na.rm = TRUE),\n                max = ~max(.x, na.rm = TRUE)\n            ),\n            .names = \"{fn}_{.col}\"\n        ),\n        count = n(),\n        .groups = \"drop\"\n    ) |&gt;\n    arrange(desc(mean_speed)) |&gt;\n    pull(type_1)\n\n# plot data\npokemon_clean &lt;- pokemon_clean |&gt;\n    mutate(type_1 = factor(type_1, levels = ordered_types))\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(rep(\"#7570B3\", 18))\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Speed Distribution by Pokémon Type\")\nsubtitle_text &lt;- str_glue(\"Electric and Flying types tend to be fastest, while Rock types are slowest\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 13,\n    source_text =  \"{ pokemon R package }\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray80\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # two-row legend\n        legend.box.spacing = unit(0.4, \"cm\"),\n        legend.key.width = unit(1.5, \"cm\"),\n        legend.spacing.x = unit(0.2, \"cm\"),\n \n        legend.box = \"horizontal\",\n        legend.box.just = \"left\",\n        \n        # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- pokemon_clean |&gt;\n    ggplot(aes(x = type_1, y = speed, color = type_1)) +\n    # Geoms\n    geom_beeswarm(cex = 1, size = 1.2, alpha = 0.75, shape = 21, na.rm = TRUE) +\n    stat_summary(   # mean indicator\n        fun = mean, \n        geom = \"point\", \n        shape = 18, \n        size = 3, \n        color =  alpha(colors$palette[1], 0.9),\n    ) +\n    geom_hline(\n        yintercept = 100, \n        linetype = \"dashed\",\n        color = \"darkgray\", \n        ) +\n    # Annotate\n    annotate(\n        \"text\", x = length(ordered_types), y = 102, \n        label = \"Fast (Speed ≥ 100)\", hjust = 0, vjust = -2,\n        size = 3, color = \"dimgray\"\n        ) +\n    annotate(\n        \"point\",  \n        x = \"steel\", \n        y = 140, \n        shape = 18, \n        size = 4, \n        color = alpha(colors$palette[1], 0.9)\n    ) +\n    annotate(\n        \"text\",\n        x = \"steel\", y = 141, label = \"  = Mean\",\n        color =  alpha(colors$palette[1], 0.9),\n        size = 4.2,\n        angle = 0,\n        hjust = 0,\n        fontface = \"bold\"\n    ) +\n    \n    # Scales\n    scale_color_manual(values = colors$palette) +\n    coord_flip() +\n    # labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        x = NULL,\n        y = \"Base Speed Stat\"\n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(2),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.85),\n            family = fonts$subtitle,\n            color = alpha(colors$subtitle, 0.9),\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 10)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.65),\n            family = fonts$caption,\n            color = colors$caption,\n            hjust = 0.5,\n            margin = margin(t = 10)\n        )\n    ) \n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot_patchwork(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 13, \n  width = 7,\n  height = 10\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0  ggbeeswarm_0.7.2 here_1.0.1       glue_1.8.0      \n [5] scales_1.3.0     skimr_2.1.5      janitor_2.2.0    showtext_0.9-7  \n [9] showtextdb_3.0   sysfonts_0.8.9   ggtext_0.1.2     lubridate_1.9.3 \n[13] forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4      purrr_1.0.2     \n[17] readr_2.1.5      tidyr_1.3.1      tibble_3.2.1     ggplot2_3.5.1   \n[21] tidyverse_2.0.0  pacman_0.5.1    \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   vipor_0.4.7        farver_2.1.2       fastmap_1.2.0     \n [5] gh_1.4.1           digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   \n [9] rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4       \n[13] tools_4.4.0        utf8_1.2.4         yaml_2.3.10        knitr_1.49        \n[17] labeling_0.4.3     htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0        \n[21] xml2_1.3.6         repr_1.1.7         tidytuesdayR_1.1.2 withr_3.0.2       \n[25] grid_4.4.0         fansi_1.0.6        colorspace_2.1-1   gitcreds_0.1.2    \n[29] cli_3.6.3          rmarkdown_2.29     crayon_1.5.3       generics_0.1.3    \n[33] rstudioapi_0.17.1  tzdb_0.4.0         commonmark_1.9.2   parallel_4.4.0    \n[37] ggplotify_0.1.2    base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8 \n[41] jsonlite_1.8.9     gridGraphics_0.5-1 hms_1.1.3          bit64_4.5.2       \n[45] beeswarm_0.4.0     systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1   \n[49] codetools_0.2-20   stringi_1.8.4      gtable_0.3.6       munsell_0.5.1     \n[53] pillar_1.9.0       rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1          \n[57] httr2_1.0.6        rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1    \n[61] markdown_1.13      gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3        \n[65] Rcpp_1.0.13-1      svglite_2.1.3      xfun_0.49          fs_1.6.5          \n[69] pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_13.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 13: Pokemon\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_16.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_16.html",
    "title": "April 20th Fatal Crashes Compared to Yearly Average (1992-2016)",
    "section": "",
    "text": "Figure 1: Bar chart showing the difference between April 20th fatal crashes and yearly averages from 1992 to 2016. Orange bars represent years above average (9 years total), with 2007 showing the highest peak at +57. Blue bars represent years below average (16 years total), with 2004’s lowest point at -60. The visualization suggests no consistent pattern of increased crashes on April 20th compared to yearly averages.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n     tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    janitor,        # Simple Tools for Examining and Cleaning Dirty Data\n    skimr,          # Compact and Flexible Summaries of Data\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    here,           # A Simpler Way to Find Your Files\n    camcorder       # Record Your Plot History \n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  8,\n    height =  8,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n\n\n2. Read in the Data\n\nShow codett &lt;- tidytuesdayR::tt_load(2025, week = 16) \n\ndaily_accidents &lt;- tt$daily_accidents |&gt; clean_names()\n# daily_accidents_420 &lt;- tt$daily_accidents_420 |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n\n3. Examine the Data\n\nShow codeglimpse(daily_accidents)\nskim(daily_accidents)\n\n\n4. Tidy Data\n\nShow code### |-  tidy data ----\n# Add date components to daily accidents data  \ndaily_accidents_tidy &lt;- daily_accidents |&gt;\n    mutate(\n        year = year(date),\n        month = month(date),\n        day = day(date),\n        is_april_20 = (month == 4 & day == 20)\n    )\n\n# Calculate yearly averages\nyearly_averages &lt;- daily_accidents_tidy |&gt;\n    group_by(year) |&gt;\n    summarize(\n        yearly_avg = mean(fatalities_count),\n        .groups = \"drop\"\n    )\n\n# Extract April 20th data for each year\napril_20_yearly &lt;- daily_accidents_tidy |&gt;\n    filter(is_april_20) |&gt;\n    select(year, fatalities_count) |&gt;\n    arrange(year) |&gt;\n    # Join with yearly averages\n    left_join(yearly_averages, by = \"year\") |&gt;\n    # Calculate difference from yearly average\n    mutate(\n        diff_from_avg = fatalities_count - yearly_avg,\n        above_avg = diff_from_avg &gt; 0\n    )\n\n# Find key statistics for annotations\nmax_year_data &lt;- april_20_yearly |&gt; \n    filter(diff_from_avg == max(diff_from_avg))\nmax_year &lt;- max_year_data$year\nmax_diff &lt;- max_year_data$diff_from_avg\n\nmin_year_data &lt;- april_20_yearly |&gt; \n    filter(diff_from_avg == min(diff_from_avg))\nmin_year &lt;- min_year_data$year\nmin_diff &lt;- min_year_data$diff_from_avg\n\n# Count years above and below average\nn_above &lt;- sum(april_20_yearly$above_avg)\nn_below &lt;- nrow(april_20_yearly) - n_above\n\n\n5. Visualization Parameters\n\nShow code### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"FALSE\" = \"#3A6CA4\", \"TRUE\" = \"#F05E23\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"April 20th Fatal Crashes Compared to Yearly Average (1992-2016)\")\nsubtitle_text &lt;- str_glue(\"Difference between April 20th fatalities and the yearly average for each year\")\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n    tt_year = 2025,\n    tt_week = 16,\n    source_text =  \"420 raw-data via OSF\" \n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n    base_theme,\n    theme(\n        # Text styling \n        plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n        plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n        \n        # Axis elements\n        axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n        axis.text = element_text(color = colors$text, size = rel(0.7)),\n        \n        # Grid elements\n        panel.grid.minor = element_line(color = \"gray50\", linewidth = 0.05),\n        panel.grid.major = element_line(color = \"gray50\", linewidth = 0.02),\n        \n        # Legend elements\n        legend.position = \"plot\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n        legend.text = element_text(family = fonts$text, size = rel(0.7)),\n        \n        # two-row legend\n        legend.box.spacing = unit(0.4, \"cm\"),\n        legend.key.width = unit(1.5, \"cm\"),\n        legend.spacing.x = unit(0.2, \"cm\"),\n \n        legend.box = \"horizontal\",\n        legend.box.just = \"left\",\n        \n        # Plot margins \n        plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n    )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n\n\n6. Plot\n\nShow code### |-  Plot  ----\np &lt;- ggplot(april_20_yearly, aes(x = year, y = diff_from_avg, fill = above_avg)) +\n    # Geoms\n    geom_col(width = 0.7) +\n    geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\", linewidth = 0.5) +\n    # Annotate\n    annotate(\n        \"text\", x = max_year, y = max_diff + 7, \n        label = paste0(\"Peak: \", max_year, \" (+\", round(max_diff), \")\"),\n        color = colors$palette[2], fontface = \"bold\", size = 3.5\n        ) +\n    annotate(\n        \"text\", x = min_year, y = min_diff - 7, \n        label = paste0(\"Low: \", min_year, \" (\", round(min_diff), \")\"),\n        color = colors$palette[1], fontface = \"bold\", size = 3.5\n        ) +\n    annotate(\n        \"text\", x = max(april_20_yearly$year) - 3, y = 43, \n        label = paste0(n_above, \" years above avg\"),\n        color = colors$palette[2], size = 3.5, hjust = 1\n        ) +\n    annotate(\n        \"text\", x = max(april_20_yearly$year) - 3, y = -43, \n        label = paste0(n_below, \" years below avg\"),\n        color = colors$palette[1], size = 3.5, hjust = 1\n        ) +\n    # Scales\n    scale_fill_manual(\n        values = colors$palette,\n        labels = c(\"Below Average\", \"Above Average\")\n    ) +\n    scale_x_continuous(\n        breaks = seq(\n            min(april_20_yearly$year),\n            max(april_20_yearly$year), \n            by = 5)\n        ) +\n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        x = NULL,\n        y = \"Difference from Yearly Average\",\n    ) +\n    # Theme\n    theme(\n        plot.title = element_text(\n            size = rel(1.4),\n            family = fonts$title,\n            face = \"bold\",\n            color = colors$title,\n            lineheight = 1.1,\n            margin = margin(t = 5, b = 5)\n        ),\n        plot.subtitle = element_text(\n            size = rel(0.85),\n            family = fonts$subtitle,\n            color = alpha(colors$subtitle, 0.9),\n            lineheight = 1.2,\n            margin = margin(t = 5, b = 10)\n        ),\n        plot.caption = element_markdown(\n            size = rel(0.65),\n            family = fonts$caption,\n            color = colors$caption,\n            hjust = 0.5,\n            margin = margin(t = 10)\n        )\n    )  \n\n\n7. Save\n\nShow code### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 16, \n  width = 8,\n  height = 8\n)\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 here_1.0.1      glue_1.8.0      scales_1.3.0   \n [5] skimr_2.1.5     janitor_2.2.0   showtext_0.9-7  showtextdb_3.0 \n [9] sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0  \n[13] stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2     readr_2.1.5    \n[17] tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n[21] pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    lifecycle_1.0.4    farver_2.1.2      \n[17] compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1      repr_1.1.7        \n[21] codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10       \n[25] crayon_1.5.3       pillar_1.9.0       magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      labeling_0.4.3    \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2       \n[45] timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2    \n[49] bit_4.5.0          ragg_1.3.3         hms_1.1.3          evaluate_1.0.1    \n[53] knitr_1.49         markdown_1.13      rlang_1.1.6        gridtext_0.1.5    \n[57] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         vroom_1.6.5       \n[61] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[65] systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_16.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 16: Fatal Car Crashes on 4/20\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_18.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_18.html",
    "title": "Analysis of 1,041 Terminated NSF Grants Totaling $613.26M",
    "section": "",
    "text": "Figure 1: Scatter plot showing analysis of 1,041 terminated NSF grants totaling $613.26M, representing 1293.5 years of lost research time. The visualization is divided into four quadrants showing different grant clusters: Early-stage Mega Grants (51 grants, 66% complete, 547 days left), Early-stage High-value Grants (382 grants, 81% complete, 236 days left), Late-stage High-value Grants (353 grants, 32% complete, 865 days left), and Late-stage Mid-value Grants (255 grants, 86% complete, 192 days left). Each cluster is represented in a different color (orange, teal, purple, and pink), with point size indicating days remaining. The y-axis shows the funding amount on a logarithmic scale, and the x-axis shows the percentage of grants completed.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse, # Easily Install and Load the 'Tidyverse'\n  ggtext,    # Improved Text Rendering Support for 'ggplot2'\n  showtext,  # Using Fonts More Easily in R Graphs\n  janitor,   # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,     # Compact and Flexible Summaries of Data\n  scales,    # Scale Functions for Visualization\n  glue,      # Interpreted String Literals\n  here,      # A Simpler Way to Find Your Files\n  cluster,   # \"Finding Groups in Data\": Cluster Analysis Extended Rousseeuw et al.\n  camcorder  # Record Your Plot History\n    )\n})\n\n### |- figure size ----\ngg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 18)\n\nnsf_terminations_raw &lt;- tt$nsf_terminations |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(nsf_terminations_raw)\nskim(nsf_terminations_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\nnsf_terminations &lt;- nsf_terminations_raw |&gt;\n  mutate(\n    # Calculate how long the grant had been running before termination\n    days_active = as.numeric(termination_letter_date - nsf_startdate),\n    months_active = days_active / 30.44,\n    years_active = months_active / 12,\n\n    # Calculate how much time was cut short\n    days_remaining = as.numeric(nsf_expected_end_date - termination_letter_date),\n    months_remaining = days_remaining / 30.44, # 365.25/12 = 30.4375. 365.25 days per year to account for leap years\n    years_remaining = months_remaining / 12,\n\n    # Calculate percentage of grant period completed\n    grant_duration_days = as.numeric(nsf_expected_end_date - nsf_startdate),\n    pct_completed = days_active / grant_duration_days * 100,\n\n    # Round dollar amounts\n    funding_millions = usaspending_obligated / 1000000,\n\n    # Create date variables\n    term_year = year(termination_letter_date),\n    term_month = month(termination_letter_date),\n    term_day = day(termination_letter_date),\n  )\n\nset.seed(42) # seed for reproducibility\nk &lt;- 4 # Number of clusters\n\n# Prepare data for clustering\ncluster_data &lt;- nsf_terminations |&gt;\n  select(\n    usaspending_obligated, days_active, days_remaining,\n    pct_completed, in_cruz_list\n  ) |&gt;\n  mutate(\n    in_cruz_list = as.numeric(in_cruz_list),\n    # Scale the data\n    across(where(is.numeric), ~ scale(.x)[, 1]),\n    # Fill in missing values with mean (0 after scaling)\n    across(everything(), ~ ifelse(is.na(.x), 0, .x))\n  )\n\n# Perform k-means clustering\nkmeans_result &lt;- kmeans(cluster_data, centers = k, nstart = 25)\n\n# Add cluster assignments back to the original data\nnsf_clusters &lt;- nsf_terminations |&gt;\n  mutate(\n    # Numeric clusters for calculation\n    cluster_num = kmeans_result$cluster,\n    # Descriptive labels\n    cluster = case_when(\n      kmeans_result$cluster == 1 ~ \"Early-stage High-value Grants\",\n      kmeans_result$cluster == 2 ~ \"Late-stage High-value Grants\",\n      kmeans_result$cluster == 3 ~ \"Early-stage Mega Grants\",\n      kmeans_result$cluster == 4 ~ \"Late-stage Mid-value Grants\",\n      TRUE ~ paste(\"Cluster\", kmeans_result$cluster)\n    )\n  )\n\n# Create detailed summary of each cluster for the table and titles\ncluster_summary &lt;- nsf_clusters |&gt;\n  group_by(cluster, cluster_num) |&gt;\n  summarize(\n    count = n(),\n    pct_of_total = n() / nrow(nsf_clusters) * 100,\n    total_funding = sum(usaspending_obligated, na.rm = TRUE),\n    avg_funding = mean(usaspending_obligated, na.rm = TRUE),\n    median_funding = median(usaspending_obligated, na.rm = TRUE),\n    avg_days_active = mean(days_active, na.rm = TRUE),\n    avg_days_remaining = mean(days_remaining, na.rm = TRUE),\n    avg_pct_completed = mean(pct_completed, na.rm = TRUE),\n    pct_cruz_list = mean(in_cruz_list == TRUE, na.rm = TRUE) * 100,\n    .groups = \"drop\"\n  ) |&gt;\n  # Format values for presentation\n  mutate(\n    # Formatted values for tables\n    formatted_count = scales::comma(count),\n    formatted_pct = paste0(round(pct_of_total, 1), \"%\"),\n    formatted_total = scales::dollar(total_funding),\n    formatted_avg = scales::dollar(avg_funding, accuracy = 1),\n    formatted_median = scales::dollar(median_funding),\n    formatted_days_remaining = round(avg_days_remaining, 0),\n    formatted_pct_completed = paste0(round(avg_pct_completed), \"%\"),\n    formatted_cruz = paste0(round(pct_cruz_list, 1), \"%\"),\n\n    # Create concise strip labels with key stats\n    # Format: Main title + count | Avg $ | Completion % | Days left\n    concise_label = paste0(\n      cluster, \"\\n\",\n      count, \" grants | Avg: \", scales::dollar(avg_funding, scale = 1 / 1000), \"K | \",\n      round(avg_pct_completed), \"% done | \",\n      round(avg_days_remaining), \" days left\"\n    )\n  )\n\n# Calculate overall totals for data-driven title\noverall_stats &lt;- nsf_clusters |&gt;\n  summarize(\n    total_count = n(),\n    total_funding = sum(usaspending_obligated, na.rm = TRUE),\n    avg_funding = mean(usaspending_obligated, na.rm = TRUE),\n    total_days_remaining = sum(days_remaining, na.rm = TRUE) / 365.25 # Convert to years\n  ) |&gt;\n  mutate(\n    # Format for title\n    formatted_total = scales::dollar(total_funding, scale = 1 / 1000000, suffix = \"M\"),\n    formatted_count = scales::comma(total_count),\n    formatted_years = round(total_days_remaining, 1)\n  )\n\n# Create enhanced data for plotting with strip labels from summary\nnsf_clusters_plot &lt;- nsf_clusters |&gt;\n  left_join(\n    cluster_summary |&gt; select(cluster, concise_label),\n    by = \"cluster\"\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"Early-stage High-value Grants\" = \"#1CB3A6\",\n    \"Late-stage High-value Grants\" = \"#5E60CE\",\n    \"Early-stage Mega Grants\" = \"#FF8500\",\n    \"Late-stage Mid-value Grants\" = \"#FF5A8C\"\n  )\n)\n\n### |-  custom facet ordering ----\n### |-  Add ordering to existing cluster_summary ----\n# First, add an ordering field to the existing data\ncluster_summary &lt;- cluster_summary |&gt;\n  mutate(\n    # Create a new column for custom ordering\n    cluster_order = case_when(\n      cluster == \"Early-stage Mega Grants\" ~ 1,\n      cluster == \"Early-stage High-value Grants\" ~ 2,\n      cluster == \"Late-stage High-value Grants\" ~ 3,\n      cluster == \"Late-stage Mid-value Grants\" ~ 4,\n      TRUE ~ 5\n    )\n  )\n\n### |-  Generate formatted strip labels with richtext ----\n# Create richtext labels with different formatting for title and details\ncluster_summary &lt;- cluster_summary |&gt;\n    mutate(\n        # Keep the ordering from before\n        cluster_order = case_when(\n            cluster == \"Early-stage Mega Grants\" ~ 1,\n            cluster == \"Early-stage High-value Grants\" ~ 2,\n            cluster == \"Late-stage High-value Grants\" ~ 3,\n            cluster == \"Late-stage Mid-value Grants\" ~ 4,\n            TRUE ~ 5\n        ),\n        \n        # Create a two-part rich text label with different styling\n        richtext_label = paste0(\n            # First line (cluster name) - larger and bold\n            \"&lt;span style='font-size:14pt; font-weight:bold;'&gt;\", \n            cluster, \n            \"&lt;/span&gt;&lt;br&gt;\",\n            # Second line (details) - smaller and regular weight\n            \"&lt;span style='font-size:8pt; font-weight:normal; color:gray40;'&gt;\",\n            count, \" grants | Avg: \", scales::dollar(avg_funding, scale = 1/1000), \"K | \", \n            round(avg_pct_completed), \"% done | \", \n            round(avg_days_remaining), \" days left\",\n            \"&lt;/span&gt;\"\n        )\n    )\n\n# Update the plot data with formatted labels\nnsf_clusters_plot &lt;- nsf_clusters |&gt;\n    left_join(\n        cluster_summary |&gt; select(cluster, richtext_label, cluster_order),\n        by = \"cluster\"\n    ) |&gt;\n    # Convert to factor with custom ordering\n    mutate(\n        richtext_label = factor(richtext_label, \n                                levels = cluster_summary |&gt; \n                                    arrange(cluster_order) |&gt; \n                                    pull(richtext_label))\n    )\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\n  \"Analysis of \", overall_stats$formatted_count,\n  \" Terminated NSF Grants Totaling \", overall_stats$formatted_total\n)\nsubtitle_text &lt;- str_glue(\n  \"Representing \", overall_stats$formatted_years,\n  \" years of lost research time across four distinct patterns of termination\"\n)\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 18,\n  source_text =  \"Grant Watch NSF Terminations Dataset\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling\n    plot.title = element_text(face = \"bold\", family = fonts$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n\n    # Axis elements\n    axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_line(color = \"gray80\", linewidth = 0.05),\n    panel.grid.major = element_line(color = \"gray80\", linewidth = 0.05),\n\n    # Legend elements\n    legend.position = \"top\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Style facet labels\n    strip.text = element_text(size = rel(0.75), face = \"bold\", \n                              color = colors$title, margin = margin(b = 8, t = 8)),\n\n    # Add spacing\n    panel.spacing = unit(1.2, \"lines\"),\n    strip.background = element_rect(fill = \"#e0e0e0\", color = NA),\n\n    # Plot margins\n    plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n  )\n )\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |-  Plot  ----\np &lt;- ggplot(\n  nsf_clusters_plot,\n  aes(x = pct_completed, y = usaspending_obligated, color = cluster, size = days_remaining)\n  ) +\n  # Geoms\n  geom_point(alpha = 0.5) +\n  # Scales\n  scale_y_log10(labels = label_dollar()) +\n  scale_color_manual(values = colors$palette) +\n  # Improved size scale with meaningful breaks\n  scale_size_continuous(\n    breaks = c(100, 500, 1000, 1500),\n    labels = c(\"100\", \"500\", \"1000\", \"1500\"),\n    range = c(0.5, 5)\n  ) +\n  # Facets with ordered layout\n    facet_wrap(~ richtext_label, nrow = 2) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Percentage of Grant Completed\",\n    y = \"Funding Amount (USD, log scale)\",\n    size = \"Days Remaining\",\n  ) +\n  # Legend\n  guides(\n    # Remove the color legend\n    color = \"none\",\n    size = guide_legend(\n      title.position = \"top\",\n      override.aes = list(\n        alpha = 1,\n        stroke = 1,\n        fill = NA,\n        color = \"black\"\n      ),\n      direction = \"horizontal\",\n      keywidth = unit(1, \"lines\"),\n      keyheight = unit(1, \"lines\"),\n      title.hjust = 0.5,\n      label.position = \"bottom\"\n    )\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    legend.key = element_rect(fill = NA),\n    strip.text = element_markdown(\n        lineheight = 1.2,\n        padding = margin(5, 5, 5, 5)\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 18, \n  width = 10,\n  height = 10\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] camcorder_0.1.0 cluster_2.1.6   here_1.0.1      glue_1.8.0     \n [5] scales_1.3.0    skimr_2.1.5     janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    lifecycle_1.0.4    farver_2.1.2      \n[17] compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1      repr_1.1.7        \n[21] codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10       \n[25] crayon_1.5.3       pillar_1.9.0       magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      labeling_0.4.3    \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2       \n[45] timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2    \n[49] bit_4.5.0          ragg_1.3.3         hms_1.1.3          evaluate_1.0.1    \n[53] knitr_1.49         markdown_1.13      rlang_1.1.6        gridtext_0.1.5    \n[57] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         vroom_1.6.5       \n[61] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[65] systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_18.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\n\nData Sources:\n\nTidyTuesday 2025 Week 18: National Science Foundation Grant Terminations under the Trump Administration\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_20.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_20.html",
    "title": "Sydney Beaches: Water Quality Reliability",
    "section": "",
    "text": "Figure 1: Sydney Beaches: Water Quality Reliability chart showing the percentage of water samples meeting good standards (≤40 CFU/100ml) across different beach types. The chart is divided into three sections: Harbor/Bay/River Locations, Ocean Beaches, and Other Swimming Locations. Most ocean beaches exceed the 80% reliability threshold (shown by a dashed line), with Avalon reaching 97%. Harbor locations show mixed results, with many falling below the safe swimming threshold. The visualization highlights the contrast between consistently clean beaches and those that struggle to meet water quality standards.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  scales,        # Scale Functions for Visualization\n  glue           # Interpreted String Literals\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 20)\n\nwater_quality_raw &lt;- tt$water_quality |&gt; clean_names()\nweather_raw &lt;- tt$weather |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(water_quality_raw)\nglimpse(weather_raw)\nskimr::skim(water_quality_raw)\nskimr::skim(weather_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\n# Process and categorize raw water quality data\nwater_quality_processed &lt;- water_quality_raw |&gt;\n    mutate(\n        bacteria_category = case_when(\n            enterococci_cfu_100ml &lt;= 40 ~ \"Good (&lt;= 40 CFU)\",\n            enterococci_cfu_100ml &gt; 40 & enterococci_cfu_100ml &lt;= 200 ~ \"Moderate (41-200 CFU)\",\n            enterococci_cfu_100ml &gt; 200 ~ \"Poor (&gt; 200 CFU)\",\n            TRUE ~ \"Unknown\"\n        ),\n        bacteria_category = factor(\n            bacteria_category,\n            levels = c(\"Good (&lt;= 40 CFU)\", \"Moderate (41-200 CFU)\", \"Poor (&gt; 200 CFU)\", \"Unknown\")\n        )\n    )\n\n# Summarize water quality at the beach level\nbeach_reliability &lt;- water_quality_processed |&gt;\n    group_by(swim_site, region) |&gt;\n    summarise(\n        total_samples = n(),\n        good_samples = sum(enterococci_cfu_100ml &lt;= 40, na.rm = TRUE),\n        reliability_index = good_samples / total_samples * 100,\n        .groups = \"drop\"\n    ) |&gt;\n    filter(total_samples &gt;= 50) |&gt;\n    mutate(\n        reliability_rating = case_when(\n            is.na(reliability_index) ~ \"Unknown\",\n            reliability_index &gt;= 90 ~ \"Excellent (≥90%)\",\n            reliability_index &gt;= 80 ~ \"Very Good (80-89%)\",\n            reliability_index &gt;= 70 ~ \"Good (70-79%)\",\n            reliability_index &gt;= 60 ~ \"Moderate (60-69%)\",\n            reliability_index &lt; 60 ~ \"Needs Improvement (&lt;60%)\"\n        ),\n        reliability_rating = factor(\n            reliability_rating,\n            levels = c(\n                \"Excellent (≥90%)\", \"Very Good (80-89%)\", \"Good (70-79%)\",\n                \"Moderate (60-69%)\", \"Needs Improvement (&lt;60%)\"\n            )\n        )\n    )\n\n# Classify beaches and select top/bottom per type\nbeach_by_type &lt;- beach_reliability |&gt;\n    mutate(\n        beach_type = case_when(\n            grepl(\"Harbour|Harbor|Bay|River|Cove\", swim_site) ~ \"Harbor/Bay/River\",\n            grepl(\"Beach|Ocean\", swim_site) ~ \"Ocean Beach\",\n            TRUE ~ \"Other\"\n        )\n    ) |&gt;\n    group_by(beach_type) |&gt;\n    mutate(rank_in_type = min_rank(desc(reliability_index))) |&gt;\n    filter(rank_in_type &lt;= 5 | rank_in_type &gt; n() - 5) |&gt;\n    mutate(\n        status = if_else(reliability_index &gt;= 80, \"Meeting Standard\", \"Below Standard\"),\n        short_name = swim_site |&gt;\n            str_replace(\" Beach$\", \"\") |&gt;\n            str_replace(\" Harbour$\", \"\") |&gt;\n            str_replace(\" Bay$\", \"\") |&gt;\n            str_replace(\" Baths$\", \"\") |&gt;\n            str_replace(\" Reserve$\", \"\") |&gt;\n            str_replace(\" Pool$\", \"\"),\n        short_name = reorder(short_name, reliability_index)\n    )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"Meeting Standard\" = \"#1b9e77\", \n        \"Below Standard\" = \"#d95f02\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Sydney Beaches: Water Quality Reliability\")\n\nsubtitle_text &lt;- str_glue(\n    \"Reliability Index: % of samples meeting 'good' standards (≤ 40 CFU/100ml)\\n\",\n    \"80% reliability is the recommended threshold for safe swimming\\n\",\n    \"Showing top and bottom 5 beaches by type\"\n)\n\n# Create caption\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 20,\n  source_text =  \"BeachwatchNSW, Open-Meteo\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"red\", linewidth = 0.05),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n\n    # Style facet labels\n    strip.text = element_text(size = rel(0.75), face = \"bold\",\n                              color = colors$title, margin = margin(b = 5, t = 5)\n    ),\n\n    # Add spacing\n    panel.spacing = unit(1.1, \"lines\"),\n    strip.background = element_rect(fill = \"#e0e0e0\", color = NA),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Final plot -----\np &lt;- ggplot(beach_by_type, aes(x = reliability_index, y = short_name)) +\n  # Geoms\n  geom_col(aes(fill = status), width = 0.7) +\n  geom_text(aes(label = sprintf(\"%d%%\", round(reliability_index))),\n    hjust = -0.2,\n    size = 3.5\n  ) +\n  geom_text(\n      data = tibble(\n          beach_type = \"Harbor/Bay/River\",\n          status = c(\"Meeting Standard\", \"Below Standard\"),\n          x = 95,\n          y = c(7, 4),  \n          label = c(\"Meeting Standard\", \"Below Standard\")\n      ),\n      aes(x = x, y = y, label = label, color = status),\n      hjust = 0,\n      size = 4,\n      fontface = \"bold\",\n      inherit.aes = FALSE\n  ) +\n  geom_vline(xintercept = 80, linetype = \"dashed\", color = \"gray40\", linewidth = 0.3) +\n\n  # Scales\n  scale_fill_manual(values = colors$palette) +\n  scale_color_manual(values = colors$palette) +\n  scale_x_continuous(\n    limits = c(0, 125),\n    breaks = c(0, 20, 40, 60, 80, 100),\n    labels = c(\"0%\", \"20%\", \"40%\", \"60%\", \"80%\", \"100%\")\n  ) +\n  # Facets\n  facet_wrap(~beach_type,\n    scales = \"free_y\", ncol = 1,\n    labeller = labeller(beach_type = c(\n      \"Harbor/Bay/River\" = \"Harbor/Bay/River Locations\",\n      \"Ocean Beach\" = \"Ocean Beaches\",\n      \"Other\" = \"Other Swimming Locations\"\n    ))\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = NULL,\n    fill = \"Status\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.85),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    legend.key = element_rect(fill = NA),\n    strip.text = element_markdown(\n      lineheight = 1.2,\n      padding = margin(5, 5, 5, 5)\n    )\n  ) \n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 20, \n  width = 8,\n  height = 10\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    skimr_2.1.5        lifecycle_1.0.4   \n[17] farver_2.1.2       compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0   \n[29] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[33] stringi_1.8.4      rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] grid_4.4.0         colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3    \n[41] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3    \n[45] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2\n[49] gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3         hms_1.1.3         \n[53] evaluate_1.0.1     knitr_1.49         markdown_1.13      rlang_1.1.6       \n[57] gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3        \n[61] vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[65] R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_20.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 20: Water Quality at Sydney Beaches\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Steven Ponce",
    "section": "",
    "text": "About Me\n\nWelcome to my personal site where I share Data Visualizations, R Code, and more.\nI am a Senior Manager in the Centralized Monitoring group at Bristol Myers Squibb, NJ, USA.\n\nInterest\nData Science • Data Analysis • Data Visualization • Business Intelligence • #rstats • #R programming\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/standalone_visualizations/sa_2024-10-27.html",
    "href": "projects/standalone_visualizations/sa_2024-10-27.html",
    "title": "The Rise and Fall of Bob’s Burgers Ratings Across Seasons",
    "section": "",
    "text": "Figure 1: Line chart and heatmap showing IMDb ratings for Bob’s Burgers across seasons and episodes.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  colorspace,        # A Toolbox for Manipulating and Assessing Colors and Palettes\n  patchwork,         # The Composer of Plots\n  bobsburgersR       # Bob's Burgers Datasets for Data Visualization\n)  \n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nbobsburgersR::imdb_wikipedia_data\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(imdb_wikipedia_data)\nskim(imdb_wikipedia_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |- heatmap data ----\nheatmap_data &lt;- imdb_wikipedia_data |&gt;\n  mutate(\n    season = factor(season),\n    episode = factor(episode, levels = rev(unique(episode))),\n  ) |&gt;\n  filter(!is.na(rating))\n\n### |- heatmap data ----\nlinechart_data &lt;- imdb_wikipedia_data |&gt;\n  group_by(season) |&gt;\n  summarize(\n    median_rating = median(rating, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(season = factor(season))\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"    \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"    \ncol_palette  &lt;- c(\"#F9F6FB\", \"#F0DDF1\", \"#D6B9E3\", \"#B78FCA\", \"#9D5CAA\", \"#684671\")\n\n### |-  titles and caption ----\n\n# icons\ntt &lt;- str_glue(\"Source: {{bobsburgersR}}\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\n\n# text\ntitle_text    &lt;- str_glue(\"The Rise and Fall of Bob's Burgers Ratings Across Seasons\")\nsubtitle_text &lt;- str_glue(\"An exploration of how episode and season ratings fluctuate over the course of 14 seasons.\")\ncaption_text  &lt;- str_glue(\"{li} stevenponce &bull; {gh} poncest &bull; #rstats #ggplot2 &bull; {tt}\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"subtitle\")\nfont_add_google(\"Merriweather Sans\", regular.wt = 400, family = \"text\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = 'plot',\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 20, b = 10, l = 20),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.8), color = text_col, family = \"text\"),\n  panel.grid.major.y    = element_line(color = \"#d3d3d3\", linewidth = 0.5), \n  panel.grid.major.x    = element_blank(), \n  panel.grid.minor      = element_blank()\n)  \n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n### |-  line chart ----\nline_chart &lt;- linechart_data |&gt;\n  ggplot(aes(x = season, y = median_rating, group = 1)) +\n\n  # Geoms\n  geom_step(color = \"#6a1b9a\", linewidth = 1.5) +\n  geom_point(color = \"#8e24aa\", size = 4, shape = 20) +\n  geom_text(aes(label = format(round(median_rating, 1), nsmall = 1)),\n    hjust = -0.2, vjust = -0.8, size = 4.5, color = \"#6a1b9a\", fontface = \"bold\"\n  ) +\n\n  # Scales\n  scale_x_discrete() +\n  scale_y_continuous(\n    labels = scales::label_number(accuracy = 0.1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = NULL,\n    y = \"Median IMDb Rating\",\n  ) +\n\n  # Theme\n  theme(\n    axis.text.x = element_blank()\n  )\n\n\n### |-  heatmap plot ----\nheatmap_plot &lt;- heatmap_data |&gt;\n  ggplot(aes(x = season, y = episode, fill = rating)) +\n\n  # Geoms\n  geom_tile(linewidth = 0.25, color = \"grey20\") +\n  geom_text(aes(label = round(rating, 1)),\n    color = \"black\",\n    size = 3,\n    fontface = \"bold\"\n  ) +\n\n  # Scales\n  scale_x_discrete(position = \"top\") +\n  scale_y_discrete() +\n  scale_fill_stepsn(\n    colors = col_palette,\n    breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    transform = \"identity\",\n    guide = guide_colorsteps(\n      barheight = unit(20, \"lines\"),\n      barwidth = unit(.75, \"lines\")\n    )\n  ) +\n  coord_cartesian(clip = \"off\") +\n\n  # Labs\n  labs(\n    x = \"Season\",\n    y = \"Episode\",\n  ) +\n\n  # Theme\n  theme(\n    legend.position    = \"right\",\n    legend.title       = element_text(size = 10, face = \"bold\"),\n    legend.text        = element_text(size = 8),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid         = element_blank(),\n  )\n\n\n### |-  combined plots ----  \ncombined_plot &lt;- (line_chart / heatmap_plot) +\n  patchwork::plot_layout(\n    heights = c(0.5, 1.25),\n  ) +\n\n  # Labs\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text\n  ) &\n\n  # Theme\n  theme(\n    plot.margin  = margin(10, 20, 10, 20),\n    plot.title   = element_markdown(\n      size       = rel(1.5),\n      family     = \"title\",\n      face       = \"bold\",\n      color      = title_col,\n      lineheight = 1.1,\n      margin     = margin(t = 10, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size       = rel(0.85),\n      family     = \"subtitle\",\n      color      = subtitle_col,\n      lineheight = 1.1,\n      margin     = margin(t = 5, b = 15)\n    ),\n    plot.caption = element_markdown(\n      size       = rel(0.65),\n      family     = \"caption\",\n      color      = caption_col,\n      lineheight = 1.1,\n      hjust      = 0.5,\n      halign     = 0.5,\n      margin     = margin(t = 5, b = 5)\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \n\n# Save the plot as PNG\nggsave(\n  filename = here::here(\"projects/standalone_visualizations/sa_2024-10-27.png\"), \n  plot = combined_plot,\n  width = 8, height = 12, units = \"in\", dpi = 320\n)\n\n### |-  plot thumbnail----  \nmagick::image_read(here::here(\"projects/standalone_visualizations/sa_2024-10-27.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"projects/standalone_visualizations/thumbnails/sa_2024-10-27.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] bobsburgersR_0.0.0.9000 patchwork_1.3.0         colorspace_2.1-1       \n [4] glue_1.8.0              scales_1.3.0            skimr_2.1.5            \n [7] janitor_2.2.0           showtext_0.9-7          showtextdb_3.0         \n[10] sysfonts_0.8.9          ggtext_0.1.2            lubridate_1.9.3        \n[13] forcats_1.0.0           stringr_1.5.1           dplyr_1.1.4            \n[16] purrr_1.0.2             readr_2.1.5             tidyr_1.3.1            \n[19] tibble_3.2.1            ggplot2_3.5.1           tidyverse_2.0.0        \n[22] pacman_0.5.1           \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    curl_6.0.0       \n [9] fansi_1.0.6       pkgconfig_2.0.3   lifecycle_1.0.4   compiler_4.4.0   \n[13] farver_2.1.2      textshaping_0.4.0 munsell_0.5.1     repr_1.1.7       \n[17] codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1 yaml_2.3.10      \n[21] pillar_1.9.0      magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1 \n[25] digest_0.6.37     stringi_1.8.4     labeling_0.4.3    rprojroot_2.0.4  \n[29] fastmap_1.2.0     grid_4.4.0        here_1.0.1        cli_3.6.4        \n[33] magrittr_2.0.3    base64enc_0.1-3   utf8_1.2.4        withr_3.0.2      \n[37] timechange_0.3.0  rmarkdown_2.29    ragg_1.3.3        hms_1.1.3        \n[41] evaluate_1.0.1    knitr_1.49        markdown_1.13     rlang_1.1.6      \n[45] gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6        renv_1.0.3       \n[49] rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/standalone_visualizations/sa_2024-11-11.html",
    "href": "projects/standalone_visualizations/sa_2024-11-11.html",
    "title": "Bob’s Burgers Episode Fingerprints by Season",
    "section": "",
    "text": "Figure 1: A series of radar charts showing dialogue patterns across 14 seasons of Bob’s Burgers. Each season chart displays metrics including Dialogue Density, Average Length, Sentiment Variance, Unique Words, Question Ratio, and Exclamation Ratio. Light purple polygons represent individual episodes, while dark purple lines show season averages, revealing how dialogue patterns evolved throughout the series.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n\n## 1. LOAD PACKAGES & SETUP ----\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  janitor,           # Simple Tools for Examining and Cleaning Dirty Data\n  skimr,             # Compact and Flexible Summaries of Data\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  bobsburgersR,      # Bob's Burgers Datasets for Data Visualization\n  tidytext,          # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools \n  textdata,          # Download and Load Various Text Datasets \n  patchwork          # The Composer of Plots\n)    \n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  9,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n### |- resolution ----\nshowtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nbobsburgersR::transcript_data\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(transcript_data)\nskim(transcript_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n# Calculate metrics \nepisode_metrics &lt;- transcript_data |&gt;\n  filter(!is.na(dialogue)) |&gt;\n  group_by(season, episode) |&gt;\n  summarise(\n    # Basic dialogue metrics\n    dialogue_density = n() / max(line),\n    avg_length       = mean(str_length(dialogue)),\n    \n    # Sentiment analysis - AFINN Sentiment Lexicon\n    sentiment_variance = dialogue |&gt;\n      tibble(text = _) |&gt;\n      unnest_tokens(word, text) |&gt;\n      inner_join(get_sentiments(\"afinn\"), by = \"word\") |&gt;\n      pull(value) |&gt;\n      var(na.rm = TRUE),\n    \n    # Word and punctuation metrics  \n    unique_words      = dialogue |&gt;\n      str_split(\"\\\\s+\") |&gt;\n      unlist() |&gt;\n      n_distinct(),\n    \n    question_ratio    = mean(str_detect(dialogue, \"\\\\?\")),\n    exclamation_ratio = mean(str_detect(dialogue, \"!\")),\n    \n    .groups = \"drop\"\n  ) |&gt;\n  # Scale all metrics\n  mutate(across(dialogue_density:exclamation_ratio, scale))\n\n\n# Prepare data for visualization \nepisode_metrics_long &lt;- episode_metrics |&gt;\n  pivot_longer(\n    cols = c(dialogue_density:exclamation_ratio),\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) |&gt;\n  mutate(\n    angle = (as.numeric(factor(metric)) - 1) * 2 * pi / 6,\n    hjust = ifelse(angle &lt; pi, 1, 0),\n    metric = case_when(\n      metric == \"dialogue_density\" ~ \"Dialogue\\nDensity\",\n      metric == \"avg_length\" ~ \"Average\\nLength\",\n      metric == \"sentiment_variance\" ~ \"Sentiment\\nVariance\",\n      metric == \"unique_words\" ~ \"Unique\\nWords\",\n      metric == \"question_ratio\" ~ \"Question\\nRatio\",\n      metric == \"exclamation_ratio\" ~ \"Exclamation\\nRatio\"\n    )\n  )\n\n# Filter data to remove empty groups\nepisode_metrics_long &lt;- episode_metrics_long |&gt;\n  filter(!is.na(value)) |&gt;\n  group_by(season) |&gt;\n  filter(n() &gt; 1) |&gt;  \n  ungroup()\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |- plot aesthetics ----\nbkg_col      &lt;- \"#f5f5f2\"  \ntitle_col    &lt;- \"gray20\"           \nsubtitle_col &lt;- \"gray20\"     \ncaption_col  &lt;- \"gray30\"   \ntext_col     &lt;- \"gray20\"   \n\n### |-  titles and caption ----\n# icons\ntt &lt;- str_glue(\"Source: {{bobsburgersR}}\")\nli &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf08c;&lt;/span&gt;\")\ngh &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xf09b;&lt;/span&gt;\")\nbs &lt;- str_glue(\"&lt;span style='font-family:fa6-brands'&gt;&#xe671; &lt;/span&gt;\")\n\n# text\nlight_purple &lt;- str_glue(\"&lt;span style='color:#A374C2'&gt;**Light Purple**&lt;/span&gt;\")\ndark_purple  &lt;- str_glue(\"&lt;span style='color:#8856a7'&gt;**Dark Purple**&lt;/span&gt;\")\n\ntitle_text    &lt;- str_glue(\"Bob's Burgers Episode Fingerprints by Season\")\nsubtitle_text &lt;- str_glue(\"Analyzing dialogue patterns across seasons&lt;br&gt;&lt;br&gt;\n                          **Note:** Metrics are standardized (**z-scores**). { light_purple } polygons represent individual episodes.&lt;br&gt;\n                          { dark_purple } line shows season average.\")\ncaption_text  &lt;- str_glue(\"{li} stevenponce &bull; {gh} poncest &bull; #rstats #ggplot2 &bull; {tt}\")\n\n### |-  fonts ----\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Source Sans Pro\", family = \"subtitle\")\nfont_add_google(\"Source Sans Pro\", family = \"text\")  \nfont_add_google(\"Roboto Mono\", family = \"numbers\")  \nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n\n### |-  plot theme ----\ntheme_set(theme_minimal(base_size = 14, base_family = \"text\"))                \n\ntheme_update(\n  plot.title.position   = \"plot\",\n  plot.caption.position = \"plot\",\n  legend.position       = \"plot\",\n  plot.background       = element_rect(fill = bkg_col, color = bkg_col),\n  panel.background      = element_rect(fill = bkg_col, color = bkg_col),\n  plot.margin           = margin(t = 10, r = 10, b = 10, l = 10),\n  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1.1), \n                                       color = text_col, family = \"text\", face = \"bold\", hjust = 0.5),\n  axis.text             = element_text(size = rel(0.5), color = text_col, family = \"text\"),\n  strip.text            = element_text(size = rel(1), face = \"bold\", margin = margin(b = 10), family = \"text\"),\n  panel.grid.major      = element_line(color = \"gray90\", linewidth = 0.2),\n  panel.spacing.x       = unit(3, \"lines\"),  \n  panel.spacing.y       = unit(1, \"lines\"),  \n  aspect.ratio          = 1  \n)\n```\n\n\n6. Plot\n\nShow code```{r}\n### |- main plot ---- \nmain_plot &lt;- episode_metrics_long |&gt;   \n  ggplot(aes(x = metric, y = value)) +\n\n  # Geoms\n  # Add grid lines\n  geom_hline(yintercept = seq(-2, 7, by = 1), color = \"gray90\", linewidth = 0.2) +\n  \n  # Add episode polygons\n  geom_polygon(aes(group = interaction(season, episode)),\n               fill = \"#8856a7\",\n               alpha = 0.2) +\n  \n  # Add season average line\n  stat_summary(aes(group = season),\n               fun = 'mean', \n               geom = \"path\",\n               color = \"#8856a7\",\n               size = 0.8,\n               alpha = 0.9,\n               na.rm = TRUE) +\n  \n  # Scales\n  scale_x_discrete(expand = expansion(add = 1.2)) +  \n  scale_y_continuous(\n    expand = expansion(add = c(0.5, 1)),\n    limits = c(-2, 7)                 \n  ) +\n  coord_polar(clip = 'off') +\n\n  # Labs\n  labs(\n    x = NULL,\n    y = NULL,\n  ) +\n  \n  # Facet \n  facet_wrap(~season, nrow = 4, \n             labeller = labeller(season = function(x) paste(\"Season\", x))\n  ) +\n  \n  # Theme\n  theme(\n    axis.text.y = element_blank(),\n    axis.title = element_blank(),\n    plot.margin = margin(0, 0, 0, 0)\n  )\n\n### |- key pattern plot ----\nkey_patterns_plot &lt;- ggplot() +\n  annotate(\n    \"richtext\",\n    x = 0,\n    y = 0,\n    label = glue::glue(\n      \"&lt;span style='font-family:title;font-size:12pt;color:{title_col}'&gt;**Key Patterns:**&lt;/span&gt;&lt;br&gt;\n      &lt;span style='font-family:subtitle;font-size:9pt;color:{text_col}'&gt;\n      • Early seasons (1-3): more experimental patterns&lt;br&gt;\n      • Middle seasons (4-8): consistent style&lt;br&gt;\n      • Later seasons: refined structure&lt;br&gt;\n      • Higher variance: character episodes&lt;br&gt;\n      • Higher question ratios: mystery plots\n      &lt;/span&gt;\"\n    ),\n    fill = NA,\n    label.color = NA,\n    hjust = 0,\n    vjust = 1.2,\n  ) +\n  theme_void() +\n  theme(\n    plot.margin = margin(5, 10, 5, 10)      \n  )\n\n### |- title & subtitle plot ----\ntitle_plot &lt;- ggplot() +\n  labs(\n    title = title_text,\n    subtitle = subtitle_text\n  ) +\n  theme_void() +\n  theme(\n    plot.title      = element_text(\n      size          = rel(1.8),\n      family        = \"title\",\n      face          = \"bold\",\n      color         = title_col,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 5)\n    ),   \n    plot.subtitle   = element_markdown(\n      size          = rel(1.1),\n      family        = \"subtitle\",\n      color         = subtitle_col,\n      lineheight    = 1.1,\n      margin        = margin(t = 5, b = 15)\n    ),\n    plot.background = element_rect(fill = bkg_col, color = bkg_col),\n    plot.margin     = margin(10, 10, 0, 10)\n  )\n\n### |- combined plot ----\n\n# Define layout design with adjusted areas\n\n# area(t, l, b, r)\n\n# where:\n# t = top row position\n# l = left column position\n# b = bottom row position\n# r = right column position\n\ndesign &lt;- c(\n    area(1, 1, 1, 6),      # title area\n    area(2, 1, 5, 6),      # main plot area\n    area(4, 2, 5, 6)       # key patterns area \n)\n\ncombined_plot &lt;- title_plot +  main_plot + key_patterns_plot +\n  plot_layout(\n    design = design,\n    heights = c(0.8, 4, 4, 4, 0.2), \n    widths = c(1, 1, 1, 1, 1, 0.2)\n  ) +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n      plot.background = element_rect(fill = bkg_col, color = bkg_col),\n      plot.margin     = margin(10, 10, 10, 10),\n      plot.caption    = element_markdown(\n        size          = rel(0.65),\n        family        = \"caption\",\n        color         = caption_col,\n        lineheight    = 1.1,\n        hjust         = 0.5,\n        margin        = margin(t = 10, b = 5)\n      )\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n# There was some issues between patchwork and ggsave\n\n# Make sure these pkgs are installed\nif (!require(\"ggplotify\")) install.packages(\"ggplotify\")\nif (!require(\"grid\")) install.packages(\"grid\")\n\n# Use Arial (Windows system font)\nwindowsFonts(Arial = windowsFont(\"Arial\"))\n\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\n\n# Convert patchwork plot to grob\nplot_grob &lt;- as.grob(combined_plot)\n\n# Set up the PNG device with proper font handling\npng(\n  filename = here::here(\"projects/standalone_visualizations/sa_2024-11-11.png\"),\n  width = 9, \n  height = 10, \n  units = \"in\", \n  res = 320,\n  type = \"cairo\" \n)\n\n# Enable showtext with specific settings\nshowtext::showtext_begin()\nshowtext::showtext_opts(dpi = 320, regular.wt = 300, bold.wt = 800)\n\n# Draw the plot\ngrid::grid.draw(plot_grob)\n\n# Clean up\nshowtext::showtext_end()\ninvisible(dev.off())\n\n# Create thumbnail\nmagick::image_read(here::here(\"projects/standalone_visualizations/sa_2024-11-11.png\")) |&gt; \n  magick::image_resize(geometry = \"400\") |&gt; \n  magick::image_write(here::here(\"projects/standalone_visualizations/thumbnails/sa_2024-11-11.png\"))\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggplotify_0.1.2         patchwork_1.3.0         textdata_0.4.5         \n [4] tidytext_0.4.2          bobsburgersR_0.0.0.9000 glue_1.8.0             \n [7] scales_1.3.0            skimr_2.1.5             janitor_2.2.0          \n[10] showtext_0.9-7          showtextdb_3.0          sysfonts_0.8.9         \n[13] ggtext_0.1.2            lubridate_1.9.3         forcats_1.0.0          \n[16] stringr_1.5.1           dplyr_1.1.4             purrr_1.0.2            \n[19] readr_2.1.5             tidyr_1.3.1             tibble_3.2.1           \n[22] ggplot2_3.5.1           tidyverse_2.0.0         pacman_0.5.1           \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      janeaustenr_1.0.0 \n [5] digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4    rsvg_2.6.1        \n [9] tokenizers_0.3.0   magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6       \n[13] tools_4.4.0        utf8_1.2.4         yaml_2.3.10        knitr_1.49        \n[17] labeling_0.4.3     htmlwidgets_1.6.4  curl_6.0.0         here_1.0.1        \n[21] xml2_1.3.6         camcorder_0.1.0    repr_1.1.7         withr_3.0.2       \n[25] fansi_1.0.6        colorspace_2.1-1   cli_3.6.4          rmarkdown_2.29    \n[29] generics_0.1.3     rstudioapi_0.17.1  tzdb_0.5.0         commonmark_1.9.2  \n[33] base64enc_0.1-3    vctrs_0.6.5        yulab.utils_0.1.8  Matrix_1.7-0      \n[37] jsonlite_1.8.9     gridGraphics_0.5-1 hms_1.1.3          systemfonts_1.1.0 \n[41] magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20   stringi_1.8.4     \n[45] gtable_0.3.6       munsell_0.5.1      pillar_1.9.0       rappdirs_0.3.3    \n[49] htmltools_0.5.8.1  R6_2.5.1           rprojroot_2.0.4    evaluate_1.0.1    \n[53] lattice_0.22-6     markdown_1.13      SnowballC_0.7.1    gridtext_0.1.5    \n[57] snakecase_0.11.1   renv_1.0.3         Rcpp_1.0.13-1      svglite_2.1.3     \n[61] xfun_0.49          fs_1.6.5           pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/standalone_visualizations/sa_2025-02-16.html",
    "href": "projects/standalone_visualizations/sa_2025-02-16.html",
    "title": "RWFD Supply Chain Analytics Dashboard",
    "section": "",
    "text": "Figure 1: RWFD Supply Chain Dashboard: An interactive Shiny application featuring logistics KPIs, cost analysis, and warehouse performance metrics. The dashboard provides insights into shipping costs, warehouse utilization, and service level performance.\n\n\nOverview \n1. Overview\nThe RWFD Supply Chain Dashboard is an interactive R Shiny application designed to analyze and visualize manufacturing logistics data. The dashboard focuses on two main areas:\n\n\nOverview Dashboard\n\nReal-time tracking of total shipping costs\nAverage cost per KG analysis\nWarehouse utilization monitoring\nOn-time delivery performance metrics\n\n\n\nCost Analysis Dashboard\n\nDetailed cost breakdown by location\nUnit cost analysis with efficiency quadrants\nPerformance matrix for warehouse comparison\n\n\n2. Key Features\n\n\nInteractive Elements\n\nDynamic filtering by warehouse location\nCarrier-specific analysis\nService level breakdowns\nReal-time metric updates\n\n\n\nVisualizations\n\nInteractive route cost analysis\nStorage cost comparisons\nTransport mode breakdowns\nService level distribution\nEfficiency matrix heatmap\n\n\n\nData Downloads\n\nCSV exports for all visualizations\nCustomizable data filtering\nComprehensive metrics export\n\n\n3. Technical Implementation\nThe dashboard is built using:\n\n\nR Shiny: Core web framework\n\nbslib: Modern Bootstrap 5 styling\n\ntidyverse: Data processing\n\nggiraph: Interactive visualizations\n\nDT: Data tables\nAdditional packages: scales, glue, janitor\n4. Project Structure\n├── app.R              # Main application\n├── global.R           # Global settings\n├── modules/\n│   ├── overview/      # Overview dashboard\n│   └── cost_analysis/ # Cost analysis\n└── R/\n    └── utils/         # Helper functions\n5. Data Sources\nThe application processes four key datasets:\n\n\nOrder List: Transaction data\n\nShipping details\nOrder metrics\nService levels\n\n\n\nFreight Rates: Pricing data\n\nCarrier rates\nRoute costs\nService options\n\n\n\nWarehouse Data: Facility metrics\n\nStorage costs\nUtilization rates\nCapacity limits\n\n\n\nWarehouse Capacities: Infrastructure data\n\nDaily capacity limits\nRegional information\nFacility type and status\n\n\n6. Project Links\n\nLive Dashboard: RWFD Supply Chain Dashboard\nSource Code: GitHub Repository\n7. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3        \n [5] htmltools_0.5.8.1 tools_4.4.0       rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.4       renv_1.0.3        evaluate_1.0.1   \n\n\n\n\n\n8. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nAccess the GitHub repository here\n\n\n\n9. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData originally from:\n\nKalganova, Tatiana; Dzalbs, Ivars (2019). Supply Chain Logistics Problem Dataset. Brunel University London. Dataset\nAccessed via: RWFD Real World Fake Data\n\n\n\n\n\n\n10. Citation\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nTo cite this dashboard: - Ponce, S. (2024). RWFD Supply Chain Dashboard Shiny Application\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_05 - Ex_058.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_05 - Ex_058.html",
    "title": "Client Contact Program: Uneven Success Demands Strategic Response",
    "section": "",
    "text": "Original\nThe goal of this exercise is to learn how to select and combine the most effective chart types that drive specific business decisions rather than just displaying data.\nIn essence, it’s about becoming a strategic data storyteller who can:\n\nEvaluate multiple visualization options critically\nChoose charts that support clear business actions\nCombine visualizations to tell a complete, compelling story\nTransform raw data into executive-ready insights that drive immediate decisions\n\nThe exercise teaches you that chart selection is a strategic business skill, not just a technical one!\n\n\n\n\n\nFigure 1: Original chart\n\n\nAdditional information can be found HERE\nMakeover\n\n\n\n\n\nFigure 2: Combined chart showing client contact program results. Top panel: horizontal bar chart with Executive Services showing +20 percentage point improvement (blue), Travel & Experiences +8pp (dark gray), Elite Access +2pp (light gray), and Lifestyle Services -3pp decline (red). Bottom panel: slope chart showing performance trends from before to after the program, with Executive Services rising steeply from 69% to 89% (blue line), while Lifestyle Services declined from 75% to 72% (red line). Gray lines show Travel & Experiences and Elite Access with modest improvements. A 90% target line is marked.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\ntidyverse,         # Easily Install and Load the 'Tidyverse'\n  ggtext,            # Improved Text Rendering Support for 'ggplot2'\n  showtext,          # Using Fonts More Easily in R Graphs\n  scales,            # Scale Functions for Visualization\n  glue,              # Interpreted String Literals\n  patchwork          # The Composer of Plots \n) \n\n### |- figure size ---- \ncamcorder::gg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 8,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n\nraw_data &lt;- readxl::read_excel(\n  here::here(\"data\", \"SWDchallenge\", \"2025\", \"swdexercise058 DATA.xlsx\"),\n  sheet   = \"MAIN\",\n  range   = \"B4:D9\",\n  trim_ws = TRUE\n) |&gt;\n  janitor::clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(raw_data)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n\ntidy_data &lt;- raw_data |&gt;\n  filter(category != \"Total\") |&gt;\n  pivot_longer(cols = c(last_quarter, this_quarter), \n               names_to = \"period\", \n               values_to = \"contact_rate\") |&gt;\n  mutate(\n    period = case_when(\n      period == \"last_quarter\" ~ \"Before Program\",\n      period == \"this_quarter\" ~ \"After Program\"\n    ),\n    period = factor(period, levels = c(\"Before Program\", \"After Program\"))\n  ) |&gt; \n  mutate(\n    category_short = case_when(\n      category == \"Elite access & bespoke requests\" ~ \"Elite Access\",\n      category == \"Travel & experiences\" ~ \"Travel & Experiences\", \n      category == \"Executive services\" ~ \"Executive Services\",\n      category == \"Lifestyle services\" ~ \"Lifestyle Services\",\n      TRUE ~ category\n    )\n  )\n\nchange_data &lt;- raw_data |&gt;  \n  filter(category != \"Total\") |&gt;\n  mutate(\n    change = this_quarter - last_quarter,\n    # Shorter category names for better display\n    category_short = case_when(\n      category == \"Elite access & bespoke requests\" ~ \"Elite Access\",\n      category == \"Travel & experiences\" ~ \"Travel & Experiences\", \n      category == \"Executive services\" ~ \"Executive Services\",\n      category == \"Lifestyle services\" ~ \"Lifestyle Services\",\n      TRUE ~ category\n    ),\n    strategic_color = case_when(\n      change &gt;= 0.15 ~ \"exceptional\",     \n      change &gt;= 0.05 ~ \"strong\",        \n      change &gt;= -0.01 ~ \"stable\",       \n      TRUE ~ \"concerning\"               \n    ),\n    action_needed = case_when(\n      change &gt;= 0.15 ~ \"Recognize & Scale\",\n      change &gt;= 0.05 ~ \"Reinforce Success\", \n      change &gt;= -0.01 ~ \"Monitor Closely\",\n      TRUE ~ \"Immediate Intervention\"\n    )\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\n    \"exceptional\"= \"#1f77b4\", \"strong\"= \"#969696\", \"stable\" = \"#bdbdbd\", \"concerning\" = \"#d62728\",\n    \"Executive services\"= \"#1f77b4\", \"Travel & experiences\"= \"#969696\", \n    \"Elite access & bespoke requests\" = \"#bdbdbd\", \"Lifestyle services\" = \"#d62728\"\n  )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Client Contact Program: Uneven Success Demands Strategic Response\")\nsubtitle_text &lt;- str_glue(\"Overall program succeeded, but stark performance gaps require immediate\\nresource reallocation\")\n\n# Create caption\ncaption_text &lt;- create_swd_exe_caption(\n  year = 2025,\n  month = \"May\",\n  source_text =  \"Let's Practice! Exercise 5.8\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Text styling \n    plot.title = element_text(face = \"bold\", family = fonts$title, color = colors$title, size = rel(1.14), margin = margin(b = 10)),\n    plot.subtitle = element_text(family = fonts$subtitle, color = colors$text, size = rel(0.78), margin = margin(b = 20)),\n    \n    # Axis elements\n    axis.title = element_text(color = colors$text, size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    \n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.1),\n    \n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$text, size = rel(0.8)),\n    legend.text = element_text(family = fonts$text, size = rel(0.7)),\n    \n    # Plot margins \n    plot.margin = margin(t = 10, r = 15, b = 10, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n\n# P1. Diverging Chart ----\np1 &lt;- ggplot(change_data, aes(\n  x = reorder(category_short, change),\n  y = change, fill = strategic_color\n)) +\n  geom_hline(yintercept = 0, color = \"gray40\", linewidth = 0.5, alpha = 0.8) +\n  geom_col(width = 0.7, alpha = 0.9) +\n  geom_text(aes(label = paste0(ifelse(change &gt; 0, \"+\", \"\"), round(change * 100, 1), \"pp\")),\n    hjust = ifelse(change_data$change &gt; 0, -0.1, 1.1),\n    size = 4.2, fontface = \"bold\", color = \"black\"\n  ) +\n  # Scales\n  scale_y_continuous(\n    labels = function(x) paste0(ifelse(x &gt; 0, \"+\", \"\"), x * 100, \"pp\"),\n    breaks = seq(-0.1, 0.20, 0.05),\n    expand = expansion(mult = c(0.15, 0.15))\n  ) +\n  scale_fill_manual(values = colors$palette) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = \"Executive Services Soars (+20pp), Lifestyle Services Stumbles (-3pp)\",\n    subtitle = \"Performance gaps this wide demand immediate strategic intervention\",\n    x = \"\",\n    y = \"Change in Contact Rate\"\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(size = rel(1), face = \"bold\", color = colors$title, family = fonts$title),\n    plot.subtitle = element_text(size = rel(0.71), color = colors$subtitle, family = fonts$subtitle),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n  )\n\n# P2. Slope Chart ----\np2 &lt;- ggplot(tidy_data, aes(x = period, y = contact_rate, group = category_short, color = category)) +\n  # Geoms\n  geom_hline(yintercept = 0.90, linetype = \"dashed\", color = \"gray40\", alpha = 0.6, size = 0.5) +\n  geom_line(\n    aes(size = ifelse(category_short == \"Executive Services\", 3,\n      ifelse(category_short == \"Lifestyle Services\", 2.0, 1.0)\n    )),\n    alpha = 0.9\n  ) +\n  geom_point(aes(size = ifelse(category_short %in% c(\"Executive Services\", \"Lifestyle Services\"), 3, 2))) +\n  geom_text(\n    data = tidy_data |&gt;\n      filter(\n        period == \"After Program\",\n        category_short %in% c(\"Executive Services\", \"Lifestyle Services\")\n      ),\n    aes(label = category_short),\n    hjust = -0.1, vjust = 0.5, size = 3.2, color = \"black\"\n  ) +\n  # Annotate\n  annotate(\"text\",\n    x = 1.5, y = 0.92, label = \"90% Target\",\n    size = 3, color = \"gray40\", fontface = \"italic\"\n  ) +\n  # Scales\n  scale_y_continuous(\n    labels = percent_format(accuracy = 1),\n    limits = c(0.65, 1.0),\n    breaks = seq(0.70, 1.0, 0.10)\n  ) +\n  scale_x_discrete(expand = expansion(mult = c(0.1, 0.35))) +\n  scale_color_manual(values = colors$palette) +\n  scale_size_identity() +\n  labs(\n    title = \"The Journey: Dramatic Trajectories Reveal Strategic Opportunities\",\n    subtitle = \"Steepest slopes indicate departments to celebrate and investigate\",\n    x = \"\",\n    y = \"Client Contact Rate\"\n  ) +\n  # Theme\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = rel(1), face = \"bold\", color = colors$title, family = fonts$title),\n    plot.subtitle = element_text(size = rel(0.71), color = colors$subtitle, family = fonts$subtitle),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray60\", linewidth = 0.25),\n  )\n\n# Combined Plot -----\ncombined_plot &lt;- (p1 / p2) +\n  plot_layout(heights = c(1, 1.1))\n\ncombined_plot &lt;- combined_plot +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_text(\n        size = rel(1.25),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(0.9),\n        family = fonts$subtitle,\n        color = colors$subtitle,\n        lineheight = 1.2,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size   = rel(0.6),\n        family = fonts$caption,\n        color  = colors$caption,\n        hjust  = 0.5,\n        margin = margin(t = 10)\n      ),\n      plot.margin = margin(t = 20, r = 10, b = 20, l = 10),\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  combined_plot, \n  type = 'swd', \n  year = 2025, \n  month = 05, \n  exercise = 058,\n  width = 8, \n  height = 8\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      patchwork_1.3.0 glue_1.8.0      scales_1.3.0   \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.5.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         gifski_1.32.0-1    fansi_1.0.6        pkgconfig_2.0.3   \n[13] ggplotify_0.1.2    readxl_1.4.3       rematch_2.0.0      lifecycle_1.0.4   \n[17] compiler_4.4.0     farver_2.1.2       munsell_0.5.1      janitor_2.2.0     \n[21] codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10       \n[25] pillar_1.9.0       camcorder_0.1.0    magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      rsvg_2.6.1        \n[33] rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1  \n[37] cli_3.6.4          magrittr_2.0.3     utf8_1.2.4         withr_3.0.2       \n[41] timechange_0.3.0   rmarkdown_2.29     cellranger_1.1.0   hms_1.1.3         \n[45] evaluate_1.0.1     knitr_1.49         markdown_1.13      gridGraphics_0.5-1\n[49] rlang_1.1.6        gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[53] renv_1.0.3         svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9    \n[57] R6_2.5.1           fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_05 - Ex_058.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nData Sources:\n\n\nData Sources:\n\nStorytelling with Data Exercise | which chart shows it best?: Download the data\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_21.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_21.html",
    "title": "D&D Encounter Design: Celestials Dominate Skill-Based Challenges",
    "section": "",
    "text": "Figure 1: A horizontal stacked bar chart shows skill tier distributions for 11 D&D monster types. Celestials lead with 45% expert-level skills, followed by Giants (25%) and Dragons (24%). Most other monster types rely primarily on basic and medium skills, with Aberrations and Beasts having virtually no expert abilities.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  scales,        # Scale Functions for Visualization\n  glue           # Interpreted String Literals\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 21)\n\nmonsters_raw &lt;- tt$monsters |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(monsters_raw)\nskimr::skim(monsters_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\nmonsters_skill &lt;- monsters_raw |&gt;\n  filter(!is.na(skills)) |&gt;\n  separate_rows(skills, sep = \",\") |&gt;\n  mutate(\n    skills = str_trim(skills),\n    skill_name = str_extract(skills, \"^[A-Za-z ]+\"),\n    skill_bonus = str_extract(skills, \"\\\\+\\\\d+\"),\n    skill_bonus = as.numeric(str_remove(skill_bonus, \"\\\\+\"))\n  ) |&gt;\n  filter(!is.na(skill_name), !is.na(skill_bonus)) |&gt;\n  mutate(\n    skill_tier = case_when(\n      skill_bonus &lt;= 3 ~ \"Low (1-3)\",\n      skill_bonus &lt;= 6 ~ \"Medium (4-6)\",\n      skill_bonus &lt;= 10 ~ \"High (7-10)\",\n      TRUE ~ \"Expert (11+)\"\n    ),\n    skill_tier = factor(skill_tier, levels = c(\"Low (1-3)\", \"Medium (4-6)\", \"High (7-10)\", \"Expert (11+)\"))\n  ) |&gt;\n  count(type, skill_tier) |&gt;\n  filter(n &gt;= 2) |&gt;\n  group_by(type) |&gt;\n  mutate(\n    total_skills = sum(n),\n    proportion = n / total_skills,\n    # Calculate expert percentage for ordering\n    expert_pct = if_else(skill_tier == \"Expert (11+)\", proportion, 0)\n  ) |&gt;\n  group_by(type) |&gt;\n  mutate(max_expert_pct = max(expert_pct)) |&gt;\n  ungroup()\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"#feb078\", \"#00204d\",\n        \"coral\", \"coral3\", \"coral4\", \"navy\"\n    )\n)\n\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"D&D Encounter Design: Celestials Dominate Skill-Based\\nChallenges\")\n\nsubtitle_text &lt;- str_glue(\n    \"For skill-heavy encounters, Celestials offer 45% expert abilities vs. 24-25% for \\n\",\n    \"Dragons and Giants\"\n    )\n\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 21,\n  source_text =  \"D&D System Reference Document v5.2.1\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.title = element_text(color = colors$text, face = \"bold\", size = rel(0.8)),\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n\n    # Grid elements\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n\n    # Legend elements\n    legend.position = \"top\",\n    legend.direction = \"horizontal\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Final plot -----\np &lt;- monsters_skill |&gt;\n  ggplot(aes(x = fct_reorder(type, max_expert_pct), y = proportion, fill = skill_tier)) +\n  # Geoms\n  geom_col(position = \"fill\", alpha = 0.9) +\n  geom_text(\n    data = monsters_skill %&gt;%\n      filter(skill_tier == \"Expert (11+)\", max_expert_pct &gt; 0.15),\n    aes(\n      label = paste0(round(proportion * 100), \"%\"),\n      y = proportion / 2\n    ),\n    color = \"black\", size = 3.5, fontface = \"bold\"\n  ) +\n  # Annotations\n  annotate(\"rect\",\n    xmin = 8.5, xmax = 11.5, ymin = -0.01, ymax = 1.01,\n    fill = colors$palette[3], alpha = 0.12, color = colors$palette[4], \n    linetype = \"solid\", linewidth = 1\n  ) +\n  annotate(\"rect\",\n    xmin = 0.5, xmax = 3.5, ymin = -0.01, ymax = 1.01,\n    fill = colors$palette[6], alpha = 0.08, color = colors$palette[6], \n    linetype = \"solid\", linewidth = 1\n  ) +\n  annotate(\"text\",\n    x = 10.5, y = 1.12, label = \"SKILL ELITES\",\n    hjust = 0.5, size = 3.5, fontface = \"bold\", color = colors$palette[5]\n  ) +\n  annotate(\"text\",\n    x = 1.5, y = 1.12, label = \"SURPRISINGLY\\nLOW-SKILLED\",\n    hjust = 0.5, size = 3.2, fontface = \"bold\", color = colors$palette[6]\n  ) +\n\n  # Scales\n  scale_fill_viridis_d(option = \"cividis\", name = \"Skill Tier\") +\n  scale_x_discrete() +\n  scale_y_continuous(\n    labels = scales::percent_format(),\n    expand = expansion(mult = c(0.05, 0.05)),\n    breaks = c(0, 0.3, 0.6, 0.9, NA)\n  ) +\n  coord_flip(ylim = c(0, 1.15)) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Proportion of Skills\",\n    fill = \"Status\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 15)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.9),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.62),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 21, \n  width = 8,\n  height = 10\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    skimr_2.1.5        lifecycle_1.0.4   \n[17] farver_2.1.2       compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0   \n[29] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[33] stringi_1.8.4      rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] grid_4.4.0         colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3    \n[41] base64enc_0.1-3    utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3    \n[45] bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2\n[49] gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3         hms_1.1.3         \n[53] evaluate_1.0.1     knitr_1.49         viridisLite_0.4.2  markdown_1.13     \n[57] rlang_1.1.6        gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[61] renv_1.0.3         vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1 \n[65] jsonlite_1.8.9     R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_21.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 21: Dungeons and Dragons Monsters (2024)\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/SWD Challenge/2025/swd_2025_06.html",
    "href": "data_visualizations/SWD Challenge/2025/swd_2025_06.html",
    "title": "From 17x Industry Benchmark to Optimized Efficiency: A Data-Driven Supplier Strategy",
    "section": "",
    "text": "Original Business Case\n\nThis month’s Storytelling with Data exercise aims: Imagine that you work for a regional medical group that manages care facilities across your state. As part of a team responsible for reviewing medical products and evaluating suppliers, your role involves shaping company-wide strategies and policies across various medical centers. Recently, you and your team completed a strategic sourcing project assessing four suppliers (Suppliers A, B, C, and D) for a critical product category (XYZ Products).\nYou have access to robust data, including historical usage and costs by medical center, satisfaction metrics from physicians and patients, and cost projections. The options on the table range from a single-supplier company-side contract to allowing each medical center to continue managing its own purchasing, each with clear trade-offs.\nYou’ve put together a deck with your team to present the findings to the decision-makers. Your goal is to drive discussion and help the group reach a decision on future strategy. Below are the slides you’ve prepared.\n\n\n\n\n\n\nFigure 1: Original Slides\n\n\nAdditional information can be found HERE\nMakeover Business Case\n\n\n\n\n\nFigure 2: Four-slide strategic sourcing presentation showcasing a transformation from a 17x industry benchmark overspend to $1.3M in annual savings. Slide 1 displays a bar chart comparing the current $50M spend with the industry standard of $2.8M. Slide 2 shows a quadrant analysis, identifying Supplier C as the optimal choice (green dot in the bottom-right quadrant, characterized by high performance and low cost). Slide 3 presents three forecast scenarios through 2028, with a dual supplier strategy (green line) resulting in $1.27M in savings compared to the status quo (red line). The title slide introduces the data-driven supplier strategy approach.\n\n\nSteps to Create these Graphic \nNote: The charts were generated using R and ggplot. The slide deck was build using MS PowerPoint.\n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,    # Easily Install and Load the 'Tidyverse'\n  ggtext,       # Improved Text Rendering Support for 'ggplot2'\n  showtext,     # Using Fonts More Easily in R Graphs\n  scales,       # Scale Functions for Visualization\n  glue          # Interpreted String Literals\n) \n\n### |- figure size ---- \ncamcorder::gg_record( \n  dir    = here::here(\"temp_plots\"), \n  device = \"png\",\n  width  = 8,\n  height = 8,\n  units  = \"in\",\n  dpi    = 320)\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n\nmarket_share_raw &lt;- readxl::read_excel(\n  here::here(\"data/SWDchallenge/2025/Supplier Sourcing Data.xlsx\"),\n  sheet = \"market_share\",\n  skip = 2, trim_ws = TRUE\n) |&gt;\n  janitor::clean_names()\n\ncost_over_time_raw &lt;- readxl::read_excel(\n  here::here(\"data/SWDchallenge/2025/Supplier Sourcing Data.xlsx\"),\n  sheet = \"cost_over_time\",\n  skip = 2, trim_ws = TRUE\n) |&gt;\n  janitor::clean_names()\n\nspend_by_facility_raw &lt;- readxl::read_excel(\n  here::here(\"data/SWDchallenge/2025/Supplier Sourcing Data.xlsx\"),\n  sheet = \"by_facility\",\n  skip = 2, trim_ws = TRUE\n) |&gt;\n  janitor::clean_names()\n\nevaluations_results_raw &lt;- readxl::read_excel(\n  here::here(\"data/SWDchallenge/2025/Supplier Sourcing Data.xlsx\"),\n  sheet = \"results\",\n  skip = 2, trim_ws = TRUE\n) |&gt;\n  janitor::clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(market_share_raw)\nglimpse(cost_over_time_raw)\nglimpse(spend_by_facility_raw)\nglimpse(evaluations_results_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n\n# 1. Clean market share data ----\nmarket_share_clean &lt;- market_share_raw |&gt;\n  filter(supplier != \"Total Spend\") |&gt;\n  mutate(\n    industry_share = as.numeric(industry),\n    us_share = as.numeric(us)\n  ) |&gt;\n  select(supplier, industry_share, us_share)\n\n# Extract spend information separately\ntotal_spend &lt;- tibble(\n  category = c(\"Industry\", \"Us\"),\n  spend = c(\"$2.8M\", \"~$50M\"),\n  spend_numeric = c(2.8, 50)\n)\n\n# 2. Clean cost over time data ----\nyears &lt;- c(\"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\")\n\n# Clean the supplier cost data (rows 2-6)\nsupplier_costs &lt;- cost_over_time_raw |&gt;\n  slice(2:6) |&gt;\n  rename(supplier = x1) |&gt;\n  mutate(\n    `2025` = case_when(\n      supplier == \"Supplier A\" ~ 163910,\n      supplier == \"Supplier B\" ~ 1481647,\n      supplier == \"Supplier C\" ~ 64041,\n      supplier == \"Supplier D\" ~ 1137230,\n      supplier == \"Total\" ~ 2846828,\n      TRUE ~ NA_real_\n    )\n  ) |&gt;\n  rename(\n    `2022` = actual,\n    `2023` = x3,\n    `2024` = x4,\n    `2026` = forecast,\n    `2027` = x7,\n    `2028` = x8\n  ) |&gt;\n  select(-x5) |&gt;\n  pivot_longer(cols = -supplier, names_to = \"year\", values_to = \"cost\") |&gt;\n  mutate(\n    year = as.numeric(year),\n    cost_millions = cost / 1000000,\n    period = case_when(\n      year &lt;= 2025 ~ \"Actual\",\n      year &gt;= 2026 ~ \"Forecast\",\n      TRUE ~ NA_character_\n    )\n  )\n\n# Extract scenario comparison data\nscenarios &lt;- cost_over_time_raw |&gt;\n  slice(8:10) |&gt;\n  select(x5, forecast, x7, x8) |&gt;\n  rename(\n    scenario = x5,\n    `2026` = forecast,\n    `2027` = x7,\n    `2028` = x8\n  ) |&gt;\n  # Clean scenario names\n  mutate(\n    scenario = case_when(\n      str_detect(scenario, \"Status Quo\") ~ \"Status Quo\",\n      str_detect(scenario, \"Single\") ~ \"Single Supplier\",\n      str_detect(scenario, \"Dual\") ~ \"Dual Supplier\",\n      TRUE ~ scenario\n    )\n  ) |&gt;\n  pivot_longer(cols = -scenario, names_to = \"year\", values_to = \"cost\") |&gt;\n  mutate(\n    year = as.numeric(year),\n    cost_millions = cost / 1000000,\n    period = \"Forecast\"\n  ) |&gt;\n  filter(!is.na(cost))\n\n\n# Clean the spend by facility data ----\nspend_by_facility_clean &lt;- spend_by_facility_raw |&gt;\n  filter(facility != \"Grand Total\") |&gt;\n  pivot_longer(\n    cols = starts_with(\"supplier_\"),\n    names_to = \"supplier\",\n    values_to = \"spend\"\n  ) |&gt;\n  mutate(\n    supplier = str_to_upper(str_remove(supplier, \"supplier_\")),\n    spend_thousands = spend / 1000\n  )\n\n# Extract totals separately\nfacility_totals &lt;- spend_by_facility_raw |&gt;\n  filter(facility != \"Grand Total\") |&gt;\n  select(facility, grand_total) |&gt;\n  mutate(total_thousands = grand_total / 1000)\n\nsupplier_totals &lt;- spend_by_facility_raw |&gt;\n  filter(facility == \"Grand Total\") |&gt;\n  select(-facility, -grand_total) |&gt;\n  pivot_longer(everything(), names_to = \"supplier\", values_to = \"total_spend\") |&gt;\n  mutate(\n    supplier = str_to_upper(str_remove(supplier, \"supplier_\")),\n    total_millions = total_spend / 1000000\n  )\n\n# Clean the evaluations data ----\nevaluations_clean &lt;- evaluations_results_raw |&gt;\n  slice(2:6) |&gt;\n  mutate(\n    metric = str_extract(test_metric, \"^\\\\d+\\\\. .+\"),\n    metric = str_remove(metric, \"^\\\\d+\\\\. \")\n  ) |&gt;\n  rename(\n    supplier_a = suppliers,\n    supplier_b = x3,\n    supplier_c = x4,\n    supplier_d = x5\n  ) |&gt;\n  select(metric, supplier_a:supplier_d) |&gt;\n  mutate(across(supplier_a:supplier_d, as.numeric)) |&gt;\n  pivot_longer(\n    cols = starts_with(\"supplier_\"),\n    names_to = \"supplier\",\n    values_to = \"score\"\n  ) |&gt;\n  mutate(supplier = str_to_upper(str_remove(supplier, \"supplier_\")))\n\n# Extract averages separately\nsupplier_averages &lt;- tribble(\n  ~supplier, ~avg_score,\n  \"A\", 3.64,\n  \"B\", 4.51,\n  \"C\", 3.72,\n  \"D\", 4.42\n)\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n\n# https://github.com/poncest/SWDchallenge/tree/main/2025/06_June\nsource(\"../../../../_CHALLENGES/SWDchallenge/2025/06_Jun/chart_1.R\")\nsource(\"../../../../_CHALLENGES/SWDchallenge/2025/06_Jun/chart_2.R\")\nsource(\"../../../../_CHALLENGES/SWDchallenge/2025/06_Jun/chart_3.R\")\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n\ncreate_benchmark_chart()\ncreate_supplier_performance_chart()\ncreate_strategic_scenario_chart()\n```\n\n\n7. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    showtext_0.9-7 \n [5] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n [9] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[13] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[17] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4 tzdb_0.5.0       \n [5] vctrs_0.6.5       tools_4.4.0       generics_0.1.3    gifski_1.32.0-1  \n [9] fansi_1.0.6       pkgconfig_2.0.3   readxl_1.4.3      lifecycle_1.0.4  \n[13] farver_2.1.2      compiler_4.4.0    textshaping_0.4.0 munsell_0.5.1    \n[17] janitor_2.2.0     codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1\n[21] yaml_2.3.10       pillar_1.9.0      camcorder_0.1.0   magick_2.8.5     \n[25] tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4     labeling_0.4.3   \n[29] rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0       \n[33] colorspace_2.1-1  cli_3.6.4         magrittr_2.0.3    utf8_1.2.4       \n[37] withr_3.0.2       timechange_0.3.0  rmarkdown_2.29    cellranger_1.1.0 \n[41] ragg_1.3.3        hms_1.1.3         evaluate_1.0.1    knitr_1.49       \n[45] rlang_1.1.6       gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6       \n[49] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 jsonlite_1.8.9   \n[53] R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in swd_2025_06.qmd. For the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\nOriginal Slides:\n\nDocument: XYZ Products: Strategic Sourcing Plan Document\n\n\nData:\n\nData: Source Data\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_23.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_23.html",
    "title": "The Stakes for U.S. Truck Manufacturing Under Shifting Federal Policy",
    "section": "",
    "text": "Original\nThe original visualization Figure B: Change in employment from baseline scenario, Job-years, 2024–2032 comes from Economic Policy Institute+\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: Dual-chart visualization showing U.S. truck manufacturing employment impacts. The top heatmap displays five policy scenarios (rows) versus three job categories (columns), with green indicating job gains and red showing losses. The policy Retreat row shows red losses (-596 to -3,332 jobs), while other scenarios show green gains. The bottom waterfall chart shows progressive job creation from baseline through four positive scenarios, building from +11,182 to +19,122 total jobs, with a separate red bar showing -3,332 job loss under the Policy Retreat alternative.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n    tidyverse,      # Easily Install and Load the 'Tidyverse'\n    ggtext,         # Improved Text Rendering Support for 'ggplot2'\n    showtext,       # Using Fonts More Easily in R Graphs\n    scales,         # Scale Functions for Visualization\n    glue,           # Interpreted String Literals\n    lubridate,      # Make Dealing with Dates a Little Easier\n    patchwork       # The Composer of Plots\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  12,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\n## Original Chart\n# Change in employment from baseline scenario, Job-years, 2024–2032, Figure B\n# https://www.epi.org/publication/future-clean-trucks-buses/\n\n## Article\n# What future will U.S. truck manufacturing have under Trump?\n# https://www.epi.org/publication/future-clean-trucks-buses/\n\n## Data\n# What future will U.S. truck manufacturing have under Trump?\n# https://data.world/makeovermonday/what-future-will-us-truck-manufacturing-have-under-trump\n\ntruck_manufacturing_raw &lt;- readxl::read_excel(\n  here::here('data/MakeoverMonday/2025/US truck manufacturing under Trump.xlsx')) |&gt; \n  janitor::clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(truck_manufacturing_raw)\nskimr::skim(truck_manufacturing_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n# P1. heatmap data----\nheatmap_data &lt;- truck_manufacturing_raw |&gt;\n  mutate(\n    scenario_clean = case_when(\n      str_detect(scenario, \"policy retreat\") ~ \"Policy Retreat\",\n      str_detect(scenario, \"union wages\") ~ \"Clean + Market + Union\",\n      str_detect(scenario, \"50% clean.*10% market\") ~ \"Clean + Market Share\",\n      str_detect(scenario, \"Baseline.*10%\") ~ \"Baseline + Market\",\n      str_detect(scenario, \"50% clean\") ~ \"50% Clean Vehicles\",\n      TRUE ~ scenario\n    ),\n    # Order scenarios logically\n    scenario_factor = factor(scenario_clean,\n      levels = c(\n        \"50% Clean Vehicles\",\n        \"Baseline + Market\",\n        \"Clean + Market Share\",\n        \"Clean + Market + Union\",\n        \"Policy Retreat\"\n      )\n    )\n  ) |&gt;\n  # Transform to long format\n  select(scenario_factor, assembly, supply_chain, total) |&gt;\n  pivot_longer(\n    cols = -scenario_factor,\n    names_to = \"job_category\",\n    values_to = \"jobs\"\n  ) |&gt;\n  # Create clean category labels\n  mutate(\n    job_category_clean = case_when(\n      job_category == \"assembly\" ~ \"Assembly\",\n      job_category == \"supply_chain\" ~ \"Supply Chain\",\n      job_category == \"total\" ~ \"Total\"\n    ),\n    job_category_factor = factor(job_category_clean,\n      levels = c(\"Assembly\", \"Supply Chain\", \"Total\")\n    ),\n    # Create scaled values for color intensity (-1 to 1 scale)\n    jobs_scaled = case_when(\n      jobs &lt; 0 ~ pmax(jobs / abs(min(jobs)), -1), # negative values\n      jobs &gt; 0 ~ pmin(jobs / max(jobs), 1), # positive values\n      TRUE ~ 0\n    ),\n    # Text color based on intensity\n    text_color = ifelse(abs(jobs_scaled) &gt; 0.6, \"white\", \"black\"),\n    # Formatted labels\n    jobs_label = case_when(\n      jobs == 0 ~ \"0\",\n      jobs &gt; 0 ~ paste0(\"+\", comma(jobs, accuracy = 1)),\n      jobs &lt; 0 ~ comma(jobs, accuracy = 1)\n    )\n  )\n\n# P2. waterfall chart data -----\nwaterfall_data &lt;- tibble(\n  category = c(\n    \"Baseline\", \"50% Clean Vehicles\", \"Add Market Share\",\n    \"Add Union Wages\", \"Policy Retreat Alternative\"\n  ),\n  # Calculate incremental values\n  value = c(\n    0, # Baseline starting point\n    truck_manufacturing_raw$total[1], # 50% clean vehicles: 11,182\n    truck_manufacturing_raw$total[2] - truck_manufacturing_raw$total[1], # Market share increment: 13,272 - 11,182 = 2,090\n    truck_manufacturing_raw$total[4] - truck_manufacturing_raw$total[3], # Union wages increment: 19,122 - 15,441 = 3,681\n    truck_manufacturing_raw$total[5] # Policy retreat: -3,332 (standalone negative scenario)\n  ),\n  type = c(\"baseline\", \"positive\", \"positive\", \"positive\", \"negative\")\n) |&gt;\n  # Calculate cumulative totals and bar positioning\n  mutate(\n    cumulative = case_when(\n      category == \"Policy Retreat Alternative\" ~ value,\n      TRUE ~ cumsum(value)\n    ),\n    # Calculate where each bar should start and end\n    ymin = case_when(\n      category == \"Baseline\" ~ 0,\n      category == \"Policy Retreat Alternative\" ~ 0,\n      TRUE ~ lag(cumulative, default = 0)\n    ),\n    ymax = case_when(\n      category == \"Policy Retreat Alternative\" ~ value,\n      TRUE ~ cumulative\n    ),\n    # Labels\n    category_label = case_when(\n      category == \"Baseline\" ~ \"Baseline\\n(Starting Point)\",\n      category == \"50% Clean Vehicles\" ~ \"50% Clean\\nVehicles\",\n      category == \"Add Market Share\" ~ \"Increase\\nMarket Share\",\n      category == \"Add Union Wages\" ~ \"Add Union\\nWages\",\n      category == \"Policy Retreat Alternative\" ~ \"Policy Retreat\\n(Alternative Path)\"\n    ),\n    category = factor(category, levels = category),\n    category_label = factor(category_label, levels = category_label)\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"#DC143C\", \"#FFFFFF\",  \"#2E8B57\",                                         # heatmap    \n  \"baseline\" = \"#708090\", \"positive\" = \"#2E8B57\", \"negative\" = \"#DC143C\"    # waterfall chart\n))\n  \n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"The Stakes for U.S. Truck Manufacturing Under Shifting Federal Policy\")\nsubtitle_text &lt;- str_glue(\"Employment impact analysis across clean vehicle scenarios and policy retreat alternatives\")\n\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n    mm_year = 2025,\n    mm_week = 23,\n    source_text = \"&lt;br&gt;EPI analysis of S&P Global (2024), IMPLAN (2024), and FRED data | Job-years, 2024-2032\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n\n    # Legend formatting\n    legend.position = \"plot\",\n    legend.title = element_text(face = \"bold\"),\n\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n\n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(0.85)),\n    axis.title.y = element_text(face = \"bold\", size = rel(0.85)),\n    axis.text.y = element_text(face = \"bold\", size = rel(0.85)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n\n    # Margin\n    plot.margin = margin(20, 20, 20, 20)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# P1. Heatmap ----\np1 &lt;- heatmap_data |&gt;\n  ggplot(aes(x = job_category_factor, y = scenario_factor)) +\n\n  # Geoms\n  geom_tile(aes(fill = jobs_scaled),\n    color = \"white\",\n    linewidth = 1.5,\n    alpha = 0.9\n  ) +\n  geom_text(aes(label = jobs_label, color = text_color),\n    fontface = \"bold\",\n    size = 4.2\n  ) +\n\n  # Scales\n  scale_fill_gradient2(\n    low = colors$palette[1],\n    mid = colors$palette[2],\n    high = colors$palette[3],\n    midpoint = 0,\n    name = \"Job Impact\\nIntensity\",\n    labels = c(\"High Loss\", \"Neutral\", \"High Gain\"),\n    breaks = c(-1, 0, 1),\n    guide = guide_colorbar(\n      title.position = \"top\",\n      title.hjust = 0.5,\n      barwidth = 1.2,\n      barheight = 8,\n      frame.colour = \"gray70\",\n      ticks.colour = \"gray70\"\n    )\n  ) +\n  scale_color_identity() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) +\n\n  # Labs\n  labs(\n    subtitle = \"Job breakdown shows potential gains and losses across Assembly and Supply Chain sectors\",\n    x = \"Job Category\",\n    y = \"Policy Scenario\"\n  ) +\n\n  # Theme\n  theme_minimal(base_size = 11) +\n  theme(\n    plot.subtitle = element_text(\n      size = 12,\n      color = \"gray40\",\n      margin = margin(b = 15)\n    ),\n    axis.title = element_text(\n      size = 10,\n      face = \"bold\",\n      color = \"gray30\"\n    ),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.text = element_text(\n      size = 9,\n      color = \"gray20\",\n      face = \"bold\"\n    ),\n    legend.position = \"right\",\n    legend.title = element_text(\n      size = 9,\n      face = \"bold\",\n      color = \"gray30\"\n    ),\n    legend.text = element_text(\n      size = 8,\n      color = \"gray40\"\n    ),\n    legend.margin = margin(l = 15),\n    panel.grid = element_blank(),\n    plot.margin = margin(10, 15, 15, 15),\n    plot.background = element_rect(fill = colors$background, color = NA),\n    panel.background = element_rect(fill = colors$background, color = NA)\n  )\n\n# P2. waterfall chart -----\np2 &lt;- waterfall_data |&gt;   \n  ggplot(aes(x = category_label)) +\n\n  # Geoms\n  geom_segment(\n    data = waterfall_data[2:4, ],\n    aes(\n      x = as.numeric(category_label) + 0.45,\n      xend = as.numeric(category_label) + 1 - 0.45,\n      y = ymax,\n      yend = ymax\n    ),\n    linetype = \"dashed\", alpha = 0.6, linewidth = 0.8, color = \"gray50\"\n  ) +\n  geom_rect(\n    aes(\n      xmin = as.numeric(category_label) - 0.35,\n      xmax = as.numeric(category_label) + 0.35,\n      ymin = ymin,\n      ymax = ymax,\n      fill = type\n    ),\n    alpha = 0.9, color = \"white\", linewidth = 0.5\n  ) +\n  geom_text(\n    aes(\n      y = (ymin + ymax) / 2,\n      label = ifelse(value == 0, \"0\",\n        paste0(ifelse(value &gt; 0, \"+\", \"\"), comma(value, accuracy = 1))\n      )\n    ),\n    fontface = \"bold\", size = 4, color = \"white\"\n  ) +\n  geom_text(\n    data = filter(waterfall_data, type != \"baseline\" & type != \"negative\"),\n    aes(\n      y = ymax + 500,\n      label = paste(\"Total:\", comma(cumulative, accuracy = 1))\n    ),\n    fontface = \"bold\", size = 3.5, color = \"gray30\"\n  ) +\n  geom_hline(yintercept = 0, color = \"black\", linewidth = 1, alpha = 0.8) +\n\n  # Scales\n  scale_fill_manual(values = colors$palette, guide = \"none\") +\n  scale_y_continuous(\n    labels = function(x) {\n      case_when(\n        x &gt;= 0 ~ paste0(\"+\", comma(x)),\n        x &lt; 0 ~ comma(x),\n        TRUE ~ as.character(x)\n      )\n    },\n    breaks = pretty_breaks(n = 6),\n    expand = expansion(mult = c(0.15, 0.1))\n  ) +\n  scale_x_discrete() +\n\n  # Labs\n  labs(\n    subtitle = \"Policy scenarios build progressively from baseline to maximum employment potential\",\n    x = NULL,\n    y = \"Change in Employment (Job-years)\"\n  ) +\n\n  # Theme\n  theme_minimal(base_size = 11) +\n  theme(\n    plot.subtitle = element_text(\n      size = 12,\n      color = \"gray40\",\n      margin = margin(b = 15)\n    ),\n    axis.title.y = element_text(\n      size = 10,\n      face = \"bold\",\n      color = \"gray30\",\n      margin = margin(r = 15)\n    ),\n    axis.text.x = element_text(\n      size = 9,\n      face = \"bold\",\n      color = \"gray20\",\n      lineheight = 1.1\n    ),\n    axis.text.y = element_text(\n      size = 9,\n      color = \"gray30\"\n    ),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray90\", linewidth = 0.5),\n    plot.margin = margin(15, 15, 10, 15),\n    plot.background = element_rect(fill = colors$background, color = NA),\n    panel.background = element_rect(fill = colors$background, color = NA)\n  )\n\n# Combined Plot ----\ncombined_plot &lt;- p1 / p2 +\n  plot_annotation(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    theme = theme(\n      plot.title = element_markdown(\n        size = rel(1.6),\n        family = fonts$title,\n        face = \"bold\",\n        color = colors$title,\n        lineheight = 1.1,\n        margin = margin(t = 5, b = 5)\n      ),\n      plot.subtitle = element_text(\n        size = rel(1),\n        family = fonts$subtitle,\n        color = alpha(colors$subtitle, 0.9),\n        lineheight = 0.9,\n        margin = margin(t = 5, b = 10)\n      ),\n      plot.caption = element_markdown(\n        size = rel(0.6),\n        family = fonts$caption,\n        color = colors$caption,\n        hjust = 0.5,\n        margin = margin(t = 10)\n      ),\n     plot.margin = margin(25, 25, 25, 25),\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 23,\n  width = 10, \n  height = 12\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      patchwork_1.3.0 glue_1.8.0      scales_1.3.0   \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          htmlwidgets_1.6.4  tzdb_0.5.0        \n [5] yulab.utils_0.1.8  vctrs_0.6.5        tools_4.4.0        generics_0.1.3    \n [9] curl_6.0.0         gifski_1.32.0-1    fansi_1.0.6        pkgconfig_2.0.3   \n[13] ggplotify_0.1.2    skimr_2.1.5        readxl_1.4.3       lifecycle_1.0.4   \n[17] compiler_4.4.0     farver_2.1.2       munsell_0.5.1      janitor_2.2.0     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        pillar_1.9.0       camcorder_0.1.0    magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3     base64enc_0.1-3   \n[41] utf8_1.2.4         withr_3.0.2        timechange_0.3.0   rmarkdown_2.29    \n[45] cellranger_1.1.0   hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[49] markdown_1.13      gridGraphics_0.5-1 rlang_1.1.6        gridtext_0.1.5    \n[53] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         svglite_2.1.3     \n[57] rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1           fs_1.6.5          \n[61] systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_23.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 23: What future will U.S. truck manufacturing have under Trump?\n\n\n\nArticle\n\n\nEconomic Policy Institute: What future will U.S. truck manufacturing have under Trump?\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_22.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_22.html",
    "title": "Project Gutenberg: Language Patterns in Author Longevity",
    "section": "",
    "text": "Figure 1: Beeswarm plot comparing lifespans of English vs non-English authors across three centuries for Project Gutenberg. Each dot represents one author, with blue dots for English authors and pink for other languages. Shows dramatic increase in English-language authors in the 19th century, with relatively consistent longevity patterns except for 20th century where English authors lived longer on average.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  scales,        # Scale Functions for Visualization\n  glue,          # Interpreted String Literals\n  ggbeeswarm     # Categorical Scatter (Violin Point) Plots\n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 22)\n\nauthors_raw &lt;- tt$gutenberg_authors |&gt; clean_names()\nlanguages_raw &lt;- tt$gutenberg_languages |&gt; clean_names()\nmetadata_raw &lt;- tt$gutenberg_metadata |&gt; clean_names()\nsubjects_raw &lt;- tt$gutenberg_subjects |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(authors_raw)\nskimr::skim(authors_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\n# Preprocessing\nauthors_clean &lt;- authors_raw |&gt;\n  mutate(\n    lifespan = deathdate - birthdate,\n    birth_century = case_when(\n      birthdate &gt;= 1800 & birthdate &lt; 1900 ~ \"19th Century\",\n      birthdate &gt;= 1700 & birthdate &lt; 1800 ~ \"18th Century\",\n      birthdate &gt;= 1900 & birthdate &lt; 2000 ~ \"20th Century\",\n      birthdate &lt; 1700 ~ \"Pre-18th Century\",\n      TRUE ~ \"Unknown\"\n    )\n  )\n\n# Join datasets\nfull_data &lt;- metadata_raw |&gt;\n  left_join(languages_raw, by = \"gutenberg_id\") |&gt;\n  left_join(authors_clean, by = \"gutenberg_author_id\")\n\n# Beeswarm data\nbeeswarm_data &lt;- full_data |&gt;\n  select(lifespan, birth_century, language.x, author.x) |&gt;\n  rename(language = language.x, author = author.x) |&gt;\n  filter(\n    !is.na(lifespan), lifespan &gt; 0, lifespan &lt; 120,\n    !is.na(birth_century), birth_century != \"Unknown\"\n  ) |&gt;\n  mutate(\n    highlight = ifelse(language == \"en\", \"English\", \"Other Languages\"),\n    birth_century = factor(birth_century,\n      levels = c(\n        \"Pre-18th Century\", \"18th Century\",\n        \"19th Century\", \"20th Century\"\n      )\n    )\n  )\n\n# Stats for annotations\ndetailed_stats &lt;- beeswarm_data |&gt;\n  filter(birth_century %in% c(\"18th Century\", \"19th Century\", \"20th Century\")) |&gt;\n  group_by(birth_century, highlight) |&gt;\n  summarise(\n    median_lifespan = median(lifespan, na.rm = TRUE),\n    count = n(),\n    mean_lifespan = round(mean(lifespan, na.rm = TRUE), 1),\n    .groups = \"drop\"\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\n        \"English\" = \"#2E86AB\", \"Other Languages\" = \"#A23B72\"\n    )\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Project Gutenberg: Language Patterns in Author Longevity\")\n\nsubtitle_text &lt;- str_glue(\"Comparing lifespans of English vs non-English authors across centuries\\n\",\n                          \"n = sample size • μ = mean lifespan • Boxes show median and quartiles\")\n\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 22,\n  source_text =  \"The R gutenbergr package\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n    \n    # Grid elements\n    panel.grid.minor.x = element_line(color = 'gray50', linewidth = 0.05),\n    panel.grid.major.x = element_blank(), #element_line(color = 'gray50', linewidth = 0.1),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Final plot -----\np &lt;- beeswarm_data |&gt;\n    filter(birth_century %in% c(\"18th Century\", \"19th Century\", \"20th Century\")) |&gt;\n    ggplot(aes(x = highlight, y = lifespan, color = highlight)) +\n    # Geoms\n    geom_quasirandom(alpha = 0.5, size = 0.7) +\n    geom_boxplot(alpha = 0.3, outlier.shape = NA, width = 0.3) +\n    geom_text(data = detailed_stats, \n              aes(x = highlight, y = 112, \n                  label = paste0(\"n=\", scales::comma(count), \"\\nμ=\", mean_lifespan)),\n              color = \"gray20\", size = 2.8, inherit.aes = FALSE, \n              vjust = 1, fontface = \"bold\") +\n    # Scales\n    scale_color_manual(values = colors$palette) +\n    scale_y_continuous(breaks = seq(20, 100, 20), limits = c(15, 115)) +\n    # Facets\n    facet_wrap(~birth_century, scales = \"free_x\") +\n    # Labs\n    labs(\n        title = title_text,\n        subtitle = subtitle_text,\n        caption = caption_text,\n        x = \"Language Group\",\n        y = \"Lifespan (Years)\",\n    ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.55),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.75),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    strip.text = element_text(size = rel(0.78), face = \"bold\"),\n    panel.spacing = unit(1, \"lines\"),\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 22, \n  width = 8,\n  height = 8\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1       ggbeeswarm_0.7.2 glue_1.8.0       scales_1.3.0    \n [5] janitor_2.2.0    showtext_0.9-7   showtextdb_3.0   sysfonts_0.8.9  \n [9] ggtext_0.1.2     lubridate_1.9.3  forcats_1.0.0    stringr_1.5.1   \n[13] dplyr_1.1.4      purrr_1.0.2      readr_2.1.5      tidyr_1.3.1     \n[17] tibble_3.2.1     ggplot2_3.5.1    tidyverse_2.0.0  pacman_0.5.1    \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   vipor_0.4.7        farver_2.1.2       fastmap_1.2.0     \n [5] gh_1.4.1           digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   \n [9] rsvg_2.6.1         magrittr_2.0.3     compiler_4.4.0     rlang_1.1.6       \n[13] tools_4.4.0        utf8_1.2.4         yaml_2.3.10        knitr_1.49        \n[17] skimr_2.1.5        htmlwidgets_1.6.4  bit_4.5.0          curl_6.0.0        \n[21] xml2_1.3.6         camcorder_0.1.0    repr_1.1.7         tidytuesdayR_1.1.2\n[25] withr_3.0.2        grid_4.4.0         fansi_1.0.6        colorspace_2.1-1  \n[29] gitcreds_0.1.2     cli_3.6.4          rmarkdown_2.29     crayon_1.5.3      \n[33] ragg_1.3.3         generics_0.1.3     rstudioapi_0.17.1  tzdb_0.5.0        \n[37] commonmark_1.9.2   parallel_4.4.0     base64enc_0.1-3    vctrs_0.6.5       \n[41] jsonlite_1.8.9     hms_1.1.3          bit64_4.5.2        beeswarm_0.4.0    \n[45] systemfonts_1.1.0  magick_2.8.5       gifski_1.32.0-1    codetools_0.2-20  \n[49] stringi_1.8.4      gtable_0.3.6       munsell_0.5.1      pillar_1.9.0      \n[53] rappdirs_0.3.3     htmltools_0.5.8.1  R6_2.5.1           httr2_1.0.6       \n[57] textshaping_0.4.0  rprojroot_2.0.4    vroom_1.6.5        evaluate_1.0.1    \n[61] markdown_1.13      gridtext_0.1.5     snakecase_0.11.1   renv_1.0.3        \n[65] Rcpp_1.0.13-1      svglite_2.1.3      xfun_0.49          pkgconfig_2.0.3   \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_22.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 22: DProject Gutenberg)\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_23.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_23.html",
    "title": "Diversity in Federal Judicial Appointments Has Increased Over Time",
    "section": "",
    "text": "Figure 1: Stacked bar chart showing federal judicial appointments 1960-present by race and gender. Demonstrates significant increases in both racial diversity and female representation across all groups, with White appointments showing the largest absolute numbers but all groups showing growing gender diversity over time.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,     # Easily Install and Load the 'Tidyverse'\n  ggtext,        # Improved Text Rendering Support for 'ggplot2'\n  showtext,      # Using Fonts More Easily in R Graphs\n  janitor,       # Simple Tools for Examining and Cleaning Dirty Data\n  scales,        # Scale Functions for Visualization\n  glue           # Interpreted String Literals\n  )})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 23)\n\nappointments_raw &lt;- tt$judges_appointments |&gt; clean_names()\npeople_raw &lt;- tt$judges_people |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(appointments_raw)\nskimr::skim(appointments_raw)\n\nglimpse(people_raw)\nskimr::skim(people_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\n# Joining the datasets first\njudges_data &lt;- appointments_raw |&gt;\n  left_join(people_raw, by = \"judge_id\") |&gt;\n  mutate(\n    nomination_date = mdy(nomination_date),\n    commission_date = mdy(commission_date),\n    senate_confirmation_date = mdy(senate_confirmation_date),\n    nomination_year = year(nomination_date)\n  )\n\n# Prepare the data\nplot_data &lt;- judges_data |&gt;\n  filter(\n    !is.na(nomination_year), !is.na(gender), !is.na(race),\n    nomination_year &gt;= 1960\n  ) |&gt;\n  mutate(\n    race_simplified = case_when(\n      str_detect(race, \"White\") ~ \"White\",\n      str_detect(race, \"Black|African\") ~ \"Black\",\n      str_detect(race, \"Hispanic|Latino\") ~ \"Hispanic\",\n      str_detect(race, \"Asian\") ~ \"Asian\",\n      TRUE ~ \"Other\"\n    ),\n    decade = floor(nomination_year / 10) * 10\n  ) |&gt;\n  count(decade, gender, race_simplified) |&gt;\n  group_by(decade, race_simplified) |&gt;\n  mutate(\n    total = sum(n),\n    female_count = ifelse(gender == \"F\", n, 0),\n    female_label_y = ifelse(gender == \"F\", total - n / 2, NA),\n    race_simplified = factor(race_simplified, \n                             levels = c(\"White\", \"Black\", \"Asian\", \"Hispanic\", \"Other\"))\n  ) |&gt;\n  ungroup()\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n    palette = c(\"F\" = \"#8E44AD\", \"M\" = \"#2C3E50\")\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Diversity in Federal Judicial Appointments Has Increased Over Time\")\n\nsubtitle_text &lt;- str_glue(\"Number of appointments by gender across racial groups, 1960-present (note: different scales)\")\n\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 23,\n  source_text =  \"Web site of the Federal Judicial Center, via the historydata R package\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n    \n    # Grid elements\n    panel.grid.major.y = element_line(color = 'gray50', linewidth = 0.05),\n    panel.grid.minor = element_blank(), \n    panel.grid.major.x = element_blank(),\n\n    # Legend elements\n    # legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Final plot -----\np &lt;- plot_data |&gt;\n  ggplot(aes(x = decade, y = n, fill = gender)) +\n  # Geoms\n  geom_bar(stat = \"identity\", position = \"stack\", alpha = 0.85) +\n  geom_text(aes(y = total + (total * 0.08), label = total),\n    position = position_identity(),\n    size = 3.2,\n    color = \"black\",\n    fontface = \"bold\",\n    family = \"Arial\",\n    data = plot_data |&gt; filter(gender == \"F\", total &gt; 3)\n  ) +\n  geom_text(aes(y = female_label_y, label = female_count),\n    position = position_identity(),\n    size = 3,\n    color = \"white\", \n    fontface = \"bold\",\n    family = \"Arial\",\n    data = plot_data |&gt; filter(gender == \"F\", female_count &gt; 3)\n  ) +\n    \n  # Scales\n  scale_fill_manual(\n    values = colors$palette,\n    labels = c(\"F\" = \"Female\", \"M\" = \"Male\")\n  ) +\n  scale_x_continuous(\n    breaks = seq(1960, 2020, 20),\n    labels = c(\"1960s\", \"1980s\", \"2000s\", \"2020+\")\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"Decade\",\n    y = \"\",\n    fill = \"Gender\",\n  ) +\n  # Facets\n  facet_wrap(~race_simplified, scales = \"free_y\", ncol = 3) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.4),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.75),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    strip.text = element_text(size = rel(0.78), face = \"bold\"),\n    panel.spacing = unit(1.1, \"lines\"),\n\n    # Legend\n    legend.position = \"inside\",\n    legend.position.inside = c(0.82, 0.15),\n    legend.title = element_text(face = \"bold\", size = 10),\n    legend.text = element_text(size = 9),\n    legend.background = element_rect(fill = NA, color = \"gray90\", linewidth = 0.5),\n    legend.margin = margin(5, 5, 5, 5),\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 23, \n  width = 8,\n  height = 8\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    skimr_2.1.5        lifecycle_1.0.4   \n[17] farver_2.1.2       compiler_4.4.0     textshaping_0.4.0  munsell_0.5.1     \n[21] repr_1.1.7         codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0   \n[29] magick_2.8.5       commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37     \n[33] stringi_1.8.4      labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4   \n[37] fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1   cli_3.6.4         \n[41] magrittr_2.0.3     base64enc_0.1-3    utf8_1.2.4         withr_3.0.2       \n[45] rappdirs_0.3.3     bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29    \n[49] tidytuesdayR_1.1.2 gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3        \n[53] hms_1.1.3          evaluate_1.0.1     knitr_1.49         markdown_1.13     \n[57] rlang_1.1.6        gridtext_0.1.5     Rcpp_1.0.13-1      xml2_1.3.6        \n[61] renv_1.0.3         vroom_1.6.5        svglite_2.1.3      rstudioapi_0.17.1 \n[65] jsonlite_1.8.9     R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_23.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 23: [U.S. Judges and the historydata R package)](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-06-10\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_24.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_24.html",
    "title": "API Catalog Maintenance Patterns",
    "section": "",
    "text": "Figure 1: Two-panel chart analyzing APIs.guru catalog patterns from 2016-2023. Top: scatter plot with log scale y-axis showing days between addition and update, 1,011 red dots at 0.5 days (same-day processing), 1,518 gray dots scattered above (later updates). Bottom: horizontal bars ranking 15 providers by same-day processing percentage.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,  # Easily Install and Load the 'Tidyverse'\n  ggtext,     # Improved Text Rendering Support for 'ggplot2'\n  showtext,   # Using Fonts More Easily in R Graphs\n  janitor,    # Simple Tools for Examining and Cleaning Dirty Data\n  scales,     # Scale Functions for Visualization\n  glue,       # Interpreted String Literals\n  patchwork   # The Composer of Plots\n  )})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n  width  =  8,\n  height =  10,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 24)\n\ninfo_raw &lt;- tt$api_info |&gt; clean_names()\napis_raw &lt;- tt$apisguru_apis |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(info_raw)\nglimpse(apis_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n### |-  tidy data ----\napis_minimal &lt;- apis_raw |&gt;\n  left_join(info_raw, by = \"name\") |&gt;\n  select(name, added, updated, provider_name) |&gt;\n  mutate(\n    added_date = as_date(added),\n    updated_date = as_date(updated)\n  ) |&gt;\n  filter(!is.na(added_date), !is.na(updated_date))\n\ncatalog_analysis &lt;- apis_minimal |&gt;\n  mutate(\n    days_between_add_update = as.numeric(updated_date - added_date),\n    catalog_update_type = case_when(\n      days_between_add_update == 0 ~ \"Same-day catalog processing\",\n      days_between_add_update &lt;= 7 ~ \"Updated within week\",\n      days_between_add_update &lt;= 30 ~ \"Updated within month\",\n      days_between_add_update &lt;= 365 ~ \"Updated within year\",\n      days_between_add_update &gt; 365 ~ \"Long gap before catalog update\",\n      TRUE ~ \"Other\"\n    ),\n    same_day_processing = days_between_add_update == 0,\n    days_for_viz = ifelse(days_between_add_update == 0, 0.5, days_between_add_update)\n  ) |&gt;\n  filter(days_between_add_update &gt;= 0)\n\n# Calculate key statistics\ntotal_apis &lt;- nrow(catalog_analysis)\nsame_day_count &lt;- sum(catalog_analysis$same_day_processing)\nsame_day_pct &lt;- round(same_day_count / total_apis * 100, 1)\nlater_updated_count &lt;- total_apis - same_day_count\nlater_updated_pct &lt;- round(later_updated_count / total_apis * 100, 1)\n\n# P2. Provider Analysis ----\nprovider_catalog_analysis &lt;- apis_minimal |&gt;\n  mutate(\n    days_between_add_update = as.numeric(updated_date - added_date),\n    same_day_processing = days_between_add_update == 0\n  ) |&gt;\n  filter(days_between_add_update &gt;= 0) |&gt;\n  group_by(provider_name) |&gt;\n  filter(n() &gt;= 3) |&gt;\n  summarise(\n    total_apis = n(),\n    same_day_apis = sum(same_day_processing),\n    same_day_rate = round((same_day_apis / total_apis) * 100, 1),\n    avg_days_to_update = round(mean(days_between_add_update), 1),\n    .groups = \"drop\"\n  ) |&gt;\n  filter(same_day_rate &gt; 0) |&gt;\n  arrange(desc(same_day_rate)) |&gt;\n  head(15) |&gt; # Top 15 by same-day processing rate\n  mutate(\n    provider_clean = str_trunc(str_to_title(provider_name), 35),\n    provider_clean = fct_reorder(provider_clean, same_day_rate)\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\"#95A5A6\", \"#E74C3C\", \"#7F8C8D\")\n)\n\n### |-  titles and caption ----\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 24,\n  source_text =  \"APIs.guru\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n\n    # Grid elements\n    panel.grid.major.y = element_line(color = \"gray50\", linewidth = 0.05),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# P1. The API Graveyard Plot ----\np1 &lt;- catalog_analysis |&gt;\n  ggplot(aes(x = added_date, y = days_for_viz)) +\n  # Geoms\n  geom_point(\n    data = catalog_analysis |&gt; filter(!same_day_processing),\n    color = colors$palette[1], size = 1.5, alpha = 0.6\n  ) +\n  geom_point(\n    data = catalog_analysis |&gt; filter(same_day_processing),\n    color = colors$palette[2], size = 2.5, alpha = 0.9\n  ) +\n  # Scales\n  scale_y_log10(\n    labels = comma_format(),\n    limits = c(0.1, NA),\n    breaks = c(0.5, 1, 10, 100, 1000)\n  ) +\n  # Annotations\n  annotate(\"text\",\n    x = as.Date(\"2016-06-01\"), y = 12,\n    label = paste0(\"Gray dots: Updated later in catalog\\n(\", later_updated_count, \" APIs • \", later_updated_pct, \"%)\"),\n    color = colors$palette[1], size = 3.5, fontface = \"bold\",\n    hjust = 0, vjust = 0\n  ) +\n  annotate(\"text\",\n    x = as.Date(\"2016-06-01\"), y = 0.9,\n    label = paste0(\"Red dots: Same-day catalog processing\\n(\", same_day_count, \" APIs • \", same_day_pct, \"%)\"),\n    color = colors$palette[2], size = 3.5, fontface = \"bold\",\n    hjust = 0, vjust = 0\n  ) +\n  # Labs\n  labs(\n    title = \"**API Catalog Maintenance Patterns**\",\n    subtitle = paste0(\n      \"**\", same_day_pct, \"%** of APIs have &lt;span style='color:#E74C3C'&gt;**same-day catalog processing**&lt;/span&gt; when added to APIs.guru&lt;br&gt;&lt;br&gt;\",\n      \"&lt;span style='color:#555555; font-size:10px'&gt;**Days Between Addition and Catalog Update (log scale)**&lt;/span&gt;\"\n    ),\n    x = \"Date Added to APIs.guru\",\n    y = NULL,\n  ) +\n  # Theme\n  theme(\n    plot.title = element_markdown(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 0, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    panel.grid.minor = element_blank(),\n    legend.position = \"none\"\n  )\n\n# P2. Provider Responsibility Breakdown Plot ----\np2 &lt;- provider_catalog_analysis |&gt;\n  ggplot(aes(x = provider_clean, y = same_day_rate)) +\n  # Geoms\n  geom_col(fill = colors$palette[2], alpha = 0.7, width = 0.7) +\n  geom_text(aes(label = paste0(same_day_rate, \"% • (\", same_day_apis, \"/\", total_apis, \")\")),\n    hjust = -0.1, size = 3, color = \"gray50\", fontface = \"bold\"\n  ) +\n  # Scales\n  scale_y_continuous(\n    limits = c(0, 124),\n    expand = c(0, 0)\n  ) +\n  coord_flip() +\n  # Labs\n  labs(\n    title = \"**Catalog Processing Patterns by Provider**\",\n    subtitle = \"Providers with highest rates of same-day catalog processing on APIs.guru\",\n    x = NULL,\n    y = \"% of APIs with Same-Day Catalog Processing\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_markdown(\n      size = rel(1.6),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 10)\n    ),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.y = element_text(size = 9),\n    plot.caption = element_text(size = 8, color = colors$palette[3])\n  )\n\n# Final plot -----\ncombined_plot &lt;- p1 / p2 +\n  plot_layout(heights = c(1.2, 1))\n\ncombined_plot &lt;- combined_plot +\n  plot_annotation(\n    caption = caption_text,\n    theme = theme(\n      plot.caption = element_markdown(\n        size = rel(0.6),\n        family = fonts$caption,\n        color = colors$caption,\n        hjust = 0.5,\n        margin = margin(t = 10)\n      )\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot_patchwork(\n  plot = combined_plot, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 24, \n  width  =  8,\n  height =  10\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      patchwork_1.3.0 glue_1.8.0      scales_1.3.0   \n [5] janitor_2.2.0   showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n [9] ggtext_0.1.2    lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n[13] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n[17] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         yulab.utils_0.1.8  vctrs_0.6.5       \n [9] tools_4.4.0        generics_0.1.3     parallel_4.4.0     curl_6.0.0        \n[13] gifski_1.32.0-1    fansi_1.0.6        pkgconfig_2.0.3    ggplotify_0.1.2   \n[17] lifecycle_1.0.4    compiler_4.4.0     farver_2.1.2       munsell_0.5.1     \n[21] codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10       \n[25] crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0    magick_2.8.5      \n[29] commonmark_1.9.2   tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4     \n[33] labeling_0.4.3     rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0     \n[37] grid_4.4.0         colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3    \n[41] utf8_1.2.4         withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2       \n[45] timechange_0.3.0   rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2    \n[49] bit_4.5.0          hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[53] markdown_1.13      gridGraphics_0.5-1 rlang_1.1.6        gridtext_0.1.5    \n[57] Rcpp_1.0.13-1      xml2_1.3.6         renv_1.0.3         vroom_1.6.5       \n[61] svglite_2.1.3      rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1          \n[65] fs_1.6.5           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_24.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 24: [API Specs](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-06-17\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_25.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_25.html",
    "title": "Global Measles Surveillance: Quality vs Disease Burden",
    "section": "",
    "text": "Figure 1: Scatter plot showing measles surveillance quality versus disease burden across 151 countries. Countries are positioned by disease burden (x-axis) and outbreak variability (y-axis). Points are colored by lab confirmation rates and sized by average measles incidence. A ‘Crisis Zone’ in the upper left shows countries with high measles burden and poor surveillance, while a ‘Success Zone’ in the lower right shows countries with low measles burden and good surveillance. Most countries cluster in the middle, with a clear pattern indicating that better measles surveillance correlates with a lower disease burden.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,  # Easily Install and Load the 'Tidyverse'\n  ggtext,     # Improved Text Rendering Support for 'ggplot2'\n  showtext,   # Using Fonts More Easily in R Graphs\n  janitor,    # Simple Tools for Examining and Cleaning Dirty Data\n  scales,     # Scale Functions for Visualization\n  glue,       # Interpreted String Literals\n  patchwork,  # The Composer of Plots\n  scico,      # Colour Palettes Based on the Scientific Colour-Maps \n  ggrepel     # Automatically Position Non-Overlapping Text Labels with 'ggplot2'\n  )})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n   width  =  10,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 25)\n\ncases_year &lt;- tt$cases_year |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n\n#' Note: The number of cases of measles and rubella officially reported by a\n#' WHO Member State is only available by July of each year. If any numbers from\n#' this provisional data are quoted, they should be properly sourced with a date\n#' (i.e. \"provisional data based on monthly data reported to WHO (Geneva) as\n#' of June 2025\"\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(cases_year)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n# Data Preparation\n\ncountry_profiles &lt;- cases_year |&gt;\n  group_by(country) |&gt;\n  filter(\n    n() &gt;= 5, # At least 5 years of data\n    sum(measles_total, na.rm = TRUE) &gt;= 10 # Meaningful case numbers\n  ) |&gt;\n  summarise(\n    # Core metrics for MDS\n    avg_incidence = mean(measles_incidence_rate_per_1000000_total_population, na.rm = TRUE),\n    max_incidence = max(measles_incidence_rate_per_1000000_total_population, na.rm = TRUE),\n    cv_incidence = sd(measles_incidence_rate_per_1000000_total_population, na.rm = TRUE) /\n      (mean(measles_incidence_rate_per_1000000_total_population, na.rm = TRUE) + 0.001),\n    lab_confirmation_rate = mean(measles_lab_confirmed / (measles_total + 0.001), na.rm = TRUE),\n    years_with_cases = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(\n    cv_incidence = pmin(cv_incidence, 5), # Cap CV at reasonable level\n    lab_confirmation_rate = pmin(lab_confirmation_rate, 1) # Cap at 100%\n  ) |&gt;\n  filter(complete.cases(across(avg_incidence:years_with_cases)))\n\n\n# MDS Analysis\n\n# Prepare MDS matrix with log transformation and scaling\nmds_matrix &lt;- country_profiles |&gt;\n  transmute(\n    log_avg_incidence = log10(avg_incidence + 1),\n    log_max_incidence = log10(max_incidence + 1),\n    log_cv_incidence = log10(cv_incidence + 1),\n    lab_confirmation_rate,\n    years_with_cases\n  ) |&gt;\n  scale() |&gt;\n  as.matrix()\n\nrownames(mds_matrix) &lt;- country_profiles$country\n\n# Perform MDS and calculate quality metrics\nmds_result &lt;- cmdscale(dist(mds_matrix), k = 2, eig = TRUE)\nvariance_explained &lt;- sum(mds_result$eig[1:2]) / sum(abs(mds_result$eig))\nstress &lt;- sum((dist(mds_matrix) - dist(mds_result$points))^2) / sum(dist(mds_matrix)^2)\n\n\n# Plot Data\nplot_data &lt;- tibble(\n  country = country_profiles$country,\n  MDS1 = mds_result$points[, 1],\n  MDS2 = mds_result$points[, 2],\n  avg_incidence = country_profiles$avg_incidence,\n  lab_confirmation_rate = country_profiles$lab_confirmation_rate\n)\n\n# Outliers Data\noutlier_datasets &lt;- list(\n  top_left = plot_data |&gt; filter(MDS1 &lt;= -3 & MDS2 &gt; 1),\n  bottom_right = plot_data |&gt; filter(MDS1 &gt; 2.8 & MDS2 &gt; -1)\n)\n\n# Shared Plot Styling & Annotations\nbase_label_style &lt;- list(\n  size = 3.2,\n  fontface = \"bold\",\n  color = \"black\",\n  bg.color = \"white\",\n  bg.r = 0.12,\n  box.padding = 0.6,\n  point.padding = 0.4,\n  segment.color = \"grey50\",\n  segment.size = 0.3,\n  segment.alpha = 0.8,\n  max.overlaps = 12,\n  seed = 42,\n  min.segment.length = 0.2\n)\n\n# Annotation tibble ----\nzone_annotations &lt;- tibble(\n  zone = c(\"crisis\", \"success\"),\n  xmin = c(-3.1, 0.9),\n  xmax = c(-1.9, 2.1),\n  ymin = c(1.8, -1.7),\n  ymax = c(3.2, -0.7),\n  x_text = c(-2.5, 1.5),\n  y_text = c(2.5, -1.2),\n  label = c(\n    \"CRISIS ZONE\\nHigh burden +\\nPoor surveillance\",\n    \"SUCCESS ZONE\\nLow burden +\\nGood surveillance\"\n  ),\n  color = c(\"darkred\", \"darkgreen\")\n)\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = NULL\n)\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Global Measles Surveillance: Quality vs Disease Burden\")\n\nsubtitle_text &lt;- str_glue(\n  \"Analysis of {nrow(plot_data)} countries reveals surveillance systems under pressure. WHO Provisional Measles Data (as of June 2025)\\n\",\n  \"Countries cluster by outbreak characteristics and surveillance capabilities\\n\\n\",\n  \"Note: Countries positioned closer together have similar outbreak patterns and surveillance capabilities\\n\",\n  \"All data is provisional - official annual figures available July 2025\\n\",\n  \"Model quality: {round(variance_explained * 100, 1)}% variance explained, Stress = {round(stress, 3)}\"\n)\n\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 25,\n  source_text =  \"WHO Provisional monthly measles and rubella data\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n\n    # Grid elements\n    panel.grid.major.y = element_line(color = \"gray50\", linewidth = 0.05),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Initial Plot ----\np &lt;- ggplot(plot_data, aes(x = MDS1, y = MDS2)) +\n\n  # Geoms\n  geom_hline(yintercept = 0, color = \"grey90\", linewidth = 0.25) +\n  geom_vline(xintercept = 0, color = \"grey90\", linewidth = 0.25) +\n  geom_point(aes(color = lab_confirmation_rate, size = avg_incidence),\n    alpha = 0.85, stroke = 0.2\n  ) +\n  # Scales\n  scale_color_scico(\n    name = \"Lab Confirmation\\nRate\",\n    labels = scales::percent_format(accuracy = 1),\n    palette = \"vik\",\n    direction = -1,\n    trans = \"identity\",\n    breaks = c(0, 0.25, 0.50, 0.75, 1.0),\n    guide = guide_colorbar(\n      title.position = \"top\",\n      title.hjust = 0.5,\n      barwidth = 10,\n      barheight = 1,\n      nbin = 100\n    )\n  ) +\n  scale_size_continuous(\n    range = c(1.5, 10),\n    name = \"Average Incidence (per million)\",\n    trans = \"sqrt\",\n    breaks = c(1, 10, 100, 500, 2000),\n    labels = c(\"1\", \"10\", \"100\", \"500\", \"2,000+\"),\n    guide = guide_legend(\n      title.position = \"top\",\n      title.hjust = 0.5,\n      override.aes = list(alpha = 0.8, shape = 21),\n      direction = \"horizontal\",\n      nrow = 1\n    )\n  ) +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = \"MDS Dimension 1 →\\n(Higher values = Lower disease burden)\",\n    y = \"MDS Dimension 2 →\\n(Higher values = More outbreak variability)\",\n  ) +\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.subtitle = element_text(\n      size = rel(0.72),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    # Legend styling\n    legend.position = \"top\",\n    legend.box = \"horizontal\",\n    legend.margin = margin(b = 10),\n    legend.title = element_text(size = 11, face = \"bold\"),\n    legend.text = element_text(size = 10),\n    legend.spacing.x = unit(1, \"cm\"),\n    legend.box.spacing = unit(0.5, \"cm\"),\n\n    # Grid and axes\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"grey95\", linewidth = 0.3),\n    axis.title = element_text(size = 12, face = \"bold\"),\n    axis.text = element_text(size = 10),\n  )\n\n# Final Plot ----\np &lt;- p +\n  # top-left outliers  \n  exec(geom_text_repel,\n    data = outlier_datasets$top_left,\n    mapping = aes(label = country),\n    nudge_x = -0.5,\n    nudge_y = -0.4,\n    direction = \"x\",\n    !!!base_label_style\n  ) +\n\n  # bottom-right outliers \n  exec(geom_text_repel,\n    data = outlier_datasets$bottom_right,\n    mapping = aes(label = country),\n    !!!base_label_style\n  ) +\n\n  # zone rectangles\n  pmap(zone_annotations, ~ annotate(\"rect\",\n    xmin = ..2, xmax = ..3,\n    ymin = ..4, ymax = ..5,\n    fill = colors$background,\n    alpha = 0.7\n  )) +\n\n  # zone text labels\n  pmap(zone_annotations, ~ annotate(\"text\",\n    x = ..6, y = ..7,\n    label = ..8,\n    hjust = 0.5, vjust = 0.5,\n    size = 3.5, fontface = \"bold\",\n    color = ..9\n  ))\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 25, \n  width  = 10,\n  height = 8\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      ggrepel_0.9.6   scico_1.5.0     patchwork_1.3.0\n [5] glue_1.8.0      scales_1.3.0    janitor_2.2.0   showtext_0.9-7 \n [9] showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2    lubridate_1.9.3\n[13] forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4     purrr_1.0.2    \n[17] readr_2.1.5     tidyr_1.3.1     tibble_3.2.1    ggplot2_3.5.1  \n[21] tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       httr2_1.0.6        xfun_0.49          htmlwidgets_1.6.4 \n [5] gh_1.4.1           tzdb_0.5.0         vctrs_0.6.5        tools_4.4.0       \n [9] generics_0.1.3     parallel_4.4.0     curl_6.0.0         gifski_1.32.0-1   \n[13] fansi_1.0.6        pkgconfig_2.0.3    lifecycle_1.0.4    compiler_4.4.0    \n[17] farver_2.1.2       textshaping_0.4.0  munsell_0.5.1      codetools_0.2-20  \n[21] snakecase_0.11.1   htmltools_0.5.8.1  yaml_2.3.10        crayon_1.5.3      \n[25] pillar_1.9.0       camcorder_0.1.0    magick_2.8.5       commonmark_1.9.2  \n[29] tidyselect_1.2.1   digest_0.6.37      stringi_1.8.4      labeling_0.4.3    \n[33] rsvg_2.6.1         rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0        \n[37] colorspace_2.1-1   cli_3.6.4          magrittr_2.0.3     utf8_1.2.4        \n[41] withr_3.0.2        rappdirs_0.3.3     bit64_4.5.2        timechange_0.3.0  \n[45] rmarkdown_2.29     tidytuesdayR_1.1.2 gitcreds_0.1.2     bit_4.5.0         \n[49] ragg_1.3.3         hms_1.1.3          evaluate_1.0.1     knitr_1.49        \n[53] markdown_1.13      rlang_1.1.6        gridtext_0.1.5     Rcpp_1.0.13-1     \n[57] xml2_1.3.6         renv_1.0.3         vroom_1.6.5        svglite_2.1.3     \n[61] rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_25.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 25: [Measles cases across the world](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-06-24\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/TidyTuesday/2025/tt_2025_26.html",
    "href": "data_visualizations/TidyTuesday/2025/tt_2025_26.html",
    "title": "The Evolution of Diesel’s Premium Over Gasoline",
    "section": "",
    "text": "Figure 1: Area chart showing the diesel price premium over gasoline from 1996 to 2025. Orange areas (pre-2005) indicate that gasoline costs more; blue areas (post-2005) show diesel’s growing premium, with crisis-driven spikes reaching $ 1.50 or higher during recent global events.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,  # Easily Install and Load the 'Tidyverse'\n  ggtext,     # Improved Text Rendering Support for 'ggplot2'\n  showtext,   # Using Fonts More Easily in R Graphs\n  janitor,    # Simple Tools for Examining and Cleaning Dirty Data\n  scales,     # Scale Functions for Visualization\n  glue        # Interpreted String Literals\n  )})\n\n### |- figure size ----\ncamcorder::gg_record(\n  dir    = here::here(\"temp_plots\"),\n  device = \"png\",\n   width  =  10,\n  height =  8,\n  units  = \"in\",\n  dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\ntt &lt;- tidytuesdayR::tt_load(2025, week = 26)\n\nweekly_gas_prices_raw &lt;- tt$weekly_gas_prices |&gt; clean_names()\n\ntidytuesdayR::readme(tt)\nrm(tt)\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(weekly_gas_prices_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n# Data preparation\ngas_prices &lt;- weekly_gas_prices_raw |&gt;\n  mutate(\n    date = as.Date(date),\n    year = year(date),\n    month = month(date),\n    quarter = quarter(date)\n  )\n\n# Define major events\nmajor_events &lt;- tibble(\n  event = c(\"2008 Financial Crisis\", \"COVID-19 Pandemic\", \"Russia-Ukraine War\"),\n  start_date = as.Date(c(\"2007-12-01\", \"2020-03-01\", \"2022-02-24\")),\n  end_date = as.Date(c(\"2009-06-01\", \"2021-12-31\", \"2025-06-30\"))\n)\n\n# Plot data\nspread_data &lt;- gas_prices |&gt;\n  filter(\n    grade == \"all\",\n    (fuel == \"gasoline\" & formulation == \"all\") |\n      (fuel == \"diesel\")\n  ) |&gt;\n  select(date, fuel, price) |&gt;\n  pivot_wider(names_from = fuel, values_from = price) |&gt;\n  filter(!is.na(gasoline), !is.na(diesel)) |&gt;\n  mutate(\n    spread = gasoline - diesel,\n    diesel_premium = diesel - gasoline,\n    positive_premium = ifelse(diesel_premium &gt;= 0, diesel_premium, 0),\n    negative_premium = ifelse(diesel_premium &lt; 0, diesel_premium, 0)\n  )\n\n# Key statistics for annotations\nsummary_stats &lt;- spread_data |&gt;\n  summarise(\n    avg_premium = mean(diesel_premium, na.rm = TRUE),\n    max_premium = max(diesel_premium, na.rm = TRUE),\n    min_premium = min(diesel_premium, na.rm = TRUE),\n    recent_avg = mean(diesel_premium[date &gt;= as.Date(\"2020-01-01\")], na.rm = TRUE)\n  )\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\ncolors &lt;- get_theme_colors(\n  palette = c(\"#0267C1\", \"#D65108\", \"#b22222\", \"#888888\", \"gray40\")\n)\n\n### |- titles and caption ----\ntitle_text &lt;- str_glue(\"The Evolution of Diesel's Premium Over Gasoline\")\n\nsubtitle_text &lt;- str_glue(\n    \"&lt;span style='color:#0267C1'&gt;**Weekly price differences**&lt;/span&gt; and \",\n    \"&lt;span style='color:#b22222'&gt;**long-term trend**&lt;/span&gt; showing diesel\\\\'s growing premium since 2005&lt;br&gt;\",\n    \"Recent avg (2020+): {dollar(summary_stats$recent_avg, accuracy = 0.01)}\"\n)\n\ncaption_text &lt;- create_social_caption(\n  tt_year = 2025,\n  tt_week = 26,\n  source_text =  \"EIA\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    # Axis elements\n    axis.text = element_text(color = colors$text, size = rel(0.7)),\n    axis.title.x = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(t = 15)),\n    axis.title.y = element_text(color = colors$text, face = \"bold\", size = rel(0.8), margin = margin(r = 10)),\n\n    # Grid elements\n    panel.grid.major.y = element_line(color = \"gray50\", linewidth = 0.05),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n\n    # Legend elements\n    legend.position = \"plot\",\n    legend.title = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.8), face = \"bold\"),\n    legend.text = element_text(family = fonts$tsubtitle, color = colors$text, size = rel(0.7)),\n\n    # Plot margins\n    plot.margin = margin(t = 15, r = 15, b = 15, l = 15),\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Initial Plot ----\np &lt;- spread_data |&gt;\n  ggplot(aes(x = date, y = diesel_premium)) +\n\n  # Geoms\n  geom_rect(\n    data = major_events,\n    aes(xmin = start_date, xmax = end_date, ymin = -Inf, ymax = Inf),\n    inherit.aes = FALSE,\n    alpha = 0.15,\n    fill = \"#ced4da\"\n  ) +\n  geom_hline(\n    yintercept = 0,\n    linetype = \"dotted\",\n    color = \"#555555\",\n    linewidth = 0.5,\n    alpha = 0.8\n  ) +\n  geom_hline(\n    yintercept = summary_stats$avg_premium,\n    linetype = \"dashed\",\n    color = \"#888888\",\n    linewidth = 0.6,\n    alpha = 0.7\n  ) +\n  geom_line(\n    color = \"gray\",\n    linewidth = 0.5,\n    alpha = 0.9\n  ) +\n  geom_area(\n    aes(y = positive_premium),\n    fill = colors$palette[1], # diesel premium\n    alpha = 0.6\n  ) +\n  geom_area(\n    aes(y = negative_premium),\n    fill = colors$palette[2], # gasoline premium\n    alpha = 0.6\n  ) +\n  geom_smooth(\n    se = FALSE,\n    color = colors$palette[3],\n    alpha = 0.15,\n    linewidth = 0.8,\n    method = \"loess\",\n    span = 0.4\n  ) +\n\n  # Scales\n  scale_y_continuous(\n    labels = dollar_format(accuracy = 0.01),\n    breaks = seq(-0.5, 2, by = 0.5),\n    limits = c(-0.5, 1.85)\n  ) +\n  scale_x_date(\n    date_breaks = \"3 years\",\n    date_labels = \"%Y\",\n    expand = expansion(mult = c(0.01, 0.03))\n  ) +\n\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n    x = NULL,\n    y = \"Price Difference ($/gallon)\",\n  ) +\n\n  # Theme\n  theme(\n    plot.title = element_text(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 10)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.95),\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 1.2,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.55),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n\n    # Grid and panel styling\n    panel.grid.major.x = element_line(\n      color = \"#e9ecef\",\n      linewidth = 0.2\n    ),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(\n      color = \"#e9ecef\",\n      linewidth = 0.2\n    ),\n    panel.grid.minor.y = element_line(\n      color = \"#dde2e6\",\n      linewidth = 0.1\n    )\n  )\n\n# Annotated plot\np &lt;- p +\n  annotate(\n    \"text\",\n    x = as.Date(\"2008-09-01\"),\n    y = 1.55,\n    label = \"2008\\nFinancial Crisis\",\n    size = 3,\n    color = colors$palette[4],\n    fontface = \"bold\",\n    hjust = 0.5\n  ) +\n  annotate(\n    \"text\",\n    x = as.Date(\"2021-03-01\"),\n    y = 1.45,\n    label = \"COVID-19\\nPandemic\",\n    size = 3,\n    color = colors$palette[4],\n    fontface = \"bold\",\n    hjust = 0.5\n  ) +\n  annotate(\n    \"text\",\n    x = as.Date(\"2023-10-15\"),\n    y = 1.65,\n    label = \"Russia-Ukraine\\nWar\",\n    size = 3,\n    color = colors$palette[4],\n    fontface = \"bold\",\n    hjust = 0.5\n  ) +\n  annotate(\n    \"segment\",\n    x = as.Date(\"2012-05-01\"), xend = as.Date(\"2012-05-01\"),\n    y = 0.95, yend = 0.80,\n    arrow = arrow(length = unit(0.15, \"cm\"), type = \"closed\"),\n    color = colors$palette[1],\n    linewidth = 0.6\n  ) +\n  annotate(\n    \"text\",\n    x = as.Date(\"2012-05-01\"),\n    y = 1.1,\n    label = \"Positive Values:\\nDiesel costs more\\nthan gasoline\",\n    size = 3.2,\n    color = colors$palette[1],\n    hjust = 0.5,\n    fontface = \"bold\",\n    lineheight = 1.1\n  ) +\n  annotate(\n    \"segment\",\n    x = as.Date(\"1996-06-01\"), xend = as.Date(\"1996-06-01\"),\n    y = -0.30, yend = -0.15,\n    arrow = arrow(length = unit(0.15, \"cm\"), type = \"closed\"),\n    color = colors$palette[2],\n    linewidth = 0.6\n  ) +\n  annotate(\n    \"text\",\n    x = as.Date(\"1996-06-01\"),\n    y = -0.4,\n    label = \"Negative Values:\\nGasoline costs more\\nthan diesel\",\n    size = 3.2,\n    color = colors$palette[2],\n    hjust = 0.5,\n    fontface = \"bold\",\n    lineheight = 1.1\n  ) +\n  annotate(\n    \"text\",\n    x = as.Date(\"1994-03-01\"),\n    y = summary_stats$avg_premium + 0.05,\n    label = \"Historical average\",\n    size = 3,\n    color = colors$palette[4],\n    hjust = 0,\n    fontface = \"italic\"\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"tidytuesday\", \n  year = 2025, \n  week = 26, \n  width  = 10,\n  height = 8\n)\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1      glue_1.8.0      scales_1.3.0    janitor_2.2.0  \n [5] showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9  ggtext_0.1.2   \n [9] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n[13] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[17] ggplot2_3.5.1   tidyverse_2.0.0 pacman_0.5.1   \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.49          httr2_1.0.6        htmlwidgets_1.6.4 \n [5] gh_1.4.1           lattice_0.22-6     tzdb_0.5.0         vctrs_0.6.5       \n [9] tools_4.4.0        generics_0.1.3     parallel_4.4.0     curl_6.0.0        \n[13] gifski_1.32.0-1    fansi_1.0.6        pkgconfig_2.0.3    Matrix_1.7-0      \n[17] lifecycle_1.0.4    farver_2.1.2       compiler_4.4.0     textshaping_0.4.0 \n[21] munsell_0.5.1      codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[25] yaml_2.3.10        crayon_1.5.3       pillar_1.9.0       camcorder_0.1.0   \n[29] magick_2.8.5       nlme_3.1-164       commonmark_1.9.2   tidyselect_1.2.1  \n[33] digest_0.6.37      stringi_1.8.4      splines_4.4.0      rsvg_2.6.1        \n[37] rprojroot_2.0.4    fastmap_1.2.0      grid_4.4.0         colorspace_2.1-1  \n[41] cli_3.6.4          magrittr_2.0.3     utf8_1.2.4         withr_3.0.2       \n[45] rappdirs_0.3.3     bit64_4.5.2        timechange_0.3.0   rmarkdown_2.29    \n[49] tidytuesdayR_1.1.2 gitcreds_0.1.2     bit_4.5.0          ragg_1.3.3        \n[53] hms_1.1.3          evaluate_1.0.1     knitr_1.49         markdown_1.13     \n[57] mgcv_1.9-1         rlang_1.1.6        gridtext_0.1.5     Rcpp_1.0.13-1     \n[61] xml2_1.3.6         renv_1.0.3         vroom_1.6.5        svglite_2.1.3     \n[65] rstudioapi_0.17.1  jsonlite_1.8.9     R6_2.5.1           systemfonts_1.1.0 \n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in tt_2025_26.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData Sources:\n\n\nTidyTuesday 2025 Week 26: [Weekly US Gas Prices](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-07-01)\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualizations/MakeoverMonday/2025/mm_2025_28.html",
    "href": "data_visualizations/MakeoverMonday/2025/mm_2025_28.html",
    "title": "Science, Health, and History: The Big Three of Misconceptions",
    "section": "",
    "text": "Original\nThe original visualization Common MythConceptions comes from EInformation is Beutiful\n\n\nOriginal visualization\n\nMakeover\n\n\n\n\n\nFigure 1: Treemap of 97 debunked misconceptions by category. Science, Health, and History are the three largest categories, accounting for 44% of all myths, with the remaining categories shown as smaller gray sections.\n\n\nSteps to Create this Graphic \n1. Load Packages & Setup\n\nShow code```{r}\n#| label: load\n#| warning: false\n#| message: false\n#| results: \"hide\"\n\n## 1. LOAD PACKAGES & SETUP ----\nsuppressPackageStartupMessages({\n  if (!require(\"pacman\")) install.packages(\"pacman\")\n  pacman::p_load(\n  tidyverse,      # Easily Install and Load the 'Tidyverse'\n  ggtext,         # Improved Text Rendering Support for 'ggplot2'\n  showtext,       # Using Fonts More Easily in R Graphs\n  scales,         # Scale Functions for Visualization\n  glue,           # Interpreted String Literals\n  lubridate,      # Make Dealing with Dates a Little Easier\n  treemapify      # Draw Treemaps in 'ggplot2' \n  )\n})\n\n### |- figure size ----\ncamcorder::gg_record(\n    dir    = here::here(\"temp_plots\"),\n    device = \"png\",\n    width  =  10,\n    height =  10,\n    units  = \"in\",\n    dpi    = 320\n)\n\n# Source utility functions\nsuppressMessages(source(here::here(\"R/utils/fonts.R\")))\nsource(here::here(\"R/utils/social_icons.R\"))\nsource(here::here(\"R/utils/image_utils.R\"))\nsource(here::here(\"R/themes/base_theme.R\"))\n```\n\n\n2. Read in the Data\n\nShow code```{r}\n#| label: read\n#| include: true\n#| eval: true\n#| warning: false\n\nmyth_conceptions_raw&lt;- read_csv(\n  here::here('data/MakeoverMonday/2025/KIB - Common MythConceptions (public).csv')) |&gt; \n  janitor::clean_names()\n```\n\n\n3. Examine the Data\n\nShow code```{r}\n#| label: examine\n#| include: true\n#| eval: true\n#| results: 'hide'\n#| warning: false\n\nglimpse(myth_conceptions_raw)\nskimr::skim(myth_conceptions_raw)\n```\n\n\n4. Tidy Data\n\nShow code```{r}\n#| label: tidy\n#| warning: false\n\n# Helper\nformat_numbers_smart &lt;- function(x) {\n  case_when(\n    x &gt;= 1000000 ~ paste0(round(x / 1000000, 1), \"M\"),\n    x &gt;= 1000 ~ paste0(round(x / 1000, 0), \"K\"),\n    x &lt; 1000 & x &gt; 0 ~ as.character(round(x, 0)),\n    TRUE ~ \"0\"\n  )\n}\n\n# Clean and prepare data\nmyths_clean &lt;- myth_conceptions_raw |&gt;\n  rename(\n    misconception = no_no_no_common_misconceptions,\n    correction = remaining_text,\n    search_volume = google_hits,\n    noise_in_search = lot_of_noise_i_e_myth_busting_in_search_result\n  ) |&gt;\n  filter(!is.na(misconception))\n\n# Treemap data\ntreemap_data &lt;- myths_clean |&gt;\n  filter(!is.na(category)) |&gt;\n  group_by(category) |&gt;\n  summarise(\n    count = n(),\n    total_hits = sum(search_volume, na.rm = TRUE),\n    avg_hits = mean(search_volume, na.rm = TRUE),\n    avg_word_count = mean(word_count, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(\n    category_clean = case_when(\n      category == \"science\" ~ \"Science\",\n      category == \"health\" ~ \"Health\",\n      category == \"nature\" ~ \"Nature\",\n      category == \"history\" ~ \"History\",\n      category == \"physics\" ~ \"Physics\",\n      category == \"religion\" ~ \"Religion\",\n      category == \"cooking\" ~ \"Cooking\",\n      category == \"mind\" ~ \"Psychology\",\n      category == \"body\" ~ \"Human Body\",\n      category == \"drugs\" ~ \"Substances\",\n      category == \"food\" ~ \"Food & Nutrition\",\n      category == \"technology - inventions\" ~ \"Technology\",\n      category == \"science/nature\" ~ \"Science/Nature\",\n      TRUE ~ str_to_title(category)\n    ),\n    category_type = case_when(\n      category == \"science\" ~ \"Major: Science\",\n      category == \"health\" ~ \"Major: Health\",\n      category == \"history\" ~ \"Major: History\",\n      TRUE ~ \"Minor Categories\"\n    ),\n    label_text_hierarchical = paste0(\n      toupper(category_clean), \"\\n\",\n      \"\\n\",\n      count, \" myth\", if_else(count == 1, \"\", \"s\"), \"\\n\",\n      format_numbers_smart(avg_hits), \" avg searches\"\n    )\n  ) |&gt;\n  filter(count &gt; 0) |&gt;\n  arrange(desc(count))\n```\n\n\n5. Visualization Parameters\n\nShow code```{r}\n#| label: params\n#| include: true\n#| warning: false\n\n### |-  plot aesthetics ----\n# Get base colors with custom palette\ncolors &lt;- get_theme_colors(palette = c(\n  \"Major: Science\" = \"#273F4F\",\n  \"Major: Health\" = \"#447D9B\", \n  \"Major: History\" = \"#FE7743\",\n  \"Minor Categories\" = \"#bababa\"\n))\n\n### |-  titles and caption ----\ntitle_text &lt;- str_glue(\"Science, Health, and History: The Big Three of Misconceptions\")\nsubtitle_text &lt;- str_glue(\"These three domains account for **44%** of all debunked myths • Numbers show average Google searches per myth\")\n\n# Create caption\ncaption_text &lt;- create_mm_caption(\n  mm_year = 2025,\n  mm_week = 29,\n  source_text = \"&lt;br&gt;EPI analysis of S&P Global (2024), IMPLAN (2024), and FRED data | Job-years, 2024-2032\"\n)\n\n### |-  fonts ----\nsetup_fonts()\nfonts &lt;- get_font_families()\n\n### |-  plot theme ----\n\n# Start with base theme\nbase_theme &lt;- create_base_theme(colors)\n\n# Add weekly-specific theme elements\nweekly_theme &lt;- extend_weekly_theme(\n  base_theme,\n  theme(\n    \n    # Legend formatting\n    legend.position = \"plot\",\n    legend.title = element_text(face = \"bold\"),\n    \n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"gray\", linewidth = 0.5), \n    axis.ticks.length = unit(0.2, \"cm\"), \n    \n    # Axis formatting\n    axis.title.x = element_text(face = \"bold\", size = rel(0.85)),\n    axis.title.y = element_text(face = \"bold\", size = rel(0.85)),\n    axis.text.y = element_text(face = \"bold\", size = rel(0.85)),\n    \n    # Grid lines\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    \n    # Margin\n    plot.margin = margin(20, 20, 20, 20)\n  )\n)\n\n# Set theme\ntheme_set(weekly_theme)\n```\n\n\n6. Plot\n\nShow code```{r}\n#| label: plot\n#| warning: false\n\n# Plot ----\np &lt;- ggplot(\n  treemap_data,\n  aes(\n    area = count, fill = category_type,\n    label = label_text_hierarchical\n  )\n) +\n  # Geoms\n  geom_treemap(\n    color = \"white\",\n    size = 2.5,\n    alpha = 0.92\n  ) +\n  geom_treemap_text(\n    family = \"Arial\",\n    colour = \"white\",\n    place = \"centre\",\n    size = 11,\n    fontface = \"bold\",\n    min.size = 8,\n    reflow = TRUE,\n    padding.y = grid::unit(4, \"mm\"),\n    padding.x = grid::unit(3, \"mm\")\n  ) +\n  # Scales\n  scale_fill_manual(values = colors$palette) +\n  coord_equal() +\n  # Labs\n  labs(\n    title = title_text,\n    subtitle = subtitle_text,\n    caption = caption_text,\n  ) +\n  # Theme\n  theme(\n    plot.title = element_markdown(\n      size = rel(1.8),\n      family = fonts$title,\n      face = \"bold\",\n      hjust = 0.5,\n      color = colors$title,\n      lineheight = 1.1,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.subtitle = element_markdown(\n      size = rel(0.9),\n      hjust = 0.5,\n      family = fonts$subtitle,\n      color = alpha(colors$subtitle, 0.9),\n      lineheight = 0.9,\n      margin = margin(t = 5, b = 20)\n    ),\n    plot.caption = element_markdown(\n      size = rel(0.6),\n      family = fonts$caption,\n      color = colors$caption,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    )\n  )\n```\n\n\n7. Save\n\nShow code```{r}\n#| label: save\n#| warning: false\n\n### |-  plot image ----  \nsave_plot(\n  plot = p, \n  type = \"makeovermonday\", \n  year = 2025,\n  week = 28,\n  width = 10, \n  height = 10\n  )\n```\n\n\n8. Session Info\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1       treemapify_2.5.6 glue_1.8.0       scales_1.3.0    \n [5] showtext_0.9-7   showtextdb_3.0   sysfonts_0.8.9   ggtext_0.1.2    \n [9] lubridate_1.9.3  forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4     \n[13] purrr_1.0.2      readr_2.1.5      tidyr_1.3.1      tibble_3.2.1    \n[17] ggplot2_3.5.1    tidyverse_2.0.0  pacman_0.5.1    \n\nloaded via a namespace (and not attached):\n [1] ggfittext_0.10.2  gtable_0.3.6      xfun_0.49         htmlwidgets_1.6.4\n [5] tzdb_0.5.0        vctrs_0.6.5       tools_4.4.0       generics_0.1.3   \n [9] curl_6.0.0        parallel_4.4.0    gifski_1.32.0-1   fansi_1.0.6      \n[13] pkgconfig_2.0.3   skimr_2.1.5       lifecycle_1.0.4   farver_2.1.2     \n[17] compiler_4.4.0    textshaping_0.4.0 munsell_0.5.1     repr_1.1.7       \n[21] janitor_2.2.0     codetools_0.2-20  snakecase_0.11.1  htmltools_0.5.8.1\n[25] yaml_2.3.10       crayon_1.5.3      pillar_1.9.0      camcorder_0.1.0  \n[29] magick_2.8.5      commonmark_1.9.2  tidyselect_1.2.1  digest_0.6.37    \n[33] stringi_1.8.4     rsvg_2.6.1        rprojroot_2.0.4   fastmap_1.2.0    \n[37] grid_4.4.0        colorspace_2.1-1  cli_3.6.4         magrittr_2.0.3   \n[41] base64enc_0.1-3   utf8_1.2.4        withr_3.0.2       bit64_4.5.2      \n[45] timechange_0.3.0  rmarkdown_2.29    bit_4.5.0         ragg_1.3.3       \n[49] hms_1.1.3         evaluate_1.0.1    knitr_1.49        markdown_1.13    \n[53] rlang_1.1.6       gridtext_0.1.5    Rcpp_1.0.13-1     xml2_1.3.6       \n[57] renv_1.0.3        svglite_2.1.3     rstudioapi_0.17.1 vroom_1.6.5      \n[61] jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n\n\n\n\n\n9. GitHub Repository\n\n\n\n\n\n\nExpand for GitHub Repo\n\n\n\n\n\nThe complete code for this analysis is available in mm_2025_28.qmd.\nFor the full repository, click here.\n\n\n\n10. References\n\n\n\n\n\n\nExpand for References\n\n\n\n\n\n\nData:\n\n\nMakeover Monday 2025 Week 28: Common MythConceptions\n\n\n\nArticle\n\n\nInformation is Beautiful: Common MythConceptions\n\n\n\n\n\n\n\n\n\n Back to top"
  }
]